<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue第一天</title>
    <link href="/2021/03/08/Vue/Vue%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2021/03/08/Vue/Vue%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-第一天"><a href="#Vue-第一天" class="headerlink" title="Vue 第一天"></a>Vue 第一天</h1><h2 id="一、vue-介绍"><a href="#一、vue-介绍" class="headerlink" title="一、vue 介绍"></a>一、vue 介绍</h2><h3 id="1-认识-vue"><a href="#1-认识-vue" class="headerlink" title="1.认识 vue"></a>1.认识 vue</h3><ul><li>特点：易用、灵活、高效</li><li>版本号：2.6</li><li>作者：尤雨溪</li><li>兼容：IE8 及以下不兼容</li></ul><h3 id="2-vue-的基本使用"><a href="#2-vue-的基本使用" class="headerlink" title="2.vue 的基本使用"></a>2.vue 的基本使用</h3><ul><li><p>引入 vue.js</p><ul><li>开发版本(development)：警告、提示、没有压缩代码</li><li>生产版本(production)：部署上线时用的，删除了警告、提示，压缩了代码</li></ul></li><li><p>创建挂载节点标签</p><ul><li>注意：不能是 body 和 html 标签</li></ul></li><li><p>实例化 vue 对象</p><ul><li>el：挂载节点的选择器</li><li>data：模板中用到的所有数据 插值表达式NaN</li><li>methods：主要是定义一些函数</li></ul></li></ul><h3 id="3-MV-VM-：data-里面的数据一旦变化，模板里面会自动更新"><a href="#3-MV-VM-：data-里面的数据一旦变化，模板里面会自动更新" class="headerlink" title="3.MV VM ：data 里面的数据一旦变化，模板里面会自动更新"></a>3.MV VM ：data 里面的数据一旦变化，模板里面会自动更新</h3><ul><li>M： model（data 里面的数据）</li><li>V：view（视图，就是模板）</li><li>VM：虚拟模型</li></ul><h2 id="二、vue-的指令"><a href="#二、vue-的指令" class="headerlink" title="二、vue 的指令"></a>二、vue 的指令</h2><h3 id="1-什么是指令"><a href="#1-什么是指令" class="headerlink" title="1.什么是指令"></a>1.什么是指令</h3><p><strong>指令就是标签的自定义属性</strong></p><h3 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2.常用指令"></a>2.常用指令</h3><ul><li><strong>v-html</strong>：渲染内容，<strong>可以转义 HTML 字符串内容！</strong> 类似于原生的 innerHTML <code>&lt;div v-html=&#39;变量、表达式、字符串&#39;&gt;</code></li><li><strong>v-text</strong>：渲染内容，类似于插值表达式，没有闪动问题， <strong>不可以转义 HTML 字符串内容！</strong> 类似于原生的 innerText <code>&lt;div v-text=&#39;变量、表达式、字符串&#39;&gt;</code></li><li><strong>v-cloak</strong>：防止闪动 <code>&lt;div v-cloak&gt;</code></li><li><strong>v-pre</strong>：跳过编译，输出原本内容 <code> &lt;div v-pre&gt;</code></li><li><strong>v-once</strong>：一次性绑定，内容不会根据数据的变化而变化 <code> &lt;标签 v-once&gt;&#123;&#123;变量&#125;&#125;&lt;/标签&gt;</code></li><li><strong>v-on</strong>：事件绑定 <code>&lt;标签 v-on:事件类型=&quot;事件函数&quot;&gt;&lt;/标签&gt; </code> 简写：<code>&lt;标签 @事件类型=&quot;事件函数&quot;&gt;&lt;/标签&gt;</code></li><li><strong>v-bind</strong>：属性绑定 <code>&lt;标签 @事件类型=&quot;事件函数&quot;&gt;&lt;/标签&gt;</code> 简写：<code>&lt;标签 :原生属性=&quot;变量/表达式&quot;&gt;&lt;/标签&gt;</code></li><li><strong>v-model</strong>：双向绑定</li></ul><h2 id="三、vue-的事件"><a href="#三、vue-的事件" class="headerlink" title="三、vue 的事件"></a>三、vue 的事件</h2><h3 id="1-事件的绑定"><a href="#1-事件的绑定" class="headerlink" title="1.事件的绑定"></a>1.事件的绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板里面</span><br>&lt;标签 v-on:事件类型=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br>&lt;标签 v-on:事件类型=<span class="hljs-string">&quot;事件函数()&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">// 简写</span><br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数()&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">// JS 里面</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;xx&quot;</span>,<br>   data:&#123;&#125;,<br>   methods:&#123;<br>      事件函数()&#123;<br>         ...<br>      &#125;<br>   &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-事件传参"><a href="#2-事件传参" class="headerlink" title="2.事件传参"></a>2.事件传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板里面</span><br>&lt;标签 v-on:事件类型=<span class="hljs-string">&quot;事件函数(实参)&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">// 缩写</span><br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数(实参)&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">// JS 里面</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;xx&quot;</span>,<br>   data:&#123;&#125;,<br>   methods:&#123;<br>      事件函数(形参)&#123;<br>         ...<br>      &#125;<br>   &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-事件对象"><a href="#3-事件对象" class="headerlink" title="3.事件对象"></a>3.事件对象</h3><ul><li>事件对象： 描述一个事件相关的所有信息！（事件的类型、事件源头、）通常使用它来<strong>获取数据</strong>、阻止默认行为、阻止冒泡！</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;标签 v-on:事件类型=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br>&lt;!--缩写--&gt;<br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">// JS 里面</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;xx&quot;</span>,<br>   data:&#123;&#125;,<br>   methods:&#123;<br>      事件函数(形参)&#123;  <span class="hljs-comment">// 形参就是事件对象！！！</span><br>         ...<br>      &#125;<br>   &#125;<br>&#125;)<br>！！如果标签中的事件函数没有传参，那么实例对象里的形参就是事件对象<br></code></pre></td></tr></table></figure><h3 id="4-既传参又获取事件对象"><a href="#4-既传参又获取事件对象" class="headerlink" title="4.既传参又获取事件对象"></a>4.既传参又获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板里面</span><br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数($event,实参)&quot;</span>&gt;&lt;<span class="hljs-regexp">/标签&gt;     /</span><span class="hljs-regexp">/ $event 固定写法不能写错！写的位置没有要求，最终都要和形参一一对应的</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ JS 里面</span><br><span class="hljs-regexp">new Vue(&#123;</span><br><span class="hljs-regexp">   el:&quot;xx&quot;,</span><br><span class="hljs-regexp">   data:&#123;&#125;,</span><br><span class="hljs-regexp">   methods:&#123;</span><br><span class="hljs-regexp">      事件函数(形参1,形参2)&#123;  /</span><span class="hljs-regexp">/ 形参1就是事件对象！！！,形参2是传递进入的数据！</span><br><span class="hljs-regexp">         ...</span><br><span class="hljs-regexp">      &#125;</span><br><span class="hljs-regexp">   &#125;</span><br><span class="hljs-regexp">&#125;)</span><br><span class="hljs-regexp"> $event是事件对象 再.target就是对应的标签 这里为对应的input输入框 再.value就是输入框的内容</span><br></code></pre></td></tr></table></figure><h3 id="5-事件简写"><a href="#5-事件简写" class="headerlink" title="5.事件简写"></a>5.事件简写</h3><ul><li><strong>仅限于对变量进行一些简单的赋值修改</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板里面</span><br>&lt;标签 @事件类型=<span class="hljs-string">&quot;变量的赋值操作&quot;</span>&gt;&lt;/标签&gt;<br></code></pre></td></tr></table></figure><h3 id="6-事件修饰符"><a href="#6-事件修饰符" class="headerlink" title="6.事件修饰符"></a>6.事件修饰符</h3><ul><li>帮助我们实现一些方便操作（比如：阻止默认事件、阻止冒泡、捕获触发、等等！）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;标签 @事件类型.修饰符=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br>&lt;标签 @事件类型.修饰符<span class="hljs-number">1.</span>修饰符<span class="hljs-number">2</span>=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>.stop</code>：阻止冒泡</p><p><code>.prevent</code>：阻止默认行为</p><p><code>.capture</code>：捕获触发事件</p><p><code>.self</code>：跳过冒泡事件和捕获事件 只执行当前</p><p><code>.once</code>：事件只会触发一次</p><p><code>.passive</code>：滚动事件</p><p>。。。。。。。。。</p></blockquote><h3 id="7-按键修饰符"><a href="#7-按键修饰符" class="headerlink" title="7.按键修饰符"></a>7.按键修饰符</h3><ul><li>按键修饰符是给按键相关事件的！ 主要给<code> &lt;input&gt;</code> 或<code> &lt;textarea&gt;</code> 绑定的</li><li>按键相关事件<ul><li>keydown</li><li>keyup</li><li>keypress</li><li><strong>input</strong>：该事件在<code> &lt;input&gt;</code> 或 <code>&lt;textarea&gt;</code> 元素的值发生改变时触发</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;标签 @事件类型.修饰符=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>.enter</code></p><p><code>.delete</code>： (捕获“删除”和“退格”键)</p><p>。。。。。。。。。</p></blockquote><ul><li>自定义按键修饰符</li></ul><p><strong><code>Vue.config.keyCodes.按键修饰符名 = 按键的keycode码！</code></strong></p><p>注意：一般放在实例化之前去配置！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.a=<span class="hljs-string">&#x27;...&#x27;</span>&gt;<br>...<br>Vue.config.keyCodes.a = <span class="hljs-number">65</span>;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;...&#125;）<br></code></pre></td></tr></table></figure><h2 id="四、vue-的样式"><a href="#四、vue-的样式" class="headerlink" title="四、vue 的样式"></a>四、vue 的样式</h2><h3 id="1-操作-class"><a href="#1-操作-class" class="headerlink" title="1.操作 class"></a>1.操作 class</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">// 操作class!!!<br>        // 对象语法！ &lt;标签 :class=&quot;&#123;class名1:变量1,class名2:变量2&#125;&quot;&gt;&lt;/标签&gt;   变量的值是布尔值，决定要不要使用该class!<br>        // 数组语法！ &lt;标签 :class=&quot;[变量1,变量2,&#x27;class名3&#x27;]&quot;&gt;&lt;/标签&gt;          变量的值是class名！ 字符串里的就是class名<br>        // 属性绑定！ &lt;标签 :class=&quot;条件 ？&#x27;class名1&#x27;:&#x27;class名2&#x27; &quot;&gt;&lt;/标签&gt;     必须掌握！！！<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对象语法</span><br><span class="hljs-comment">//&lt;div v-bind:class=&quot;&#123;active: isActive,error: isError&#125;&quot;&gt;</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&quot;#app&quot;</span>,<br>  data: &#123;<br>    isActive: <span class="hljs-literal">true</span>,<br>    isError: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  methods: &#123;<br>    handle: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// 控制isActive的值在true和false之间进行切换 加!号为取反</span><br>      <span class="hljs-built_in">this</span>.isActive = !<span class="hljs-built_in">this</span>.isActive;<br>      <span class="hljs-built_in">this</span>.isError = !<span class="hljs-built_in">this</span>.isError;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">//数组语法</span><br><span class="hljs-comment">//&lt;div v-bind:class=&quot;[activeClass, errorClass,&#x27;hehe&#x27;,&#x27;heihei&#x27;]&quot;&gt;测试样式&lt;/div&gt;</span><br><span class="hljs-comment">//属性绑定</span><br><span class="hljs-comment">//&lt;h1 :class=&quot;10&gt;15 ?&#x27;active&#x27;:&#x27;noinfo&#x27;&quot;&gt;我是测试&lt;/h1&gt;</span><br><span class="hljs-comment">//&lt;h1 :class=&quot;hehe&quot;&gt;我是测试&lt;/h1&gt;</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&quot;#app&quot;</span>,<br>  data: &#123;<br>    hehe: <span class="hljs-string">&quot;active&quot;</span>,<br>    activeClass: <span class="hljs-string">&quot;active&quot;</span>,<br>    errorClass: <span class="hljs-string">&quot;error&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-操作-style"><a href="#2-操作-style" class="headerlink" title="2.操作 style"></a>2.操作 style</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">// 操作style！！！<br>        // 对象语法！  &lt;标签 :style=&quot;&#123;样式属性名1:变量1,样式属性名2:变量2&#125;&quot;&gt;&lt;/标签&gt;  变量的值是样式属性值！<br>        // 数组语法！  &lt;标签 :style=&quot;[变量1,变量2]&quot;&gt;&lt;/标签&gt;  变量的值是样式描述对象  变量1:&#123;属性名:属性值&#125;  变量2:&#123;属性名:属性值&#125;<br>        // 属性绑定！  &lt;标签 :style=&quot;`font-size:$&#123;a&#125;;border-color:$&#123;b&#125;`&quot; /&gt;      这里用了模板字符串``  data&#123; a:&#x27;20px&#x27; b:&#x27;red&#x27; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对象语法</span><br><span class="hljs-comment">//&lt;div v-bind:style=&#x27;&#123;border: borderStyle, width: widthStyle, height: heightStyle&#125;&#x27;&gt;&lt;/div&gt;</span><br><span class="hljs-comment">//上面的简写</span><br><span class="hljs-comment">// &lt;div v-bind:style=&#x27;objStyles&#x27;&gt;&lt;/div&gt;</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&quot;#app&quot;</span>,<br>  data: &#123;<br>    borderStyle: <span class="hljs-string">&quot;1px solid blue&quot;</span>,<br>    widthStyle: <span class="hljs-string">&quot;100px&quot;</span>,<br>    heightStyle: <span class="hljs-string">&quot;200px&quot;</span>,<br>    objStyles: &#123;<br>      border: <span class="hljs-string">&quot;1px solid green&quot;</span>,<br>      width: <span class="hljs-string">&quot;200px&quot;</span>,<br>      height: <span class="hljs-string">&quot;100px&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">//数组语法</span><br><span class="hljs-comment">//&lt;div v-bind:style=&#x27;[objStyles, overrideStyles]&#x27;&gt;&lt;/div&gt;</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&quot;#app&quot;</span>,<br>  data: &#123;<br>    objStyles: &#123;<br>      border: <span class="hljs-string">&quot;1px solid green&quot;</span>,<br>      width: <span class="hljs-string">&quot;200px&quot;</span>,<br>      height: <span class="hljs-string">&quot;100px&quot;</span>,<br>    &#125;,<br>    overrideStyles: &#123;<br>      border: <span class="hljs-string">&quot;5px solid orange&quot;</span>,<br>      backgroundColor: <span class="hljs-string">&quot;blue&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">//属性绑定 (常用)</span><br><span class="hljs-comment">//&lt;h3 :style=&quot;&#x27;background-color:&#x27;+bgc+&#x27;;font-size: &#x27;+num+&#x27;px;&#x27;&quot;&gt;会呵呵呵呵&lt;/h3&gt;  引引加加</span><br><span class="hljs-comment">//&lt;h3 :style=&quot;`background-color:$&#123;bgc&#125;;font-size:$&#123;num&#125;px;`&quot;&gt;会呵呵呵呵&lt;/h3&gt;   模板字符串</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&quot;#app&quot;</span>,<br>  data: &#123;<br>    num: <span class="hljs-number">40</span>,<br>    bgc: <span class="hljs-string">&quot;orange&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js第五天</title>
    <link href="/2021/02/26/Node.js/Node.js%E7%AC%AC05%E5%A4%A9/"/>
    <url>/2021/02/26/Node.js/Node.js%E7%AC%AC05%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-第-05-天"><a href="#Node-js-第-05-天" class="headerlink" title="Node.js 第 05 天"></a>Node.js 第 05 天</h1><h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1-数据库的概念"><a href="#1-数据库的概念" class="headerlink" title="1. 数据库的概念"></a>1. 数据库的概念</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、什么是数据库<br>  数据库 (database) 是专门用来组织, 存储和管理数据的仓库<br>二、数据库的分类<br>  目前企业开发中最常用的数据库有以下几种:<br>  1. MySQL 数据库 (最广泛和最流行的)<br>  2. Oracle 数据库<br>  3. SQL Server 数据库<br>  4. Mongodb 数据库<br></code></pre></td></tr></table></figure><h3 id="2-数据库组织结构"><a href="#2-数据库组织结构" class="headerlink" title="2. 数据库组织结构"></a>2. 数据库组织结构</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、传统数据库的组织结构<br>  即数据以什么形式来进行存储的, 类似于 excel 表格中的工作簿, 工作表, 数据行, 数据列这四部分, 传统数据库的<br>组织结构分为:<br>  数据库 (database), 数据表(table), 数据行(row), 字段(field) 这四大组成部分<br></code></pre></td></tr></table></figure><h2 id="二、SQL-语句"><a href="#二、SQL-语句" class="headerlink" title="二、SQL 语句"></a>二、SQL 语句</h2><h3 id="1-基础语句-增删改查"><a href="#1-基础语句-增删改查" class="headerlink" title="1. 基础语句 增删改查"></a>1. 基础语句 增删改查</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">查询数据 <span class="hljs-keyword">select</span><br><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称   列名称为<span class="hljs-operator">*</span>表示所有<br><span class="hljs-comment">-- 通过* 从users表中查询所有列的数据</span><br><span class="hljs-comment">-- select * from users;</span><br><span class="hljs-comment">-- 从users 表中查询指定的 username和password 列的数据</span><br><span class="hljs-comment">-- select username,password from users;</span><br>插入数据 <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名称(列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...)<br><span class="hljs-comment">-- 向users表中插入一条数据 username是tom password是admin123</span><br><span class="hljs-comment">-- insert into users (username,password) values(&#x27;tom&#x27;,&#x27;admin123&#x27;);</span><br>更新数据 <span class="hljs-keyword">update</span><br><span class="hljs-keyword">UPDATE</span> 表名称 <span class="hljs-keyword">SET</span> 列<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 列名称<span class="hljs-operator">=</span>值<br><span class="hljs-comment">-- 修改 username 为张三 的这条数据的密码， 修改为 abcdef</span><br><span class="hljs-comment">-- update users set password=&#x27;abcdef&#x27; where username = &#x27;张三&#x27;;</span><br><span class="hljs-comment">-- status的值是布尔值 所以不用加引号  varchar字符类型 要加&#x27;&#x27;</span><br><span class="hljs-comment">-- update users set password=&#x27;hahaha&#x27;,status=1 where username = &#x27;李四&#x27;;</span><br>删除数据 <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称<span class="hljs-operator">=</span>值<br><span class="hljs-comment">-- 删除id为3的用户</span><br><span class="hljs-comment">-- delete from users where id=3;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-where-子句"><a href="#2-where-子句" class="headerlink" title="2. where 子句"></a>2. where 子句</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">WHERE 子句的作用<br>      如果需要有条件的从表中选取数据, 可以使用 WHERE 子句添加到 SQL 语句的末尾<br>    例如:<br>      `SELECT * FROM 表名称 WHERE 列名称 运算符 值`<br><br>    二、常见的运算符<br>      (1) &gt; 和 &gt;=<br>      (2) &lt; 和 &lt;=<br>      (3) != 或 &lt;&gt;   &lt;&gt;不方便记忆 我们用老的 != 就行<br>      (4) =<br>      (5) BETWEEN   between 2 and 8   2到8  包括2 8<br>      (6) LIKE   like &#x27;%123%&#x27;   只要包含123<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--id大于3</span><br><span class="hljs-comment">-- select * from users where id&gt;3;</span><br><span class="hljs-comment">--id不等于2</span><br><span class="hljs-comment">-- select * from users where id !=2;</span><br><span class="hljs-comment">--password中包含34的数据</span><br><span class="hljs-comment">-- select * from users where password like&#x27;%34%&#x27;;</span><br><span class="hljs-comment">--id 2到5的数据</span><br><span class="hljs-comment">-- select * from users where id between 2 and 5;</span><br></code></pre></td></tr></table></figure><h3 id="3-and-和-or-运算符"><a href="#3-and-和-or-运算符" class="headerlink" title="3. and 和 or 运算符"></a>3. and 和 or 运算符</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、AND 和 OR 运算符<br>   可以在 WHERE 子句中把多个条件结合起来, AND 表示并且, OR 表示或者的意思<br><br>   补充： and和or可以写多个 如 条件1 and 条件2 and 条件3.....<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中status=1 且id&gt;=4的用户  虽然没有符合的数据 但是这条指令是正确的 并不会报错</span><br><span class="hljs-comment">-- select * from users where status=1 and id&gt;=4;</span><br><span class="hljs-comment">-- 查询表中status=1 或 id&gt;=4的用户</span><br><span class="hljs-comment">-- select * from users where status=1 or id&gt;=4;</span><br></code></pre></td></tr></table></figure><h3 id="4-order-by-子句"><a href="#4-order-by-子句" class="headerlink" title="4. order by 子句"></a>4. order by 子句</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、使用 ORDER BY 子句对结果进行排序<br>  默认的排序方式为升序 ASC 如果使用降序可以添加 DESC 关键字<br>  order by ... asc      order by ... desc   这里为了方便交互 最好升序的时候也写上asc<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中所有用户 根据status升序来排列</span><br><span class="hljs-comment">-- select * from users order by status asc</span><br><span class="hljs-comment">-- 查询表中所有用户 根据id 降序来排列</span><br><span class="hljs-comment">-- select * from users order by id desc</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">二、多重排序规则  用,号隔开<br>   `SELECT 列名称 FROM 表名称 ORDER BY 列名称 [排序规则],  列名称 [排序规则]`<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中所有用户 先根据status 降序排列,再根据id进行升序排列</span><br><span class="hljs-comment">-- select * from users order by status desc,id asc</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">三、注意<br>  同时使用 ORDER BY 和 WHERE子句时, 应该让 ORDER BY 位于 WHERE 之后, 否则将会产生错误(先用where选取数据后 再用order by来进行排列)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中id&gt;3的用户并且根据id 降序来排列</span><br><span class="hljs-comment">-- select * from users where id&gt;3 order by id desc</span><br></code></pre></td></tr></table></figure><h3 id="5-count-函数"><a href="#5-count-函数" class="headerlink" title="5. count 函数"></a>5. count 函数</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、COUNT 函数作用<br>  可以返回匹配指定条件的行数<br>  `SELECT COUNT(*) FROM 表名称`<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 计算 users表中所有id大于等于5的用户总数</span><br><span class="hljs-comment">-- select count(*) from users where id&gt;=5</span><br></code></pre></td></tr></table></figure><h3 id="6-as-使用别名"><a href="#6-as-使用别名" class="headerlink" title="6. as 使用别名"></a>6. as 使用别名</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、使用 AS 为列名称设置别名<br>  示例: 给查询出来的用户起一个别名<br>  `SELECT username As name FROM users;`<br><br>  复习ES6中结构赋值中的别名<br>  const &#123;username:uname&#125; = &#123;username:&#x27;小王&#x27;,age=15&#125;;<br>  console.log(uname)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 给总数起一个别名</span><br><span class="hljs-comment">-- select  count(*) as total from users where id&gt;=5</span><br><span class="hljs-comment">-- 多个列字段用,分割</span><br><span class="hljs-comment">-- select count(*) as total,username as uname from users where  id&lt;=5</span><br></code></pre></td></tr></table></figure><h2 id="三、操作数据库"><a href="#三、操作数据库" class="headerlink" title="三、操作数据库"></a>三、操作数据库</h2><ul><li>安装 MySQL 数据库的第三方模块(mysql) 可以实现在 node 中操作数据库</li><li>通过 mysql 模块连接到 MySQL 数据库</li><li>通过 mysql 模块执行 SQL 语句</li></ul><h3 id="1-引入-mysql-模块"><a href="#1-引入-mysql-模块" class="headerlink" title="1. 引入 mysql 模块"></a>1. 引入 mysql 模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-建立和数据库的连接-mysql-createPool"><a href="#2-建立和数据库的连接-mysql-createPool" class="headerlink" title="2. 建立和数据库的连接 mysql.createPool()"></a>2. 建立和数据库的连接 mysql.createPool()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>  host: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">//数据库的域名/ip  默认是3006</span><br>  user: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-comment">//账号名</span><br>  password: <span class="hljs-string">&quot;admin123&quot;</span>, <span class="hljs-comment">//密码</span><br>  database: <span class="hljs-string">&quot;my_db_01&quot;</span>, <span class="hljs-comment">//要连接的数据库名称</span><br>&#125;);<br><span class="hljs-comment">// host和user 可以点sql左上角的房子图标回到首页来查看 password默认是admin123</span><br></code></pre></td></tr></table></figure><h3 id="3-使用-query-方法执行-sql-语句，测试连接数据库是否成功"><a href="#3-使用-query-方法执行-sql-语句，测试连接数据库是否成功" class="headerlink" title="3. 使用 query()方法执行 sql 语句，测试连接数据库是否成功"></a>3. 使用 query()方法执行 sql 语句，测试连接数据库是否成功</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">db.query(<span class="hljs-string">`select 5 + 1 as sum`</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// err:是执行sql时的错误对象</span><br>  <span class="hljs-comment">// results:是执行sql后的结果集,数据类型是一个数组</span><br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.massage);<br>  <span class="hljs-comment">//成功后</span><br>  <span class="hljs-built_in">console</span>.log(results);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-查询-user-表中所有数据"><a href="#4-查询-user-表中所有数据" class="headerlink" title="4. 查询 user 表中所有数据"></a>4. 查询 user 表中所有数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`select * from users where id&gt;=2 `</span>;<br>db.query(sqlStr, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br>  <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//得到的结果始终是一个数组 不管里面有几条数据</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="5-插入一条数据"><a href="#5-插入一条数据" class="headerlink" title="5. 插入一条数据"></a>5. 插入一条数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newUser = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;傻逼2&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;4567&quot;</span> &#125;;<br><span class="hljs-comment">// 格式和sql的插入语句一样 但是values里面的数据用?这个占位符来表示，mysql最终会把它替换为真实的字符</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`insert into users(username,password) values(?,?)`</span>;<br><span class="hljs-comment">// db.query(sqlStr,[&#x27;tom&#x27;,&#x27;123&#x27;])  //可以直接写  也可以事先写好一个数据对象</span><br>db.query(sqlStr, [newUser.username, newUser.password], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br><br>  <span class="hljs-comment">// console.log(result); //这里得到的是一个对象</span><br>  <span class="hljs-comment">//通过这个对象里的.affectedRows属性 判断影响的行数是否为1 不为1就有错误</span><br>  <span class="hljs-keyword">if</span> (result.affectedRows != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;插入失败&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-1-插入一条数据的快捷方法"><a href="#5-1-插入一条数据的快捷方法" class="headerlink" title="5.1 插入一条数据的快捷方法"></a>5.1 插入一条数据的快捷方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newUser = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;笨蛋&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;852963&quot;</span> &#125;;<br><span class="hljs-comment">// 当属性名和数据的字段名一样时 用set ?</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`insert into users set ?`</span>;<br>db.query(sqlStr, newUser, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br>  <span class="hljs-keyword">if</span> (result.affectedRows != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;插入失败&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-更新一条数据"><a href="#6-更新一条数据" class="headerlink" title="6. 更新一条数据"></a>6. 更新一条数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userInfo = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;大傻逼2&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;250250250&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">9</span> &#125;;<br><span class="hljs-comment">// 定义sql</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`update users set username=?,password=? where id=?`</span>;<br><span class="hljs-comment">//执行sql</span><br>db.query(<br>  sqlStr,<br>  [userInfo.username, userInfo.password, userInfo.id],<br>  (err, result) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br>    <span class="hljs-keyword">if</span> (result.affectedRows != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;更新失败&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="6-1-更新一条数据的快捷方法"><a href="#6-1-更新一条数据的快捷方法" class="headerlink" title="6.1 更新一条数据的快捷方法"></a>6.1 更新一条数据的快捷方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userInfo = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;哈哈哈&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;741852&quot;</span> &#125;;<br><span class="hljs-comment">// 定义sql</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`update users set ? where id=?`</span>;<br><span class="hljs-comment">// 执行</span><br>db.query(sqlStr, [userInfo, <span class="hljs-number">9</span>], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br>  <span class="hljs-keyword">if</span> (result.affectedRows != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;更新失败&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="7-删除一条数据"><a href="#7-删除一条数据" class="headerlink" title="7. 删除一条数据"></a>7. 删除一条数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义sql</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`delete from users where id=?`</span>;<br><span class="hljs-comment">// 执行   因为这里只需要传一个id  所以可以省略[]</span><br>db.query(sqlStr, <span class="hljs-number">10</span>, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br>  <span class="hljs-keyword">if</span> (result.affectedRows != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="7-1-实现标记删除"><a href="#7-1-实现标记删除" class="headerlink" title="7.1 实现标记删除"></a>7.1 实现标记删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">前期是在表中定义一个字段用来描述删除的状态信息(这里我们用的是status)，之后我们只要对这个字段进行更新就可以了<br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">`update users set status=? where id=?`</span>;<br><span class="hljs-comment">// 执行</span><br>db.query(sqlStr, [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message);<br>    <span class="hljs-keyword">if</span> (result.affectedRows != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除失败&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt 和 session 认证方案</title>
    <link href="/2021/02/26/Node.js/jwt%20%E5%92%8C%20session%20%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
    <url>/2021/02/26/Node.js/jwt%20%E5%92%8C%20session%20%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="jwt-和-session-认证方案"><a href="#jwt-和-session-认证方案" class="headerlink" title="jwt 和 session 认证方案"></a>jwt 和 session 认证方案</h1><h2 id="一、session-认证"><a href="#一、session-认证" class="headerlink" title="一、session 认证"></a>一、session 认证</h2><h3 id="1-服务端渲染的推荐使用-Session-认证机制"><a href="#1-服务端渲染的推荐使用-Session-认证机制" class="headerlink" title="1. 服务端渲染的推荐使用 Session 认证机制"></a>1. 服务端渲染的推荐使用 Session 认证机制</h3><h3 id="2-HTTP-协议的无状态性"><a href="#2-HTTP-协议的无状态性" class="headerlink" title="2. HTTP 协议的无状态性"></a>2. HTTP 协议的无状态性</h3><ul><li><p><strong>无状态性</strong>：HTTP 本身是一个无状态的协议, 它不会记录每次发送请求的用户信息, 这会导致服务器无法识别哪个用户发送了请求</p></li><li><p><strong>如何解决</strong>：可以借助 cookie 和 session 两种技术来存储用户的状态</p></li></ul><h3 id="3-cookie-技术"><a href="#3-cookie-技术" class="headerlink" title="3. cookie 技术"></a>3. cookie 技术</h3><h4 id="3-1-什么是-cookie？"><a href="#3-1-什么是-cookie？" class="headerlink" title="3.1 什么是 cookie？"></a>3.1 <strong>什么是 cookie？</strong></h4><p>Cookie 是存储在用户浏览器的一段不超过 4KB 的字符串,</p><p>它是由一个名称(Name) 和 值(Value) 以及其他几个用于控制 Cookie 有效期, 安全性, 使用范围的可选属性组成的</p><h4 id="3-2-cookie-的作用"><a href="#3-2-cookie-的作用" class="headerlink" title="3.2 cookie 的作用:"></a>3.2 <strong>cookie 的作用</strong>:</h4><p>不用域名下的 Cookie 信息是独立的, 每当客户端发送请求时, 会自动把当前域名下所有未过期的 Cookie 添加到请求头, 一同发送到服务器</p><h4 id="3-3-Cookie-的特性："><a href="#3-3-Cookie-的特性：" class="headerlink" title="3.3 Cookie 的特性："></a>3.3 <strong>Cookie 的特性</strong>：</h4><p>(1) 自动发送</p><p>(2) 域名独立</p><p>(3) 过期时限</p><p>(4) 4 KB 限制</p><h4 id="3-4-Cookie-的工作机制"><a href="#3-4-Cookie-的工作机制" class="headerlink" title="3.4 Cookie 的工作机制"></a>3.4 Cookie 的工作机制</h4><p>客户端(浏览器)第一次发送请求到服务器, 服务器会以响应头的形式向浏览器写入 Cookie 保存,</p><p>之后浏览器每次发送请求到服务器都会自动将 Cookie 以请求头的形式发送过去</p><h4 id="3-5-cookie-的缺点"><a href="#3-5-cookie-的缺点" class="headerlink" title="3.5 cookie 的缺点"></a>3.5 cookie 的缺点</h4><p>Cookie 是存储在浏览器端的, 并且浏览器本身提供了读写 Cookie 的方法, 因此 Cookie 信息很容易被窃取和伪造,</p><p>重要的隐私信息不建议存放在 Cookie 中</p><h3 id="4-Session-认证"><a href="#4-Session-认证" class="headerlink" title="4. Session 认证"></a>4. Session 认证</h3><h4 id="4-1-为什么使用？"><a href="#4-1-为什么使用？" class="headerlink" title="4.1 为什么使用？"></a>4.1 为什么使用？</h4><p>为了<strong>解决 cookie 的缺点</strong>使用 Session 方案, 用户的状态信息在服务器生成和存储, 浏览器只负责保留一个 sessionID 秘钥, 每次发送请求</p><p>时携带这个 sessionID 到服务器, 服务器根据这个唯一的 id 值查询对应的用户信息进行返回</p><h4 id="4-2-session-认证的局限性"><a href="#4-2-session-认证的局限性" class="headerlink" title="4.2 session 认证的局限性"></a>4.2 session 认证的局限性</h4><p>SessionID 需要借助 cookie 手段存放在浏览器, 当涉及到前端跨域请求后端接口的时候, 需要做额外的配置,</p><p>才能实现 Session 的认证。</p><h4 id="4-3-session-的使用"><a href="#4-3-session-的使用" class="headerlink" title="4.3 session 的使用"></a>4.3 session 的使用</h4><ol><li>下载载这个包</li></ol><p><code>npm i express-session</code></p><ol start="2"><li>引入这个包</li></ol><p><code>const session = require(&#39;express-session&#39;)</code></p><ol start="3"><li>配置 Session 中间件 具体配置信息可以去 npm 搜索这个包查看文档</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用session()方法 生成读写session数据的中间件 ===&gt; 配置后就可以使用req.session</span><br>app.use(<br>  session(&#123;<br>    secret: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-comment">//用于加密数据</span><br>    resave: <span class="hljs-literal">false</span>,<br>    saveUninitialized: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">//cookie: &#123; secure: true &#125;//文档中的这个配置项是针对https的 所以这里不需要</span><br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><ol start="4"><li>将登录成功后的用户信息，保存到 Session 中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// req.body 获取post请求中请求体中的数据 &#123;username:&#x27;admin&#x27;,password:&#x27;000000&#x27;&#125;</span><br>    req.session.user = req.body;<br>    req.session.isLogin = <span class="hljs-literal">true</span>;<br><br>    res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>获取用户姓名的接口：从 Session 中获取用户的名称，响应给客户端</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取用户姓名的接口</span><br>app.get(<span class="hljs-string">&quot;/api/username&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(req.session);<br>  <span class="hljs-comment">// 请从 Session 中获取用户的名称，响应给客户端</span><br>  <span class="hljs-keyword">if</span> (req.session.isLogin != <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;没有登陆&quot;</span> &#125;);<br>  &#125;<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;登录成功&quot;</span>,<br>    username: req.session.user.username,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="6"><li>退出登录的接口：清空 Session 信息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 退出登录的接口</span><br>app.post(<span class="hljs-string">&quot;/api/logout&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 清空 Session 信息</span><br>  <span class="hljs-comment">// req.session.destroy() 方法清空当前用户的session信息</span><br>  req.session.destroy();<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;退出成功&quot;</span>,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="二、JWT-认证"><a href="#二、JWT-认证" class="headerlink" title="二、JWT 认证"></a>二、JWT 认证</h2><h3 id="1-什么是-JWT-JSON-Web-Token"><a href="#1-什么是-JWT-JSON-Web-Token" class="headerlink" title="1. 什么是 JWT (JSON Web Token)?"></a>1. 什么是 JWT (JSON Web Token)?</h3><p>基于 token 的鉴权机制, 是前端目前最流行的跨域认证解决方案</p><h3 id="2-为什么使用-jwt"><a href="#2-为什么使用-jwt" class="headerlink" title="2. 为什么使用 jwt"></a>2. 为什么使用 jwt</h3><p>为了解决 session 认证的缺点，当前端跨域请求后端接口时, 推荐使用 JWT 这种认证方式, 没有和 Cookie 的绑定关系</p><h3 id="3-jwt-的工作机制"><a href="#3-jwt-的工作机制" class="headerlink" title="3. jwt 的工作机制"></a>3. jwt 的工作机制</h3><h4 id="3-1-JWT-的认证机制"><a href="#3-1-JWT-的认证机制" class="headerlink" title="3.1 JWT 的认证机制"></a>3.1 JWT 的认证机制</h4><p>用户信息通过加密签名后 <strong>token 字符串</strong>的形式, 保存在客户端浏览器中. 服务器通过解密客户端传来的 token 字符串</p><p>来认证用户的身份</p><h4 id="3-2-JWT-的组成部分"><a href="#3-2-JWT-的组成部分" class="headerlink" title="3.2 JWT 的组成部分"></a>3.2 JWT 的组成部分</h4><p>通常由三部分组成, 使用英文符号.进行分隔: Header.Payload.Signature<br><strong>Header</strong>: 头部<br><strong>Payload</strong>: 有效荷载, 这里存放的是经过加密后的用户信息<br><strong>Signature</strong>: 签名</p><h4 id="3-3-JWT-使用方式"><a href="#3-3-JWT-使用方式" class="headerlink" title="3.3 JWT 使用方式"></a>3.3 JWT 使用方式</h4><p>服务端签发 TOKEN 到客户端后, 可以存储到 <strong>localStorage</strong> 中, 每次发送请求前都要带上这个 TOKEN, 推荐放在</p><p>HTTP <strong>请求头</strong>的 <strong>Authorization</strong> 字段中 (大事件项目中处理方式一致)</p><h4 id="3-4-JWT-的使用"><a href="#3-4-JWT-的使用" class="headerlink" title="3.4 JWT 的使用"></a>3.4 JWT 的使用</h4><p>在 Node.js 项目中使用 JWT:</p><ol><li>安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt<br><code>npm i jsonwebtoken express-jwt</code><br>说明: jsonwebtoken 用于生成 Token 字符串信息; express-jwt 用于把 Token 字符串解析为 JSON 对象</li><li>定义 secret 密钥，建议将密钥命名为 secretKey</li><li>在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</li><li>注册将 JWT 字符串解析还原成 JSON 对象的中间件</li><li>使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</li><li>使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</li></ol>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js第四天</title>
    <link href="/2021/02/26/Node.js/Node.js%E7%AC%AC04%E5%A4%A9/"/>
    <url>/2021/02/26/Node.js/Node.js%E7%AC%AC04%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-第-04-天"><a href="#Node-js-第-04-天" class="headerlink" title="Node.js 第 04 天"></a>Node.js 第 04 天</h1><h2 id="一、Express"><a href="#一、Express" class="headerlink" title="一、Express"></a>一、Express</h2><h3 id="1-什么是-Express"><a href="#1-什么是-Express" class="headerlink" title="1. 什么是 Express"></a>1. 什么是 Express</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">官方给出的概念：Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架。<br>通俗的理解：Express 的作用和 Node.js 内置的 http 模块类似，是专门用来创建 Web 服务器的。<br>Express 的本质：就是一个 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法。<br></code></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">下载express包<br>npm i express<br><br>每次修改 node.js 服务端代码都需要重新启动服务, 比较繁琐, nodemon 插件可以实时监测文件的动态变化,并当文件内容变化时自动重启服务<br>全局安装:<br>    `npm i -g nodemon`<br>使用方法:<br>    `nodemon index.js`<br></code></pre></td></tr></table></figure><h3 id="3-创建基本的-web-服务器"><a href="#3-创建基本的-web-服务器" class="headerlink" title="3. 创建基本的 web 服务器"></a>3. 创建基本的 web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入包</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 2.创建web服务器实例</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 3. 启动服务，监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务运行：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-1-监听-get-事件"><a href="#3-1-监听-get-事件" class="headerlink" title="3.1 监听 get 事件"></a>3.1 监听 get 事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br>app.get(<span class="hljs-string">&quot;/userinfo&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//  通过 res.send() 方法 响应json字符串</span><br>  res.send(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xw&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-2-监听-post-事件"><a href="#3-2-监听-post-事件" class="headerlink" title="3.2 监听 post 事件"></a>3.2 监听 post 事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><span class="hljs-comment">// 监听post请求</span><br>app.post(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//通过 res.send() 方法，可以把处理好的内容，发送给客户端</span><br>  res.send(<span class="hljs-string">&quot;登录成功！&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-3-获取查询参数-req-query"><a href="#3-3-获取查询参数-req-query" class="headerlink" title="3.3 获取查询参数 req.query"></a>3.3 获取查询参数 req.query</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><span class="hljs-comment">// 监听get请求</span><br>add.get(<span class="hljs-string">&quot;/getbooks&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//  通过req.query获取客户端发过来的  查询参数</span><br>  <span class="hljs-comment">// 注意：默认情况下req.query是一个空对象</span><br>  <span class="hljs-built_in">console</span>.log(req.query);<br>  <span class="hljs-comment">//  使用send响应json字符串</span><br>  res.send(req.query);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-4-获取动态参数-req-params"><a href="#3-4-获取动态参数-req-params" class="headerlink" title="3.4 获取动态参数 req.params"></a>3.4 获取动态参数 req.params</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><span class="hljs-comment">// 4.监听get请求</span><br><span class="hljs-comment">//   注意：  :id表明这是一个动态参数，实际请求的时候不用加:</span><br><span class="hljs-comment">//   可以添加多个动态参数一定要加/隔开</span><br>add.get(<span class="hljs-string">&quot;/getbooks/:id/:name&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//  通过req.params获取url上的动态参数  结果是一个对象  默认是空对象</span><br>  <span class="hljs-built_in">console</span>.log(req.params);<br>  <span class="hljs-built_in">console</span>.log(req.params.id, req.params.name); <span class="hljs-comment">//因为是对象 所以可以通过属性名获取属性值</span><br>  <span class="hljs-comment">//  使用send响应json字符串</span><br>  res.send(req.params);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-5-托管静态资源-express-static"><a href="#3-5-托管静态资源-express-static" class="headerlink" title="3.5 托管静态资源 express.static()"></a>3.5 托管静态资源 express.static()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">// 托管assets文件夹下面的所有静态资源 express.static()   .use()方法可以在里面的第一个参数添加一个公共访问前缀</span><br><span class="hljs-comment">//  add.use(&#x27;/hahaha&#x27;express.static(&#x27;./assets&#x27;))</span><br><span class="hljs-comment">//  这里可以通过引入内置path模块 来实现绝对路径 这样不管在哪个位置都能访问了</span><br>add.use(<span class="hljs-string">&quot;/hahaha&quot;</span>, express.static(path.join(__dirname, <span class="hljs-string">&quot;./assets&quot;</span>)));<br><br><span class="hljs-comment">//注意：Express 在指定的静态目录中查找文件，并对外提供资源的访问路径。因此，存放静态文件的目录名不会出现在 URL 中。</span><br></code></pre></td></tr></table></figure><h4 id="3-6-补充：req-body-获取请求体中的数据-结果是一个对象"><a href="#3-6-补充：req-body-获取请求体中的数据-结果是一个对象" class="headerlink" title="3.6 补充：req.body 获取请求体中的数据 结果是一个对象"></a>3.6 补充：req.body 获取请求体中的数据 结果是一个对象</h4><h2 id="二、路由"><a href="#二、路由" class="headerlink" title="二、路由"></a>二、路由</h2><h3 id="1-路由的概念"><a href="#1-路由的概念" class="headerlink" title="1. 路由的概念"></a>1. 路由的概念</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、什么是路由<br>      路由在广义上理解就是指一种映射关系, 在 node.js 中指的是客户端的请求和服务端处理函数的映射关系,<br>    Express 路由包括 3 部分: 请求的 URL, 请求的类型, 处理函数<br><br>    二、定义路由方法<br>      app.Method(URL, handler)<br><br>    三、路由的匹配规则<br>    多个路由模块按照路由注册的顺序来进行一一匹配<br></code></pre></td></tr></table></figure><h3 id="2-路由的使用"><a href="#2-路由的使用" class="headerlink" title="2. 路由的使用"></a>2. 路由的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1.引入包</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 4.向服务器挂在多个路由</span><br>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;haha&quot;</span>);<br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;);<br>app.post(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;world&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开启服务：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="三、创建并使用路由模块"><a href="#三、创建并使用路由模块" class="headerlink" title="三、创建并使用路由模块"></a>三、创建并使用路由模块</h2><h3 id="1-模块化路由"><a href="#1-模块化路由" class="headerlink" title="1. 模块化路由"></a>1. 模块化路由</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块。<br>将路由抽离为单独模块的步骤如下：<br>(1) 创建路由模块对应的 .js 文件<br>(2) 调用 express.Router() 函数创建路由对象<br>(3) 向路由对象上挂载具体的路由<br>(4) 使用 module.exports 向外共享路由对象<br>(5) 使用 app.use() 函数注册路由模块<br></code></pre></td></tr></table></figure><h3 id="2-创建路由模块"><a href="#2-创建路由模块" class="headerlink" title="2. 创建路由模块"></a>2. 创建路由模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 生成一个路由实例对象</span><br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 向路由对象上挂在多个路由</span><br>router.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;haha&quot;</span>);<br>&#125;);<br><br>router.get(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;);<br>router.post(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;world&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 向外暴露出路由对象</span><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><h3 id="3-使用路由模块"><a href="#3-使用路由模块" class="headerlink" title="3. 使用路由模块"></a>3. 使用路由模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1.引入包</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//  引入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./10-创建路由模块&quot;</span>);<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//  使用路由模块,把路由挂在到app服务实例上</span><br><span class="hljs-comment">//  这里也可以添加第一个参数 表示请求路由url的公共前缀</span><br>app.use(<span class="hljs-string">&quot;/my&quot;</span>, router);<br><br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开启服务：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="四、中间件"><a href="#四、中间件" class="headerlink" title="四、中间件"></a>四、中间件</h2><h3 id="1-中间件的概念"><a href="#1-中间件的概念" class="headerlink" title="1. 中间件的概念"></a>1. 中间件的概念</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、什么是中间件 (middleware)<br>      泛指业务流程的中间处理环节, Express 的中间件即是指响应数据的中间环节, 本质上就是一个<br>    处理函数<br><br>二、中间件的参数列表<br>      包含 req 请求对象, res 响应对象 和 next 回调函数, 注意路由处理函数中没有 next 参数<br><br>三、next 参数的作用<br>      用来实现多个中间件连续调用的关键, 一个中间件函数内必须调用 next() 将控制权传递给下一个中间件功能,<br>    否则该请求将被挂起<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  req.name = <span class="hljs-string">&quot;小王&quot;</span>;<br>  next(); <span class="hljs-comment">//别忘了调用next()</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-中间件的范围"><a href="#2-中间件的范围" class="headerlink" title="2. 中间件的范围"></a>2. 中间件的范围</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、中间件根据作用范围分为两类<br>     全局中间件: 任何请求到达服务器之后都会触发的中间件<br>     局部中间件: 只有匹配当前路由的请求到达服务器才会触发的中间件<br><br>二、中间件使用的注意事项<br>     1. 全局中间件的注册要放在路由定义之前<br>     2. 对于一个客户端的发送过来的请求, 可以调用多个中间件进行处理<br>     3. 中间件的处理函数中一定要有 next() 调用<br>     4. next 函数之后不用再写和业务无关的代码<br>     5. 多个中间件之间共享 req 和 res 对象<br></code></pre></td></tr></table></figure><h4 id="2-1-定义中间件"><a href="#2-1-定义中间件" class="headerlink" title="2.1 定义中间件"></a>2.1 定义中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 定义一个中间件   middleware 简写成mw    本质是一个函数 但是比路由多一个next参数</span><br><span class="hljs-comment">// const mw = (req, res, next) =&gt; &#123;</span><br><span class="hljs-comment">//     console.log(&#x27;正在处理请求&#x27;);</span><br><span class="hljs-comment">//     // 调用next() 表示当前中间件处理完成，移交给下一个中间件或者路由处理</span><br><span class="hljs-comment">//     // 注意：  不管有没有下一个 中间件里必须要在最后调用next()</span><br><span class="hljs-comment">//     next()</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">// app.use(中间件函数)  表示注册一个全局中间件(客户端发起的任意请求，都会经过这个中间件来处理)</span><br><span class="hljs-comment">// 注意1： 任意请求都会经过这个中间件 即使不是下面设置的路由get /api和post /api</span><br><span class="hljs-comment">// 注意2： 如果在中间件里没有调用next() 即使是下面设置的路由get /api和post /api  也只会打印出&#x27;正在处理请求&#x27;  不会移交给下一个中间件或者路由处理</span><br><span class="hljs-comment">// app.use(mw);</span><br><br><span class="hljs-comment">// 简化写法</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 多个中间件之前共享同一份req和res</span><br>  <span class="hljs-comment">// 在全局中间件中为req或者res添加属性，后面所有的路由或中间件都可以访问到</span><br>  req.name = <span class="hljs-string">&quot;小王&quot;</span>;<br>  res.age = <span class="hljs-number">15</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理请求&quot;</span>);<br>  next();<br>&#125;);<br><br><span class="hljs-comment">// 注册第二个中间件  注意：中间件的执行顺序和注册顺序保持一致</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理请求2&quot;</span>);<br>  next(); <span class="hljs-comment">//别忘了调用next  否则不能移交给下面的中间件或者路由</span><br>&#125;);<br><br>app.get(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 可以访问全局中间件中为req或res添加的属性</span><br>  <span class="hljs-built_in">console</span>.log(req.name, res.age);<br>  res.send(<span class="hljs-string">`哈哈！傻逼<span class="hljs-subst">$&#123;req.name&#125;</span>`</span>); <span class="hljs-comment">//哈哈！傻逼小王</span><br>&#125;);<br><br>app.post(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(req.name, res.age);<br>  res.send(<span class="hljs-string">&quot;world&quot;</span>);<br>&#125;);<br><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务开启：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-2-局部中间件"><a href="#2-2-局部中间件" class="headerlink" title="2.2 局部中间件"></a>2.2 局部中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1.引入包</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 定义局部中间件</span><br><span class="hljs-keyword">const</span> mw1 = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理请求&quot;</span>);<br>  next();<br>&#125;;<br><br><span class="hljs-comment">// 注册局部中间件(只对匹配当前路由的请求生效)，放在注册路由的第二个参数位置</span><br>app.get(<span class="hljs-string">&quot;/api&quot;</span>, mw1, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>&#125;);<br><span class="hljs-comment">// 没有注册中间件，不会打印出&#x27;正在处理请求&#x27;</span><br>app.post(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开启服务：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>2.2 多个局部生效的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1.引入包</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">// 定义局部中间件</span><br><span class="hljs-keyword">const</span> mw1 = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理请求&quot;</span>);<br>  next();<br>&#125;;<br><span class="hljs-keyword">const</span> mw2 = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理请求2&quot;</span>);<br>  next();<br>&#125;;<br><span class="hljs-keyword">const</span> mw3 = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理请求3&quot;</span>);<br>  next();<br>&#125;;<br><br><span class="hljs-comment">// 注册局部中间件(只对匹配当前路由的请求生效)，放在注册路由的第二个参数位置</span><br><span class="hljs-comment">// 注意：多个局部中间件使用逗号隔开mw1,mw2,mw3,...  或者使用数组括起来[mw1,mw2,mw3,...]</span><br>app.get(<span class="hljs-string">&quot;/api&quot;</span>, [mw1, mw2, mw3], <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>&#125;);<br><span class="hljs-comment">// 没有注册中间件，不会打印出&#x27;正在处理请求&#x27;</span><br>app.post(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开启服务：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-中间件的分类"><a href="#3-中间件的分类" class="headerlink" title="3. 中间件的分类"></a>3. 中间件的分类</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、中间件根据使用方式的不同分为以下几类:<br>1. 应用层中间件<br>2. 路由级中间件<br>3. 错误处理中间件 (err,req,res,next)=&gt;&#123;&#125;<br>4. 内置中间件<br>5. 第三方中间件<br><br>二、内置中间件<br>  express.static() 快速托管静态资源的中间件<br>  express.json()   解析post请求 json 格式的请求体数据<br>  express.urlencoded(&#123;extended:false&#125;) 解析post请求 urlencoded 编码形式的请求体数据<br><br>三、第三方的中间件<br>  非 Express 内置给我们的, 而是由第三方个人或公司开发的中间件, 我们可以先下载再配置来进行使用<br>  示例: 使用 body-parse 这个中间件来解析请求体的数据<br>  1. 运行命令下载 `npm i body-parse`<br>  2. 使用 require() 方法引入<br>  3. 使用 app.use() 方法注册<br></code></pre></td></tr></table></figure><h4 id="3-1-错误处理中间件"><a href="#3-1-错误处理中间件" class="headerlink" title="3.1 错误处理中间件"></a>3.1 错误处理中间件</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">错误级别中间件的作用：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。<br><br>格式：错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是 (err, req, res, next)。<br><br>注意：错误级别的中间件，必须注册在所有路由之后！<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><br><span class="hljs-comment">//这里把错误写到中间件里 也可以写到get之类的路由中</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在处理&quot;</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;发生了未知错误&quot;</span>); <span class="hljs-comment">// 抛出一个错误</span><br><br>  next();<br>&#125;);<br><br><span class="hljs-comment">//....省略其中的路由</span><br><br><span class="hljs-comment">// 在最末尾(所有路由和中间件之后)注册错误处理中间件</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-comment">// 如果有错误，给客户端响应错误信息</span><br>    res.send(&#123; <span class="hljs-attr">stats</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">message</span>: err.message &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-2-内置中间件"><a href="#3-2-内置中间件" class="headerlink" title="3.2 内置中间件"></a>3.2 内置中间件</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：<br>(1) express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）<br>(2) express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）<br>(3) express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><br><span class="hljs-comment">// 处理post 表单提交的json格式的数据</span><br>app.use(express.json());<br><span class="hljs-comment">// 处理post表单提交的urlencoded格式的数据 传一个固定的参数&#123;extended:false&#125;</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br><br>app.post(<span class="hljs-string">&quot;/json&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取请求体中的数据 req.body    得到的结果是一个对象</span><br>  <span class="hljs-built_in">console</span>.log(req.body);<br>  <span class="hljs-comment">// 把请求体返回给客户端</span><br>  res.send(req.body);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-3-第三方中间件"><a href="#3-3-第三方中间件" class="headerlink" title="3.3 第三方中间件"></a>3.3 第三方中间件</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">非 Express 官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以按需下载并配置<br>第三方中间件，从而提高项目的开发效率。<br>例如：在 express@4.16.0 之前的版本中，经常使用 body-parser 这个第三方中间件，来解析请求体数据。使用步<br>骤如下：<br>(1) 运行 npm install body-parser 安装中间件<br>(2) 使用 require 导入中间件<br>(3) 调用 app.use() 注册并使用中间件<br>注意：Express 内置的 express.urlencoded 中间件，就是基于 body-parser 这个第三方中间件进一步封装出来的。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><br><span class="hljs-comment">// 引入第三方的body-parser包</span><br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<br><br><span class="hljs-comment">// 把.json前面的express改为bodyParser</span><br>app.use(bodyParser.json());<br><span class="hljs-comment">// 把.urlencoded前面的express改为bodyParser</span><br>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br></code></pre></td></tr></table></figure><h4 id="3-4-自定义中间件"><a href="#3-4-自定义中间件" class="headerlink" title="3.4 自定义中间件"></a>3.4 自定义中间件</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">自己手动模拟一个类似于 express.urlencoded 这样的中间件，来解析 POST 提交到服务器的表单数据。<br>实现步骤：<br>① 定义中间件<br>(1) 监听 req 的 data 事件<br>(2) 监听 req 的 end 事件<br>(3) 使用 querystring 模块解析请求体数据<br>(4) 将解析出来的数据对象挂载为 req.body<br>(5) 将自定义中间件封装为模块<br></code></pre></td></tr></table></figure><ul><li>自定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 了解</span><br><span class="hljs-comment">// 自定义中间件处理post表单提交的urlencoded格式的数据</span><br><br><span class="hljs-comment">// 引入内置的querystring模块  具体见文档</span><br><span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;querystring&quot;</span>);<br><span class="hljs-comment">// 它里面有两个方法 qs.stringify()把对象转成查询字符串</span><br><span class="hljs-comment">//                  qs.parse() 把查询字符串转成对象</span><br><br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 定义要拼接的数据</span><br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-comment">// 1. 监听req的data事件(post 表单提交的数据量很大， 分批发送到服务器)</span><br>  req.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// chunk 每次发送到服务器的数据片段</span><br>    <span class="hljs-comment">// console.log(chunk);</span><br>    <span class="hljs-comment">// 拼接chunk数据</span><br>    str += chunk;<br>  &#125;);<br><br>  <span class="hljs-comment">// 2.监听req的end事件(服务器已经接收到客户端发送的完整数据)</span><br>  req.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// console.log(str); //获取请求体的数据 默认是键值对字符串：name=xw&amp;age=555</span><br>    <span class="hljs-comment">// 把转化后的参数对象挂载到req.body上，共享给后面的中间件或路由使用</span><br>    req.body = qs.parse(str);<br>    <span class="hljs-comment">// console.log(req.body);</span><br>    <span class="hljs-comment">// 调用next()</span><br>    next();<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// 暴露中间件</span><br><span class="hljs-built_in">module</span>.exports = bodyParser; <span class="hljs-comment">//函数属于对象 所以这里可以用=</span><br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入包</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-comment">//引入自己自定义的中间件</span><br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./18-自定义中间件&quot;</span>);<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">// 全局注册自定义中间件</span><br>app.use(bodyParser);<br><br>app.post(<span class="hljs-string">&quot;/json&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取请求体中的数据 req.body  得到的结果是一个对象</span><br>  <span class="hljs-built_in">console</span>.log(req.body);<br>  <span class="hljs-comment">// 把请求体返回给客户端</span><br>  res.send(req.body);<br>&#125;);<br><br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开启服务：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="五、使用-Express-写接口"><a href="#五、使用-Express-写接口" class="headerlink" title="五、使用 Express 写接口"></a>五、使用 Express 写接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> router = express.Router();<br><br><span class="hljs-comment">// 1.编写一个get接口，返回的数据格式同大事件接口</span><br>router.get(<span class="hljs-string">&quot;/get&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取请求的参数对象： req.query()获取查询参数     req.params()获取url动态参数  /gei/:id</span><br>  <span class="hljs-keyword">const</span> data = req.query;<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;获取数据成功！&quot;</span>,<br>    data, <span class="hljs-comment">//这里属性名和属性值一样  简写</span><br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// 2.编写一个post接口，返回的数据格式同大事件接口</span><br>router.post(<span class="hljs-string">&quot;/post&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取请求的参数对象 req.body</span><br>  <span class="hljs-comment">// 这里要在所有路由之前配置内置中间件 才能获得req.body</span><br>  <span class="hljs-keyword">const</span> data = req.body;<br>  <span class="hljs-built_in">console</span>.log(data);<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;数据提交成功！&quot;</span>,<br>    data,<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// 3.编写一个delete接口</span><br>router.delete(<span class="hljs-string">&quot;/delete&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;删除数据成功！&quot;</span>,<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// 暴露出去</span><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">// 引入自定义的路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./19-apiRouter&quot;</span>);<br><br><span class="hljs-comment">//4. 配置jsonp接口</span><br>app.get(<span class="hljs-string">&quot;/api/jsonp&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 处理jsonp请求</span><br>  <span class="hljs-built_in">console</span>.log(req.query.callback); <span class="hljs-comment">//客户端发送的回调函数</span><br>  <span class="hljs-comment">//响应函数的调用</span><br>  res.send(<span class="hljs-string">`</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;req.query.callback&#125;</span>(&#123;name:&#x27;xm&#x27;,age:20&#125;)</span><br><span class="hljs-string">    `</span>);<br>&#125;);<br><br><span class="hljs-comment">// 在路由之前配置cors中间件 解决跨域问题</span><br>app.use(cors()); <span class="hljs-comment">//!!!!!!!!和express.json()一样 这是个方法别忘了加()</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br><span class="hljs-comment">// 注册路由  use里面的第一个参数可以设置一个公共前缀</span><br>app.use(<span class="hljs-string">&quot;/api&quot;</span>, router);<br><br><span class="hljs-comment">//这里要在所有路由之前配置内置中间件 才能获得req.body</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">      express.static() 快速托管静态资源的中间件</span><br><span class="hljs-comment">      express.json()   解析post请求 json 格式的请求体数据</span><br><span class="hljs-comment">      express.urlencoded(&#123;extended:false&#125;) 解析post请求 urlencoded 编码形式的请求体数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// app.use(express.json())</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">处理404 接口不存在或者页面找不到</span><br><span class="hljs-comment">app.use((req, res, next) =&gt; &#123;</span><br><span class="hljs-comment">    res.send(&#x27;404 页面找不到&#x27;);</span><br><span class="hljs-comment">    next()</span><br><span class="hljs-comment">&#125;)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 3.在最末尾配置一个错误中间件</span><br><span class="hljs-comment">// app.use((err, req, res, next) =&gt; &#123;</span><br><span class="hljs-comment">//     if (err) &#123;</span><br><span class="hljs-comment">//         res.send(&#123;</span><br><span class="hljs-comment">//             status: 1,</span><br><span class="hljs-comment">//             message: err.message</span><br><span class="hljs-comment">//         &#125;)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;)</span><br><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开启服务：http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>DELETE<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>JSONP<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  $(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 发送get请求</span></span><br>    axios<br><span class="javascript">      .get(<span class="hljs-string">&quot;http://localhost:3006/api/get&quot;</span>, &#123;</span><br>        params: &#123;<br><span class="javascript">          name: <span class="hljs-string">&quot;小明&quot;</span>,</span><br>          age: 20,<br><span class="javascript">          sex: <span class="hljs-string">&quot;男&quot;</span>,</span><br>        &#125;,<br>      &#125;)<br><span class="javascript">      .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(res.data);</span><br>      &#125;);<br>  &#125;);<br><br><span class="javascript">  $(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 发送post请求</span></span><br><span class="javascript">    <span class="hljs-comment">// 发送post请求时 发送的数据格式需要做处理 查看axios文档</span></span><br><span class="javascript">    <span class="hljs-comment">//回顾一下:在大事件项目中 我们是用this.serialize()来做发送请求的data,this.serialize()获取表单的内容自动转成键值对字符串的形式 所以可以直接用</span></span><br><span class="javascript">    <span class="hljs-comment">// qs.stringify():把对象转化成查询参数的字符串   但是这里在html中不能引入qs这个模块 所以可以用npm i qs 先下载这个包，再用script引入里面的js文件</span></span><br><span class="javascript">    <span class="hljs-comment">//引入这个qs.js文件后 可以用里面封装好的Qs.stringify()方法 把传进去的对象 自动转为urlencoded格式(键值对字符串)</span></span><br>    axios<br>      .post(<br><span class="javascript">        <span class="hljs-string">&quot;http://localhost:3006/api/post&quot;</span>,</span><br>        Qs.stringify(&#123;<br><span class="javascript">          name: <span class="hljs-string">&quot;xw&quot;</span>,</span><br>          age: 12,<br>        &#125;)<br>      )<br><span class="javascript">      .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(res.data);</span><br>      &#125;);<br>  &#125;);<br><br><span class="javascript">  $(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 发送delete请求  传的参数和get一样 这里先不传了</span></span><br><span class="javascript">    axios.delete(<span class="hljs-string">&quot;http://localhost:3006/api/delete&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(res.data);</span><br>    &#125;);<br>  &#125;);<br><br><span class="javascript">  $(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 发送jsonp请求    注意： axios不支持jsonp请求</span></span><br><span class="javascript">    $.ajax(&#123;</span><br><span class="javascript">      url: <span class="hljs-string">&quot;http://localhost:3006/api/jsonp&quot;</span>,</span><br><span class="javascript">      method: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="javascript">      dataType: <span class="hljs-string">&quot;jsonp&quot;</span>,</span><br><span class="javascript">      success: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(res);</span><br>      &#125;,<br>    &#125;);<br>  &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、cors-概念了解"><a href="#六、cors-概念了解" class="headerlink" title="六、cors 概念了解"></a>六、cors 概念了解</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs txt">面试可能会问<br><br>  一 什么是 CORS<br>    (Cross-Origin Resource Sharing) 跨域资源共享, 由一系列的 HTTP 响应头组成, 这些响应头决定了<br>  浏览器是否阻止前端 js 代码发出跨域请求<br><br>  二 CORS 的响应头部<br>    (1) Access-Control-Allow-Origin: url/*      指定了允许访问该资源的url  http://www.baidu.com/*<br>    (2) Access-Control-Allow-Headers: a, b, c   指定了允许发送哪些请求头<br>    (3) Access-Control-Allow-Methods: GET, POST 指定了允许发送何种类型的请求<br><br>  三 cors 请求的分类<br>    简单请求: 请求方式为 GET/POST/HEAD 之一; 无自定义请求头字段<br>    预检请求: 请求方式不为 GET/POST/HEAD 之一; 存在自定义请求头字段; 发送了 application/json 格式数据<br><br>    浏览器会先发送一个 OPTIONS 请求进行预检, 以确认服务器是否允许该实际请求, 完成后再发送真正的请求<br></code></pre></td></tr></table></figure><h2 id="七、JSONP-接口"><a href="#七、JSONP-接口" class="headerlink" title="七、JSONP 接口"></a>七、JSONP 接口</h2><h3 id="1-回顾-JSONP-的概念与特点"><a href="#1-回顾-JSONP-的概念与特点" class="headerlink" title="1. 回顾 JSONP 的概念与特点"></a>1. 回顾 JSONP 的概念与特点</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">概念：浏览器端通过 &lt;script&gt; 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据<br>的方式叫做 JSONP。<br>特点：<br>(1) JSONP 不属于真正的 Ajax 请求，因为它没有使用 XMLHttpRequest 这个对象。<br>(2) JSONP 仅支持 GET 请求，不支持 POST、PUT、DELETE 等请求。<br></code></pre></td></tr></table></figure><h3 id="2-实现-JSONP-接口的步骤"><a href="#2-实现-JSONP-接口的步骤" class="headerlink" title="2. 实现 JSONP 接口的步骤"></a>2. 实现 JSONP 接口的步骤</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">(1) 获取客户端发送过来的回调函数的名字<br>(2) 得到要通过 JSONP 形式发送给客户端的数据<br>(3) 根据前两步得到的数据，拼接出一个函数调用的字符串<br>(4) 把上一步拼接得到的字符串，响应给客户端的 &lt;script&gt; 标签进行解析执行<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//省略老三步</span><br><br><span class="hljs-comment">// 在路由之前配置cors中间件 解决跨域问题</span><br>app.use(cors()); <span class="hljs-comment">//!!!!!!!!和express.json()一样 这是个方法别忘了加()</span><br><span class="hljs-comment">// 配置jsonp接口</span><br>app.get(<span class="hljs-string">&quot;/api/jsonp&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 处理jsonp请求</span><br>  <span class="hljs-built_in">console</span>.log(req.query.callback); <span class="hljs-comment">//客户端发送的回调函数</span><br>  <span class="hljs-comment">//响应函数的调用</span><br>  res.send(<span class="hljs-string">`</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;req.query.callback&#125;</span>(&#123;name:&#x27;xm&#x27;,age:20&#125;)</span><br><span class="hljs-string">    `</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-在网页中使用-jQuery-发起-JSONP-请求"><a href="#3-在网页中使用-jQuery-发起-JSONP-请求" class="headerlink" title="3. 在网页中使用 jQuery 发起 JSONP 请求"></a>3. 在网页中使用 jQuery 发起 JSONP 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发送jsonp请求    注意： axios不支持jsonp请求</span><br>  $.ajax(&#123;<br>    url: <span class="hljs-string">&quot;http://localhost:3006/api/jsonp&quot;</span>,<br>    method: <span class="hljs-string">&quot;get&quot;</span>,<br>    dataType: <span class="hljs-string">&quot;jsonp&quot;</span>, <span class="hljs-comment">//表示要发起jsonp请求</span><br>    success: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res);<br>    &#125;,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL部分命令</title>
    <link href="/2021/02/25/Node.js/SQL%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/25/Node.js/SQL%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-部分命令"><a href="#SQL-部分命令" class="headerlink" title="SQL 部分命令"></a>SQL 部分命令</h1><h2 id="一、基础语句-增删改查"><a href="#一、基础语句-增删改查" class="headerlink" title="一、基础语句 增删改查"></a>一、基础语句 增删改查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">查询数据 <span class="hljs-keyword">select</span><br><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称   列名称为<span class="hljs-operator">*</span>表示所有<br><span class="hljs-comment">-- 通过* 从users表中查询所有列的数据</span><br><span class="hljs-comment">-- select * from users;</span><br><span class="hljs-comment">-- 从users 表中查询指定的 username和password 列的数据</span><br><span class="hljs-comment">-- select username,password from users;</span><br>插入数据 <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名称(列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...)<br><span class="hljs-comment">-- 向users表中插入一条数据 username是tom password是admin123</span><br><span class="hljs-comment">-- insert into users (username,password) values(&#x27;tom&#x27;,&#x27;admin123&#x27;);</span><br>更新数据 <span class="hljs-keyword">update</span><br><span class="hljs-keyword">UPDATE</span> 表名称 <span class="hljs-keyword">SET</span> 列<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 列名称<span class="hljs-operator">=</span>值<br><span class="hljs-comment">-- 修改 username 为张三 的这条数据的密码， 修改为 abcdef</span><br><span class="hljs-comment">-- update users set password=&#x27;abcdef&#x27; where username = &#x27;张三&#x27;;</span><br><span class="hljs-comment">-- status的值是布尔值 所以不用加引号  varchar字符类型 要加&#x27;&#x27;</span><br><span class="hljs-comment">-- update users set password=&#x27;hahaha&#x27;,status=1 where username = &#x27;李四&#x27;;</span><br>删除数据 <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称<span class="hljs-operator">=</span>值<br><span class="hljs-comment">-- 删除id为3的用户</span><br><span class="hljs-comment">-- delete from users where id=3;</span><br><br></code></pre></td></tr></table></figure><h2 id="二、where-子句"><a href="#二、where-子句" class="headerlink" title="二、where 子句"></a>二、where 子句</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">WHERE 子句的作用<br>      如果需要有条件的从表中选取数据, 可以使用 WHERE 子句添加到 SQL 语句的末尾<br>    例如:<br>      `SELECT * FROM 表名称 WHERE 列名称 运算符 值`<br><br>    二、常见的运算符<br>      (1) &gt; 和 &gt;=<br>      (2) &lt; 和 &lt;=<br>      (3) != 或 &lt;&gt;   &lt;&gt;不方便记忆 我们用老的 != 就行<br>      (4) =<br>      (5) BETWEEN   between 2 and 8   2到8  包括2 8<br>      (6) LIKE   like &#x27;%123%&#x27;   只要包含123<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--id大于3</span><br><span class="hljs-comment">-- select * from users where id&gt;3;</span><br><span class="hljs-comment">--id不等于2</span><br><span class="hljs-comment">-- select * from users where id !=2;</span><br><span class="hljs-comment">--password中包含34的数据</span><br><span class="hljs-comment">-- select * from users where password like&#x27;%34%&#x27;;</span><br><span class="hljs-comment">--id 2到5的数据</span><br><span class="hljs-comment">-- select * from users where id between 2 and 5;</span><br></code></pre></td></tr></table></figure><h2 id="三、and-和-or-运算符"><a href="#三、and-和-or-运算符" class="headerlink" title="三、and 和 or 运算符"></a>三、and 和 or 运算符</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、AND 和 OR 运算符<br>   可以在 WHERE 子句中把多个条件结合起来, AND 表示并且, OR 表示或者的意思<br><br>   补充： and和or可以写多个 如 条件1 and 条件2 and 条件3.....<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中status=1 且id&gt;=4的用户  虽然没有符合的数据 但是这条指令是正确的 并不会报错</span><br><span class="hljs-comment">-- select * from users where status=1 and id&gt;=4;</span><br><span class="hljs-comment">-- 查询表中status=1 或 id&gt;=4的用户</span><br><span class="hljs-comment">-- select * from users where status=1 or id&gt;=4;</span><br></code></pre></td></tr></table></figure><h2 id="四、order-by-子句"><a href="#四、order-by-子句" class="headerlink" title="四、order by 子句"></a>四、order by 子句</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、使用 ORDER BY 子句对结果进行排序<br>  默认的排序方式为升序 ASC 如果使用降序可以添加 DESC 关键字<br>  order by ... asc      order by ... desc   这里为了方便交互 最好升序的时候也写上asc<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中所有用户 根据status升序来排列</span><br><span class="hljs-comment">-- select * from users order by status asc</span><br><span class="hljs-comment">-- 查询表中所有用户 根据id 降序来排列</span><br><span class="hljs-comment">-- select * from users order by id desc</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">二、多重排序规则  用,号隔开<br>   `SELECT 列名称 FROM 表名称 ORDER BY 列名称 [排序规则],  列名称 [排序规则]`<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中所有用户 先根据status 降序排列,再根据id进行升序排列</span><br><span class="hljs-comment">-- select * from users order by status desc,id asc</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">三、注意<br>  同时使用 ORDER BY 和 WHERE子句时, 应该让 ORDER BY 位于 WHERE 之后, 否则将会产生错误(先用where选取数据后 再用order by来进行排列)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中id&gt;3的用户并且根据id 降序来排列</span><br><span class="hljs-comment">-- select * from users where id&gt;3 order by id desc</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js部分npm命令</title>
    <link href="/2021/02/21/Node.js/Node.js%20%E9%83%A8%E5%88%86npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/21/Node.js/Node.js%20%E9%83%A8%E5%88%86npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-部分npm命令"><a href="#Node-js-部分npm命令" class="headerlink" title="Node.js 部分npm命令"></a>Node.js 部分npm命令</h1><h2 id="部分基础命令"><a href="#部分基础命令" class="headerlink" title="部分基础命令"></a>部分基础命令</h2><table><thead><tr><th>code ~/.npmrc</th><th>配置文档  在里面加 loglevel=http 能看到下载的信息</th></tr></thead><tbody><tr><td>npm i或install 完整的包名称</td><td>下载包(<strong>核心依赖包</strong>)</td></tr><tr><td>npm i 包1 包2 包3</td><td>一次性下载多个包</td></tr><tr><td>npm view 包名</td><td>查看包</td></tr><tr><td>npm i</td><td>一次性安装所有的依赖包</td></tr><tr><td>npm uninstall 包名</td><td>卸载包 （没有简写）</td></tr><tr><td>npm i –save-dev 包名 或者 npm i -D 包名</td><td>下载包(<strong>开发依赖包</strong>)</td></tr><tr><td>npm i -g  包名</td><td>下载全局包   （被下载到 node 安装位置 node_modules 目录下的包，可以在全局范围(任意目录)内使用）</td></tr><tr><td>npm uninstall -g 包名称</td><td>卸载全局包</td></tr><tr><td>npm init -y</td><td>创建package.json文件</td></tr></tbody></table><h2 id="部分功能命令"><a href="#部分功能命令" class="headerlink" title="部分功能命令"></a>部分功能命令</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">1. 默认源在国外 下载比较慢 使用 nrm 切换成国内源：<br>   在任意目录下依次执行：`npm i -g nrm` ==&gt; `nrm ls` ==&gt;`nrm use taobao`<br>     <br>2. 把md文件转成html页面 首先npm i i5ting_toc -g下载这个全局包<br>   在使用命令 i5ting_toc -f md文件名 -o<br>3. npm发布包的流程：<br>   (1) 执行 npm login  按提示输入账号 密码 邮箱 进行登录<br>   (2)在要发布的包的目录下 一定是发布的目录下 执行 npm publish 上传包<br>   (3) 删除已发布的包 使用 npm unpublish 包名称 --force 命令<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js的模块加载机制</title>
    <link href="/2021/02/21/Node.js/Node.js%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/21/Node.js/Node.js%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js的模块加载机制"><a href="#Node-js的模块加载机制" class="headerlink" title="Node.js的模块加载机制"></a>Node.js的模块加载机制</h1><h3 id="1-模块的缓存机制"><a href="#1-模块的缓存机制" class="headerlink" title="1. 模块的缓存机制"></a>1. 模块的缓存机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、模块优先从缓存中进行加载 <br>     模块在第一次加载后会被缓存, 如果每次调用 require(&#x27;foo&#x27;) 都解析到同一文件，则返回相同的对象,<br>   不会导致模块的代码被执行多次<br><br>二、缓存的作用<br>     不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的<br>   加载效率 <br></code></pre></td></tr></table></figure><h3 id="2-内置模块的加载机制"><a href="#2-内置模块的加载机制" class="headerlink" title="2. 内置模块的加载机制"></a>2. 内置模块的加载机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、核心模块的加载机制 <br>     require() 总是会优先加载核心模块, 比如 require(&#x27;http&#x27;) 始终返回内置的 HTTP 模块，即使有同名文件<br>     如果下载的第三方包是与内置模块同名的包 如http包 那么require(&#x27;http&#x27;) 始终返回内置的 HTTP 模块<br></code></pre></td></tr></table></figure><h3 id="3-自定义模块的加载机制"><a href="#3-自定义模块的加载机制" class="headerlink" title="3. 自定义模块的加载机制"></a>3. 自定义模块的加载机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、自定义模块的加载机制 <br>      使用 require() 方法去加载自定义模块，必须指定 &#x27;/&#x27;、 &#x27;./&#x27; 或 &#x27;../&#x27; 开头的路径，如果没有这个<br>    路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块<br><br>二、自定义文件模块<br>      如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载<br><br>三、自定义目录模块<br>      当传递一个目录标识符给 require () 方法时, 加载的顺序如下:<br>      1. 在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口<br>      2. 上述找不到,  Node.js 将会试图加载目录下的 index.js 或 index.node 文件<br></code></pre></td></tr></table></figure><h3 id="4-第三方模块的加载机制"><a href="#4-第三方模块的加载机制" class="headerlink" title="4. 第三方模块的加载机制"></a>4. 第三方模块的加载机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、第三方模块的加载机制 <br>     如果传递给 require() 的模块标识符不是一个核心模块，也没有以 &#x27;/&#x27; 、 &#x27;../&#x27; 或 &#x27;./&#x27; 开头，<br>   那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，<br>   则移动到再上一层父目录，直到文件系统的根目录。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js第一天</title>
    <link href="/2021/02/21/Node.js/Node.js%E7%AC%AC01%E5%A4%A9/"/>
    <url>/2021/02/21/Node.js/Node.js%E7%AC%AC01%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js第一天"><a href="#Node-js第一天" class="headerlink" title="Node.js第一天"></a>Node.js第一天</h1><h2 id="一、初识node-js"><a href="#一、初识node-js" class="headerlink" title="一、初识node.js"></a>一、初识node.js</h2><h3 id="1-什么是node-js"><a href="#1-什么是node-js" class="headerlink" title="1.什么是node.js"></a>1.什么是node.js</h3><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. </p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p><h3 id="2-node-js的学习途径"><a href="#2-node-js的学习途径" class="headerlink" title="2.node.js的学习途径"></a>2.node.js的学习途径</h3><p>JavaScript 基础语法 + Node.js 内置 API 模块（fs、path、http等）+ 第三方 API 模块（express、mysql 等）</p><h3 id="3-安装node-js"><a href="#3-安装node-js" class="headerlink" title="3.安装node.js"></a>3.安装node.js</h3><p>略过</p><h3 id="4-在-Node-js-环境中执行-JavaScript-代码"><a href="#4-在-Node-js-环境中执行-JavaScript-代码" class="headerlink" title="4.在 Node.js 环境中执行 JavaScript 代码"></a>4.在 Node.js 环境中执行 JavaScript 代码</h3><p>打开终端  输入 <code>node</code> 要执行的js文件的路径</p><p> 终端中的快捷键:</p><ul><li>使用 ↑ 键，可以快速定位到上一次执行的命令</li><li>使用 tab 键，能够快速补全路径</li><li>使用 esc 键，能够快速清空当前已输入的命令</li><li>输入 cls 命令，可以清空终端</li></ul><h2 id="二、fs文件系统模块"><a href="#二、fs文件系统模块" class="headerlink" title="二、fs文件系统模块"></a>二、fs文件系统模块</h2><p><strong>fs 模块</strong>是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</p><h3 id="1-fs-readFile-方法，用来读取指定文件中的内容"><a href="#1-fs-readFile-方法，用来读取指定文件中的内容" class="headerlink" title="1.fs.readFile() 方法，用来读取指定文件中的内容"></a>1.fs.readFile() 方法，用来读取指定文件中的内容</h3><h4 id="1-1-语法格式"><a href="#1-1-语法格式" class="headerlink" title="1.1 语法格式"></a>1.1 语法格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入模块： require(&#x27;模块名&#x27;)</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 2.调用方法来读取文件 readFile(路径,编码,回调函数)</span><br>fs.readFile(<span class="hljs-string">&#x27;./hello.js&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123; <span class="hljs-comment">//node.js的回调函数参数中，永远是错误err优先</span><br>     <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-comment">// 读取失败的话 err必然是对象 所以为true 成功的话为null 为false</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取文件失败，原因是：<span class="hljs-subst">$&#123;err.message&#125;</span>`</span>) <span class="hljs-comment">//提示错误信息</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取文件成功：<span class="hljs-subst">$&#123;res&#125;</span>`</span>);<span class="hljs-comment">// res就是我们读取的文件内容</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-fs-writeFile-方法，用来向指定的文件中写入内容"><a href="#2-fs-writeFile-方法，用来向指定的文件中写入内容" class="headerlink" title="2. fs.writeFile() 方法，用来向指定的文件中写入内容"></a>2. fs.writeFile() 方法，用来向指定的文件中写入内容</h3><h4 id="2-1-语法格式"><a href="#2-1-语法格式" class="headerlink" title="2.1 语法格式"></a>2.1 语法格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 2.调用方法向文件中写入内容 fs.writeFile(路径，写入的内容，回调)  </span><br><span class="hljs-comment">// 注意：(1) 如果没有这个文件的话  会直接新建一个文件</span><br><span class="hljs-comment">//  (2) 如果有这个文件的话  写入的内容会覆盖文件原本的内容</span><br>fs.writeFile(<span class="hljs-string">&#x27;./hello.js&#x27;</span>, <span class="hljs-string">&#x27;你也好哈哈&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 如果写入失败 err为错误对象</span><br>    <span class="hljs-comment">// 写入成功的话，err为null</span><br>    <span class="hljs-comment">// console.log(err);</span><br>    <span class="hljs-keyword">if</span> (err) &#123; <span class="hljs-comment">//失败的话err为对象 对象是true且这个对象里的message的值是错误信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`写入文件失败：<span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-comment">// 成功的话err为null null为false</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;写入文件成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-练习：整理成绩"><a href="#3-练习：整理成绩" class="headerlink" title="3. 练习：整理成绩"></a>3. 练习：整理成绩</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">把成绩.txt 文件中的内容  <br>小明=90 王五=91 张三=92 李四=93<br><br>格式化为 成绩-ok.txt 的样式 <br>小明:90<br>王五:91<br>张三:92<br>李四:93<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入fs 模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 2.先读取 成绩.txt中的内容</span><br>fs.readFile(<span class="hljs-string">&#x27;./成绩.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取文件失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>)<br>    &#125;<br>    <span class="hljs-comment">// console.log(res);</span><br>    <span class="hljs-comment">// 3.把文件的内容进行格式化处理</span><br>    <span class="hljs-comment">// 3.1使用split(&#x27;分隔符&#x27;) 把字符串分成四部分</span><br>    <span class="hljs-keyword">const</span> arr = res.split(<span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-comment">// console.log(arr);</span><br>    <span class="hljs-comment">//3.2用replace  把数组中的每个名字和分数之间的=号 替换成：号</span><br>    <span class="hljs-keyword">const</span> newArr = [];<br>    arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        newArr.push(item.replace(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))<br>    &#125;);<br>    <span class="hljs-comment">// 3.3用join(&#x27;连接符&#x27;)把数组转成字符串 这里的连接符用js里面的换行\n</span><br>    <span class="hljs-comment">// console.log(newArr.join(&#x27;\n&#x27;));</span><br>    <span class="hljs-comment">// 4.把处理过的文件内容写入 成绩-ok.txt</span><br>    fs.writeFile(<span class="hljs-string">&#x27;./成绩-ok.txt&#x27;</span>, newArr.join(<span class="hljs-string">&#x27;\n&#x27;</span>), <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`写入文件失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;写入文件成功&#x27;</span>);<br>    &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-练习：把a文件的内容复制到b文件"><a href="#4-练习：把a文件的内容复制到b文件" class="headerlink" title="4. 练习：把a文件的内容复制到b文件"></a>4. 练习：把a文件的内容复制到b文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 读取文件啊a</span><br>fs.readFile(<span class="hljs-string">&#x27;D:/dong/就业班/node.js/lesson001/练习/a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取文件失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-comment">// 读取成功后 把内容写入b文件</span><br>    fs.writeFile(<span class="hljs-string">&#x27;D:/dong/就业班/node.js/lesson001/练习/b.txt&#x27;</span>, res, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`文件写入失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件写入成功&#x27;</span>);<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-练习：把js文件中用来测试的log删掉"><a href="#5-练习：把js文件中用来测试的log删掉" class="headerlink" title="5. 练习：把js文件中用来测试的log删掉"></a>5. 练习：把js文件中用来测试的log删掉</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 读取原文件</span><br>fs.readFile(<span class="hljs-string">&#x27;./log.js&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`文件读取失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/console\.log\(.*\)/g</span>; <span class="hljs-comment">//特殊符号前面加\转义一下  这里的.和(  )</span><br>    <span class="hljs-keyword">var</span> str = res.replace(reg, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-comment">// 写入新文件</span><br>    fs.writeFile(<span class="hljs-string">&#x27;./newLog&#x27;</span>, str, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`写入失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;写入成功&#x27;</span>);<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="三、-path路径模块"><a href="#三、-path路径模块" class="headerlink" title="三、 path路径模块"></a>三、 path路径模块</h2><p><strong>path 模块</strong>是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理</p><h4 id="1-dirname-变量，返回当前文件所处的绝对路径"><a href="#1-dirname-变量，返回当前文件所处的绝对路径" class="headerlink" title="1. __dirname 变量，返回当前文件所处的绝对路径"></a>1. __dirname 变量，返回当前文件所处的绝对路径</h4><h4 id="2-path-join-方法，用来将多个路径片段拼接成一个完整的路径字符串"><a href="#2-path-join-方法，用来将多个路径片段拼接成一个完整的路径字符串" class="headerlink" title="2. path.join() 方法，用来将多个路径片段拼接成一个完整的路径字符串"></a>2. path.join() 方法，用来将多个路径片段拼接成一个完整的路径字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(__dirname);<br><span class="hljs-comment">// 每个js 文件都内置了一个 变量__dirname。他会返回当前文件所处的绝对路径</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> filePath = path.join(__dirname, <span class="hljs-string">&#x27;/hello.js&#x27;</span>);<br>fs.readFile(filePath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取失败：<span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取成功：<span class="hljs-subst">$&#123;res&#125;</span>`</span>);<br>&#125;)<br><br><span class="hljs-comment">// 注意：/ , ./ , 直接写文件名 这三种方式都是表示基于当前目录</span><br><span class="hljs-comment">//所以 path.join(&#x27;/a/b&#x27;,&#x27;./c&#x27;,&#x27;d&#x27;) 输出的是a/b/c/d</span><br></code></pre></td></tr></table></figure><h4 id="3-path-basename-方法，返回路径的最后一部分"><a href="#3-path-basename-方法，返回路径的最后一部分" class="headerlink" title="3. path.basename()方法，返回路径的最后一部分"></a>3. path.basename()方法，返回路径的最后一部分</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入path路径模块</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-comment">// 2. 调用方法 basename(&#x27;路径&#x27;,[文件拓展名])  </span><br><span class="hljs-comment">// 返回值：始终返回路径的最后一部分 如果添加了第二个参数，那么返回值会自动去掉拓展名只返回文件名</span><br><span class="hljs-keyword">const</span> name = path.basename(<span class="hljs-string">&#x27;c/b/d/haha.js&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>) <span class="hljs-comment">// 第二个参数的.不能省略</span><br><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">//haha</span><br><span class="hljs-built_in">console</span>.log(path.basename(__dirname)); <span class="hljs-comment">//js  返回当前目录名</span><br></code></pre></td></tr></table></figure><h4 id="4-path-extname-方法，返回路径最后一部分的拓展名-后缀名"><a href="#4-path-extname-方法，返回路径最后一部分的拓展名-后缀名" class="headerlink" title="4. path.extname()方法，返回路径最后一部分的拓展名(后缀名)"></a>4. path.extname()方法，返回路径最后一部分的拓展名(后缀名)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>    <span class="hljs-comment">// 1. 引入path路径模块</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-comment">// 2.调用方法：extname(路径)</span><br><span class="hljs-comment">// 返回值：返回路径最后一部分的拓展名(后缀名)</span><br><span class="hljs-built_in">console</span>.log(path.extname(<span class="hljs-string">&#x27;/a/b/c/haha.html&#x27;</span>)); <span class="hljs-comment">//.html</span><br><br><span class="hljs-keyword">const</span> filePath = path.join(__dirname, <span class="hljs-string">&#x27;hello.js&#x27;</span>);<br>fs.readFile(filePath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (path.extname(filePath) == <span class="hljs-string">&#x27;.js&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;正在读取文本文件&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.extname(filePath) == <span class="hljs-string">&#x27;.html&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;正在读取html文件&#x27;</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="四、-综合案例-时钟案例"><a href="#四、-综合案例-时钟案例" class="headerlink" title="四、 综合案例 - 时钟案例"></a>四、 综合案例 - 时钟案例</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">// 需求<br>// 1. 吧index.html中style标签中的样式 提取到单独的css文件中<br>// 2. 吧index.html中script标签中的js 提取到单独的js文件中<br>// 3. 在index.html中把原本的样式和js 代码改写成路径导入<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> file = path.join(__dirname, <span class="hljs-string">&#x27;./clock/index.html&#x27;</span>);<br><span class="hljs-comment">// 2.1读取文件</span><br>fs.readFile(file, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`读取失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-comment">// console.log(res);</span><br><br>    <span class="hljs-comment">// 2.2用正则表达式匹配出 style双标签里的内容</span><br>    <span class="hljs-comment">// 小括号表示提取分组</span><br>    <span class="hljs-keyword">const</span> cssReg = <span class="hljs-regexp">/&lt;style&gt;([\s\S]*)&lt;\/style&gt;/</span>;<br>    <span class="hljs-comment">// reg.exec(字符串) 返回字符串中匹配正则的字符内容</span><br>    <span class="hljs-keyword">const</span> arr = cssReg.exec(res);<br>    <span class="hljs-comment">// console.log(arr); //[匹配到的完整字符串,小括号里的内容]  所以我们需要的是arr[1]</span><br><br>    <span class="hljs-comment">// 2.3 把匹配到的样式写入一个新的css文件中</span><br>    fs.writeFile(path.join(__dirname, <span class="hljs-string">&#x27;clock/index.css&#x27;</span>), arr[<span class="hljs-number">1</span>], <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`写入失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;写入文件成功&#x27;</span>);<br>    &#125;);<br>    <span class="hljs-comment">// 3.1 定义提取js的正则</span><br>    <span class="hljs-keyword">const</span> jsReg = <span class="hljs-regexp">/&lt;script&gt;([\s\S]*)&lt;\/script&gt;/</span><br>        <span class="hljs-comment">// 3.2 匹配文件中的指定文本</span><br>    <span class="hljs-keyword">const</span> arr2 = jsReg.exec(res);<br>    <span class="hljs-comment">// console.log(arr2[1]);</span><br>    <span class="hljs-comment">// 3.3 把匹配到的js写入一个新的js文件中</span><br>    fs.writeFile(path.join(__dirname, <span class="hljs-string">&#x27;clock/index.js&#x27;</span>), arr2[<span class="hljs-number">1</span>], <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`写入失败：<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;写入文件成功&#x27;</span>);<br>    &#125;);<br>    <span class="hljs-comment">// 4.使用字符串的替换方法 replace(正则，替换后的内容)</span><br>    <span class="hljs-keyword">const</span> newStr = res.replace(cssReg, <span class="hljs-string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot; &gt;&#x27;</span>)<br>        .replace(jsReg, <span class="hljs-string">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span>);<br>    <span class="hljs-comment">// 把替换后的字符重新写入index.html文件里</span><br>    fs.writeFile(path.join(__dirname, <span class="hljs-string">&#x27;./clock/index.html&#x27;</span>), newStr, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`写入失败`</span>);<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;写入成功&#x27;</span>);<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js第二天</title>
    <link href="/2021/02/21/Node.js/Node.js%E7%AC%AC02%E5%A4%A9/"/>
    <url>/2021/02/21/Node.js/Node.js%E7%AC%AC02%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js第二天"><a href="#Node-js第二天" class="headerlink" title="Node.js第二天"></a>Node.js第二天</h1><h2 id="一、http模块"><a href="#一、http模块" class="headerlink" title="一、http模块"></a>一、http模块</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">服务器和客户端的概念回顾 <br>客户端负责向服务器发送请求, 获取数据并进行使用; <br>服务器负责接收来自客户端的网络请求, 处理数据并进行返回<br></code></pre></td></tr></table></figure><p><strong>http 模块</strong>是 Node.js 官方提供的、用来创建 web 服务器的模块。通过 http 模块提供的 **http.createServer() **方法，就 能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。</p><h3 id="1-1-服务器相关概念"><a href="#1-1-服务器相关概念" class="headerlink" title="1.1 服务器相关概念"></a>1.1 服务器相关概念</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、IP 地址 <br>      用来标识互联网上一台计算机的唯一地址编号, 只有访问正确的 IP 地址才能和计算机进行数据通信<br><br>    二、IP 地址格式<br>      采用 “点分十进制” 表示成 A.B.C.D 的形式, 就是用4个从0~255的数字，来表示一个IP地址, 比如：<br>    我们在终端输入 `ipconfig` 可以查看本机的 IPv4 地址格式<br><br>    三、了解 ping 命令<br>      在终端执行 `ping 域名`, 可以获取当前域名的 IP 地址并测试出网络连接情况<br></code></pre></td></tr></table></figure><h3 id="1-2-域名和域名服务器"><a href="#1-2-域名和域名服务器" class="headerlink" title="1.2 域名和域名服务器"></a>1.2 域名和域名服务器</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、域名 和 IP地址 <br>     域名和 IP 地址是一一对应的关系, 它是 IP 地址字符型的表达, 这种映射关系被存放在一台 DNS 服务器上<br><br>   二、DNS（Domain Name System）<br>     专门用来管理互联网上域名和 IP 对应关系的公网服务器<br><br>   三、本地计算机的 IP 和 域名<br>     开发测试时, 本地计算机 IP 一般是 127.0.0.1, 对应的域名是 localhost, 没有使用区别<br></code></pre></td></tr></table></figure><h3 id="1-3-端口"><a href="#1-3-端口" class="headerlink" title="1.3 端口"></a>1.3 端口</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、端口的概念 <br>      IP 地址可以用来标识唯一的计算机地址, 但是计算机上运行的不同服务无法仅用 IP 来标识, 于是使用了<br>    IP + 端口号的方式来区分不同的服务, 每个服务都对应着一个唯一的端口号<br><br>    二、端口的作用<br>     客户端发送的请求, 通过指定的端口号, 可以把请求交给对应的服务来进行处理<br>    <br>    注意： <br>      ULR 中的端口号如果是 80, 一般可以省略<br></code></pre></td></tr></table></figure><h2 id="二、创建服务器的步骤"><a href="#二、创建服务器的步骤" class="headerlink" title="二、创建服务器的步骤"></a>二、创建服务器的步骤</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">简写为三步： 1. 引入http模块  2.调用方法.createServer 创建服务实例 3.listen()监听端口，开启服务<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入http模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-comment">// 2.调用方法.createServer 创建服务实例</span><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;有人请求了本次服务&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">// 3. .listen()监听端口，开启服务</span><br>server.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;服务开启成功，请访问：http://localhost:3006&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">// 执行成功后，光标一直在最后一行闪烁，表示当前服务器一直在开启状态</span><br><span class="hljs-comment">// 手动关闭服务器，可以使用 Ctrl+c</span><br><span class="hljs-comment">// 只要有人访问了本次服务，就会触发回调函数</span><br></code></pre></td></tr></table></figure><h2 id="三、请求对象和响应对象"><a href="#三、请求对象和响应对象" class="headerlink" title="三、请求对象和响应对象"></a>三、请求对象和响应对象</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">Node 服务器接收到了客户端的请求, 就会调用给服务器绑定的 request 请求事件处理函数, 函数的第一个参数<br> 是 Node 封装好的请求对象, 第二个参数是响应对象 <br><br>   一、requset 请求对象<br>     提供了获取客户端相关的请求属性, 比如: <br>     - req.url 请求的路径<br>     - req.method 请求的方法<br>     <br>   二、response 响应对象<br>     提供了服务器响应数据相关的方法, 比如：<br>     - res.setHeader() 设置响应头<br>     - res.end() 响应数据内容<br></code></pre></td></tr></table></figure><h3 id="3-1-请求对象req"><a href="#3-1-请求对象req" class="headerlink" title="3.1 请求对象req"></a>3.1 请求对象req</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-comment">// 创建服务实例</span><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req 表示客户端相关的属性和数据 一般用来获取请求信息</span><br>    <span class="hljs-comment">// 注意:这里的url地址不包括域名和端口的部分</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`当前请求路径是<span class="hljs-subst">$&#123;req.url&#125;</span>,请求的方式是<span class="hljs-subst">$&#123;req.method&#125;</span>`</span>);<br>&#125;);<br><span class="hljs-comment">// 监听端口开启服务</span><br>server.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开启服务成功，请访问：http://localhost:3006&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-2-相应对象res"><a href="#3-2-相应对象res" class="headerlink" title="3.2 相应对象res"></a>3.2 相应对象res</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义计数器</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// res提供了服务端响应数据的方法</span><br>    <span class="hljs-comment">// 1.响应数据给客户端 2.直接终止当前请求</span><br>    <span class="hljs-comment">// res.end(&#x27;hello&#x27;)</span><br>    <span class="hljs-comment">// res.end()不会阻止后续代码运行，但是请求已经终止了</span><br>    <span class="hljs-comment">// console.log(123);</span><br>    <span class="hljs-comment">// 每次刷新会打印两个123 因为浏览器默认会多一个小图标的请求 不用管它</span><br><br>    <span class="hljs-comment">//过滤图标请求 这样每次就只会打印一个123了</span><br>    <span class="hljs-keyword">if</span> (req.url != <span class="hljs-string">&#x27;/favicon.ico&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 更新计数变量</span><br>        num++<br>        <span class="hljs-comment">// 设置一个响应头，指定文件类型和编码方式 </span><br>        <span class="hljs-comment">// text/plain普通文本 text/html超文本 image/png图片 text/script脚本</span><br>        res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br>        res.end(<span class="hljs-string">`&lt;h1&gt;hello,你是第<span class="hljs-subst">$&#123;num&#125;</span>访问者&lt;/h1&gt;`</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>    &#125;<br><br>&#125;);<br><span class="hljs-comment">// 3.监听端口，开启服务</span><br>server.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开启服务成功，地址：http://localhost:3006&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="四、综合实例：根据不同的url响应不同的html内容"><a href="#四、综合实例：根据不同的url响应不同的html内容" class="headerlink" title="四、综合实例：根据不同的url响应不同的html内容"></a>四、综合实例：根据不同的url响应不同的html内容</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">  需求: 根据不同的 url, 返回不同的页面</span><br><span class="hljs-comment">  http: //localhost:3006/index ==&gt; 首页</span><br><span class="hljs-comment">  http: //localhost:3006/user ==&gt; 个人中心</span><br><span class="hljs-comment">  http: //localhost:3006/about ==&gt; 关于页面</span><br><span class="hljs-comment">  其他访问路径, 显示 404 找不到</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 1.引入模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; Server &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https&#x27;</span>);<br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> serve = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// console.log(req.url);</span><br>    <span class="hljs-comment">// 定义响应的内容文本</span><br>    <span class="hljs-keyword">let</span> content;<br><br>    <span class="hljs-comment">// 根据req.url来判断</span><br>    <span class="hljs-keyword">switch</span> (req.url) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/index&#x27;</span>:<br>            content = <span class="hljs-string">&#x27;&lt;h1&gt;这是主页&lt;/h1&gt;&#x27;</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/user&#x27;</span>:<br>            content = <span class="hljs-string">&#x27;&lt;h1&gt;这是个人中心&lt;/h1&gt;&#x27;</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/about&#x27;</span>:<br>            content = <span class="hljs-string">&#x27;&lt;h1&gt;这是关于页面&lt;/h1&gt;&#x27;</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            content = <span class="hljs-string">&#x27;&lt;h1 style=&quot;color:red&quot;&gt;404 您当前访问的页面不存在！&lt;/h1&gt;&#x27;</span><br>    &#125;;<br>    <span class="hljs-comment">// 设置响应头，指定文件的类型和编码方式</span><br>    res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);<br><br>    <span class="hljs-comment">// 使用res.end() 把数据响应给客户端</span><br>    res.end(content)<br>&#125;);<br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>serve.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开启服务成功，地址：http://localhost:3006&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="五、综合实例：时钟web服务器"><a href="#五、综合实例：时钟web服务器" class="headerlink" title="五、综合实例：时钟web服务器"></a>五、综合实例：时钟web服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取请求路径</span><br>    <span class="hljs-keyword">const</span> url = req.url;<br>    <span class="hljs-comment">// 定义一个读取文件的路径</span><br>    <span class="hljs-keyword">let</span> fpath = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-built_in">console</span>.log(url);<br>    <span class="hljs-comment">// 动态设置文件路径</span><br>    <span class="hljs-comment">// 优化1： 直接访问根路径 也能跳转到首页</span><br>    <span class="hljs-comment">// 优化2：把相对路径改成绝对路径</span><br>    fpath = path.join(__dirname, <span class="hljs-string">`./clock<span class="hljs-subst">$&#123;req.url == <span class="hljs-string">&#x27;/&#x27;</span> ? <span class="hljs-string">&#x27;/index.html&#x27;</span> : req.url&#125;</span>`</span>);<br>    <span class="hljs-comment">// 读取文件再响应</span><br>    fs.readFile(fpath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">&#x27;404 文件找不到&#x27;</span>);<br>        <span class="hljs-comment">// 把读取到的内容响应给客户端</span><br>        res.end(data);<br>    &#125;)<br>&#125;);<br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>server.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开启成功：http://localhost:3006/index.html&#x27;</span>);<br>&#125;)<br><br><br><span class="hljs-comment">// !!!!!!因为index.html文件里面引用了css和js  所以html css js都响应并不是只响应html</span><br></code></pre></td></tr></table></figure><h2 id="六、重要实例：自己设置一个简单的接口"><a href="#六、重要实例：自己设置一个简单的接口" class="headerlink" title="六、重要实例：自己设置一个简单的接口"></a>六、重要实例：自己设置一个简单的接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.引入http模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-comment">// 2.创建服务实例</span><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> arr = [<br>        &#123; <span class="hljs-attr">bookname</span>: <span class="hljs-string">&#x27;图书A&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attr">publish</span>: <span class="hljs-string">&#x27;出版社A&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">bookname</span>: <span class="hljs-string">&#x27;图书B&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-attr">publish</span>: <span class="hljs-string">&#x27;出版社B&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">bookname</span>: <span class="hljs-string">&#x27;图书C&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-attr">publish</span>: <span class="hljs-string">&#x27;出版社C&#x27;</span> &#125;<br>    ];<br>    <span class="hljs-comment">// 根据req.url来判断</span><br>    <span class="hljs-comment">// 设置响应头，指定文件的类型和编码方式</span><br>    res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br>    res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    <span class="hljs-keyword">switch</span> (req.url) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/getbook/1&#x27;</span>:<br><br>            res.end(<span class="hljs-built_in">JSON</span>.stringify(arr[<span class="hljs-number">0</span>]))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/getbook/2&#x27;</span>:<br>            res.end(<span class="hljs-built_in">JSON</span>.stringify(arr[<span class="hljs-number">1</span>]))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/getbook/3&#x27;</span>:<br>            res.end(<span class="hljs-built_in">JSON</span>.stringify(arr[<span class="hljs-number">2</span>]))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            res.end(<span class="hljs-string">&#x27;404 没有数据！&#x27;</span>)<br>    &#125;;<br>&#125;);<br><br><span class="hljs-comment">// 3.监听端口 开启服务</span><br>server.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开启服务成功，地址：http://localhost:3006&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>然后自己发送请求 获取数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>啊啊啊<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        $(<span class="hljs-string">&#x27;.btn&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.ajax(&#123;</span><br><span class="javascript">                url: <span class="hljs-string">&#x27;http://localhost:3006/getbook/100&#x27;</span>,</span><br><span class="javascript">                method: <span class="hljs-string">&#x27;get&#x27;</span>,</span><br><span class="javascript">                success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;发送请求&#x27;</span>);</span><br>                &#125;<br>            &#125;)<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、模块化"><a href="#七、模块化" class="headerlink" title="七、模块化"></a>七、模块化</h2><h3 id="7-1-模块化概念"><a href="#7-1-模块化概念" class="headerlink" title="7.1 模块化概念"></a>7.1 模块化概念</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、什么是模块化 <br>      把一个大的功能需求拆分成若干功能项的小模块, 每个模块可组合, 分解和更换, 这就是模块化思想<br><br>    二、Node.js 中的模块化<br>      把一个大的文件拆分成多个互相依赖的小文件, 每个文件就是一个模块<br><br>    三、好处<br>      1. 提高复用性  2. 代码可维护  3. 可以按需加载<br></code></pre></td></tr></table></figure><h3 id="7-2-模块化规范"><a href="#7-2-模块化规范" class="headerlink" title="7.2 模块化规范"></a>7.2 模块化规范</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、模块化规范 <br>        模块在进行拆分和组合时需要遵守的规则, 主要考虑以下两点：<br>        1. 如何把自身模块成员向外暴露<br>        2. 如何把其他模块进行引入<br><br>      二、Node.js中的模块分类<br>        1. 内置模块 （由 Node.js 官方提供的, 例如 fs, path, http 等）<br>        2. 自定义模块 （自己创建的 js 文件）<br>        3. 第三方模块 （由第三方开发的模块, 使用前需要先下载）<br><br>      三、加载模块<br>        require() 方法<br><br>      注意： <br>        加载内置模块和第三方模块，都是直接传入模块名，加载自己的模块需要传入文件路径，并省略 .js 后缀<br></code></pre></td></tr></table></figure><h3 id="7-3-引用模块"><a href="#7-3-引用模块" class="headerlink" title="7.3 引用模块"></a>7.3 引用模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 引入内置模块 fs path http等 require(模块名)</span><br><span class="hljs-comment">// const fs = require(&#x27;fs&#x27;);</span><br><span class="hljs-comment">// 2. 引入第三方模块 vue jquery 等  require(模块名)</span><br><span class="hljs-comment">// const jquert = require(&#x27;jquery&#x27;)</span><br><br><br><span class="hljs-comment">//3. 引入自定义模块 require(相对路径)  注意这里的相对路径的./ ../不能省略,可以省略 .js</span><br><span class="hljs-comment">// 在node里面引入模块 默认是.js的文件  即使有foo.css 也不会引入的</span><br><span class="hljs-keyword">const</span> foo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./foo&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">//&#123;&#125; 默认的结果是一共空对象因为没有暴露成员</span><br><span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//is not difined 模块作用域限制我们无法访问另一个模块的成员</span><br></code></pre></td></tr></table></figure><h3 id="7-4-模块作用域"><a href="#7-4-模块作用域" class="headerlink" title="7.4 模块作用域"></a>7.4 模块作用域</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、模块作用域<br>     不同模块中定义的方法和变量，只能在当前模块内访问，这种模块级别的限制叫做模块作用域<br><br>复习学过的作用域<br>     1.局部作用域(函数作用域)<br>     2.全局作用域<br>     3.块级作用域:let const<br></code></pre></td></tr></table></figure><h2 id="八、module和exports"><a href="#八、module和exports" class="headerlink" title="八、module和exports"></a>八、module和exports</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、module 对象的作用<br>      在每个模块中， module 这个内置的变量表示当前模块的引用<br>    <br>    二、module.exports 对象作用<br>      把模块中的成员导出暴露给外部, 供外界进行加载和调用<br><br>    三、exports 对象<br>      exports 是 module.exports 的更简短的引用形式<br>    <br>    注意：<br>      (1) module.exports 的值就是当前模块最终导出的结果<br>      (2) 可以通过 exports 访问和修改 module.exports 上的属性, 但不能通过赋值方式进行覆盖<br><br>   总结：<br>     (1) 尽量避免为 exports 对象重新赋值,不要使用exports=&#123;...&#125; 可以使用exports.XXX=xx<br>     (2) 重新赋值一个新对象 可以使用 module.exports=&#123;...&#125;<br></code></pre></td></tr></table></figure><h3 id="8-1-module-exports的用法"><a href="#8-1-module-exports的用法" class="headerlink" title="8.1 module.exports的用法"></a>8.1 module.exports的用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// console.log(module.exports == &#123;&#125;); //false 因为复杂数据类型比较的是地址值</span><br><span class="hljs-comment">//第一种方法： 为module.exports对象添加属性</span><br><span class="hljs-comment">// 暴露成员 供外界引入</span><br><span class="hljs-comment">// module.exports.num = 123;</span><br><span class="hljs-comment">// module.exports.age = 10;</span><br><span class="hljs-comment">// module.exports.fn = function() &#123;</span><br><span class="hljs-comment">//     console.log(123);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 第二种方法 直接给module.exports对象重新赋值 </span><br><span class="hljs-comment">// 给对象重新赋值的话 之前挂载在老的空对象上的属性和值则不算了 也就是即使上面第一种不注释掉  也不会再显示的，以下面重新赋值的新对象为准</span><br><span class="hljs-comment">// const num = 10;</span><br><span class="hljs-comment">// module.exports = &#123;</span><br><span class="hljs-comment">//     num, //当属性名和值一样的时候可以简写  完整写法是num=num</span><br><span class="hljs-comment">//     age: 20,</span><br><span class="hljs-comment">//     fn: function(params) &#123;</span><br><span class="hljs-comment">//         console.log(123);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><br><br><br><span class="hljs-comment">// 第三种方法 node内置了exports对象 它和module.exports指向同一个对象，是module.exports的一种简写</span><br><span class="hljs-comment">// 所以给exports对象添加属性 本质上还是给module.exports对象添加属性</span><br><span class="hljs-comment">// 一个模块最终导出的对象还是以module.exports为准 </span><br><span class="hljs-comment">// exports.num = 20;</span><br><span class="hljs-comment">// exports.age = 30;</span><br><span class="hljs-comment">// exports.fn = function(params) &#123;</span><br><span class="hljs-comment">//     console.log(456);</span><br><span class="hljs-comment">// &#125;;</span><br><br><br><br><span class="hljs-comment">// exports = &#123;</span><br><span class="hljs-comment">//         num: 20,</span><br><span class="hljs-comment">//         age: 30</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//！！注意 这里不适用第二个方法 为exports重新赋值。因为这里两个对象都指向0x001 给exports重新赋值的话 exports就指向0x002了 </span><br><span class="hljs-comment">// 但是module.exports还是指向0x001 所以一个模块最终导出的对象还是以module.exports为准 0x001没有值那么就为默认的&#123;&#125;</span><br><br><span class="hljs-comment">// 同理：</span><br><span class="hljs-comment">// exports.name = &#x27;小明&#x27;;</span><br><span class="hljs-comment">// module.exports = &#123;</span><br><span class="hljs-comment">//     age: 20,</span><br><span class="hljs-comment">//     num: 30</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">// 结果3想是 &#123; age:20,num:30&#125;  因为最终还是以module.exports为准 </span><br><span class="hljs-comment">// 虽然exports.name 给0x001加了条属性  但module.exports重新赋值 指向了0x002   0x002不受0x001的影响 最终输出的还是0x002的值</span><br><br><br><span class="hljs-comment">// 同理</span><br><span class="hljs-built_in">exports</span> = &#123;<br>    num: <span class="hljs-number">20</span>,<br>    age: <span class="hljs-number">30</span>,<br>&#125;;<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-built_in">exports</span>;<br><span class="hljs-built_in">exports</span>.fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>);<br>&#125;;<br><span class="hljs-built_in">module</span>.exports.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">789</span>);<br>&#125;;<br><span class="hljs-comment">// 结果是都有 因为module.exports = exports  把exports的地址0x002给了module.exports  最终都指向0x002</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js第三天</title>
    <link href="/2021/02/21/Node.js/Node.js%E7%AC%AC03%E5%A4%A9/"/>
    <url>/2021/02/21/Node.js/Node.js%E7%AC%AC03%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js第三天"><a href="#Node-js第三天" class="headerlink" title="Node.js第三天"></a>Node.js第三天</h1><h2 id="一、包"><a href="#一、包" class="headerlink" title="一、包"></a>一、包</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、什么叫做包 (package)？ <br>      带有一个 package.json 文件的目录称为包, 用来描述多个模块之间互相依赖的关系, 通常第三方模块都是以一个<br>    包的形式存在, 又称为 &quot;第三方包&quot; <br><br>    二、包的来源<br>      通常我们直接使用第三方个人或团队开发出来的软件包, 进行免费下载和使用<br><br>    三、包管理器<br>      世界上有众多的第三方模块或包, Node.js 中使用了一款 npm 包管理器来管理所有的第三方包<br>      3.1 尝试在 npm 网站上搜索你想要的包：https://www.npmjs.com/<br>      3.2 在 npm 上下载包： https://registry.npmjs.org/<br>      <br>    四、npm (node package manage)<br>      下载, 更新, 卸载项目中的第三方包, 可以执行 npm -v 查看在自己电脑本机的 npm <br></code></pre></td></tr></table></figure><h3 id="1-1-npm管理包的命令"><a href="#1-1-npm管理包的命令" class="headerlink" title="1.1 npm管理包的命令"></a>1.1 npm管理包的命令</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、下载一个指定的包 <br>      `npm i 包的具体名称` <br><br>    二、查看一个指定包<br>      `npm view 包的具体名称`<br><br>    三、下载指定版本的包<br>      `npm i 包的具体名称@版本号`<br>      第一个数字：大版本<br>      第二个数字：功能版本<br>      第三个数字：Bug修复版本<br>      提升规范：只要前面的数字增长了 后面的数字归零<br></code></pre></td></tr></table></figure><h3 id="1-2-npm初体验"><a href="#1-2-npm初体验" class="headerlink" title="1.2 npm初体验"></a>1.2 npm初体验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用时间插件包来格式化日期</span><br><span class="hljs-comment">// 1.下载moment包</span><br><span class="hljs-comment">// 2.引入第三方包    require(包名)</span><br><span class="hljs-comment">// 3.使用包（查文档）</span><br><br><span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment&#x27;</span>);<br><span class="hljs-comment">// console.log(moment);</span><br><br><span class="hljs-comment">// moment(时间).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)  不传时间默认为当前时间</span><br><span class="hljs-built_in">console</span>.log(moment().format(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">当我们在本地安装一个包后, 会多出两个文件: node_modules 和 package-lock.json <br>    1. node_modules 文件夹处在项目的根目录下, 用于存放安装的包<br>    2. package-lock.json 是程序包的锁文件, 里面详细记录了每个包的版本信息和依赖模块, 不需要我们手动编写<br><br>    注意: <br>      1. /node_modules/.bin 这个文件夹, 专门用来存放可执行文件<br>      2. package-lock.json 文件可以确保不同开发人员之间的下载的包版本保持一致, 减少版本错乱的风险<br></code></pre></td></tr></table></figure><h3 id="1-3-包管理配置文件"><a href="#1-3-包管理配置文件" class="headerlink" title="1.3 包管理配置文件"></a>1.3 包管理配置文件</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、包管理配置文件 <br>      任何一个 npm 包必须具有 package.json 这样一个 JSON 格式的配置文件, 里面详细记录了包的名称，版本以及<br>    所依赖的其他包信息<br><br>    二、开发环境和部署环境<br>      开发环境又叫本地环境, 只对开发者本身提供服务, 要求比较随意, 错误调试都可以打开为了更方便的检测程序;<br>      部署环境又叫线上环境 或 生产环境, 正式对外进行提供服务; 要确保功能完备, 用户体验友好<br><br>    注意：<br>      通常在我们的项目根目录下也会使用 package.json 这个文件来记录项目的详细信息<br></code></pre></td></tr></table></figure><h3 id="1-4-多人协作开发的问题"><a href="#1-4-多人协作开发的问题" class="headerlink" title="1.4 多人协作开发的问题"></a>1.4 多人协作开发的问题</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">多人合作一个项目时，第三方的包太多体积过大，node_modules 这个文件夹不易于团队成员之间进行共享，<br>  使用包管理配置文件来记录项目中所依赖的其他第三方包，这样团队成员之间只需要共享这个配置文件就可以了<br><br>    注意：node_modules 这个文件夹需要添加到 .gitignore 忽略文件中<br></code></pre></td></tr></table></figure><h2 id="二、快速创建一个包管理配置文件"><a href="#二、快速创建一个包管理配置文件" class="headerlink" title="二、快速创建一个包管理配置文件"></a>二、快速创建一个包管理配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">  在项目的根目录下执行 <span class="hljs-string">`npm init -y`</span> 命令<br><br>注意：<br>  <span class="hljs-number">1.</span> 项目目录不能使用中文命名, 不能包含空格<br>  <span class="hljs-number">2.</span> 创建了 package.json 文件后, 每次安装包的名称和版本都会记录在这个文件中，不需要手动修改<br></code></pre></td></tr></table></figure><h3 id="2-1-dependencies配置项的作用"><a href="#2-1-dependencies配置项的作用" class="headerlink" title="2.1 dependencies配置项的作用"></a>2.1 dependencies配置项的作用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">一、package.json 配置文件中有两个关键的配置项: <br>      <span class="hljs-number">1.</span> dependencies: 在生产环境中所需要的软件包<br>      <span class="hljs-number">2.</span> devDependencies: 仅本地开发和测试所需要的软件包<br><br>    二、上述配置项的作用<br>      其他项目成员在执行 <span class="hljs-string">`npm install`</span> 或者<span class="hljs-string">`npm i`</span>命令时，会自动根据 package.json 文件中记录的包名称和版本信息<br>    全部进行下载<br></code></pre></td></tr></table></figure><h3 id="2-2-npm-uninstall卸载指定的包"><a href="#2-2-npm-uninstall卸载指定的包" class="headerlink" title="2.2  npm uninstall卸载指定的包"></a>2.2  npm uninstall卸载指定的包</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、卸载指定的包 <br>     执行 `npm uninstall 包名称`<br><br>   注意：<br>     1. 当命令执行成功后，dependencies 配置项下的包会自动移除<br>     2. 卸载包的时候不需要指定版本号<br></code></pre></td></tr></table></figure><h3 id="2-3-devDependencies-配置作用"><a href="#2-3-devDependencies-配置作用" class="headerlink" title="2.3  devDependencies 配置作用"></a>2.3  devDependencies 配置作用</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、devDependencies 配置作用 <br>     只在本地开发测试阶段需要用到的包，一般记录在 devDependencies 配置项中，后期在进行项目打包上线的<br>   时候，并不会把这些包携带到线上环境<br><br>   二、如何安装开发测试阶段用到的包<br>     执行命令 `npm i --save-dev 包名称@版本号` 或 `npm i -D 包名称@版本号`<br><br>     注意：使用npm i下载所有依赖包时devDependencies 内的包也会一并下载<br></code></pre></td></tr></table></figure><h3 id="2-4-解决包下载速度慢的问题-换源"><a href="#2-4-解决包下载速度慢的问题-换源" class="headerlink" title="2.4 解决包下载速度慢的问题(换源)"></a>2.4 解决包下载速度慢的问题(换源)</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、npm 下载包的问题 <br>      当我们下载国外服务器上的包时，网速较慢容易下载失败， 可以考虑把下载包的服务器（源）进行更换<br><br>    二、更换国内的源<br>      在任意目录下执行： `npm config set registry=https://registry.npm.taobao.org`<br>      检查源有没有更换成功： `npm config get registry`<br>    <br>    补充：npm i -g cnpm先下载cnpm这个包  借助这个包提供了新的下载命令 `cnpm i -S 包名`<br><br>    三、使用 nrm 切换源<br>      在任意目录下依次执行：`npm i -g nrm` ==&gt; `nrm ls` ==&gt;`nrm use taobao`<br></code></pre></td></tr></table></figure><h3 id="2-5-包的分类"><a href="#2-5-包的分类" class="headerlink" title="2.5 包的分类"></a>2.5 包的分类</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">npm 的包从作用域上可以分为： <br>   1. 项目包： 被安装到项目的 node_modules 目录中的包，只能在当前项目下进行使用<br>     - [核心依赖包] 线上环境用到的依赖包： npm i 包名称<br>     - [开发依赖包] 开发测试环境用到的依赖包：npm i -D 包名称<br><br>   2. 全局包： 被下载到 node 安装位置 node_modules 目录下的包，可以在全局范围(任意目录)内使用<br>     安装命令： npm i -g 包名称<br>     卸载命令： npm uninstall -g 包名称<br><br>   注意: 具有全局工具性的包才有全局安装的必要性, 可以参考 npm 官网中对包的说明<br>   3. i5ting_toc   使用一个把 markdown 格式的文档转成 html 格式文件的工具包<br>   安装命令：npm i -g i5ting_toc   是全局包<br>   使用命令：i5ting_toc -f 要转换的md文件 -o<br></code></pre></td></tr></table></figure><h3 id="2-6-包的规范"><a href="#2-6-包的规范" class="headerlink" title="2.6 包的规范"></a>2.6 包的规范</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">一个包规范的组成结构： <br>    1. 必须以单独的目录存在<br>    2. 包的根目录下必须包含 package.json 配置文件<br>    3. package.json 这个配置文件必须包含 name, version, main 三个属性, 分别代表包的名称，版本和包的入口<br>    description: 说明<br>    keywords: 搜索的关键字<br>    author: 作者<br>    license: 协议  用MIT就行了<br>    <br>    注意：<br>      main 配置包的主入口文件，我们在使用 require(&#x27;foo&#x27;) 引入一个包时，<br>      返回的是 foo 这个包主入口文件导出的对象<br></code></pre></td></tr></table></figure><h2 id="三、开发自己的包-★★★"><a href="#三、开发自己的包-★★★" class="headerlink" title="三、开发自己的包 ★★★"></a>三、开发自己的包 ★★★</h2><h3 id="3-1-初始化包的基本结构"><a href="#3-1-初始化包的基本结构" class="headerlink" title="3.1 初始化包的基本结构"></a>3.1 初始化包的基本结构</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">1. 新建XXX文件夹 作为包的根目录<br>2. 在XXX文件夹内 新建如下三个文件：<br> (1)package.json （包管理配置文件）<br> (2)index.js （包的入口文件）<br> (3)README.md （包的说明文档）<br>3. 使用命令 npm init -y  初始化package.json文件<br></code></pre></td></tr></table></figure><h3 id="3-2-在-index-js-中定义格式化时间的方法"><a href="#3-2-在-index-js-中定义格式化时间的方法" class="headerlink" title="3.2 在 index.js 中定义格式化时间的方法"></a>3.2 在 index.js 中定义格式化时间的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 定义格式化事件的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dateFormat</span>(<span class="hljs-params">date</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date);<br>    <span class="hljs-comment">//    获取年月日时分秒</span><br>    <span class="hljs-keyword">const</span> Y = addZero(time.getFullYear());<br>    <span class="hljs-keyword">const</span> M = addZero(time.getMonth() + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> D = addZero(time.getDate());<br>    <span class="hljs-keyword">const</span> hh = addZero(time.getHours());<br>    <span class="hljs-keyword">const</span> mm = addZero(time.getMinutes());<br>    <span class="hljs-keyword">const</span> ss = addZero(time.getSeconds());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;Y&#125;</span>-<span class="hljs-subst">$&#123;M&#125;</span>-<span class="hljs-subst">$&#123;D&#125;</span> <span class="hljs-subst">$&#123;hh&#125;</span>:<span class="hljs-subst">$&#123;mm&#125;</span>:<span class="hljs-subst">$&#123;ss&#125;</span>`</span><br>&#125;;<br><span class="hljs-comment">// 定义一个补零的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addZero</span>(<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + value : value<br>&#125;;<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    dateFormat<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-在-index-js-中定义转义-HTML-和还原的方法"><a href="#3-3-在-index-js-中定义转义-HTML-和还原的方法" class="headerlink" title="3.3 在 index.js 中定义转义 HTML 和还原的方法"></a>3.3 在 index.js 中定义转义 HTML 和还原的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.把html标签进行转义成实体字符串</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeHTML</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-comment">// replace(str,str2) 默认情况下一次只能替换一个</span><br>    <span class="hljs-comment">//replace(/正则/g,str) 全局替换符合正则的字符串  第二个参数str可以是函数</span><br>    <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/&lt;|&gt;|&quot;|&amp;/g</span>, <span class="hljs-function">(<span class="hljs-params">match</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">switch</span> (match) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;lt;&#x27;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;gt;&#x27;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;quot;&#x27;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;amp;&#x27;</span><br>        &#125;<br>    &#125;)<br><br>&#125;;<br><br><span class="hljs-comment">// 3. 把转义后的实体字符串还原成html标签</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unEscapeHTML</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span>, <span class="hljs-function">(<span class="hljs-params">match</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">switch</span> (match) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;&#x27;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&gt;&#x27;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&quot;&#x27;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;&#x27;</span><br>        &#125;<br>    &#125;)<br>&#125;;<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    escapeHTML,<br>    unEscapeHTML<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-将不同的功能进行模块化拆分"><a href="#3-4-将不同的功能进行模块化拆分" class="headerlink" title="3.4 将不同的功能进行模块化拆分"></a>3.4 将不同的功能进行模块化拆分</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">① 将格式化时间的功能，拆分到 src -&gt; dateFormat.js 中<br>② 将处理 HTML 字符串的功能，拆分到 src -&gt; htmlEscape.js 中<br>③ 在 index.js 中，导入两个模块，得到需要向外共享的方法<br>④ 在 index.js 中，使用 module.exports 把对应的方法共享出去<br></code></pre></td></tr></table></figure><p>拆分后的index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dateFormat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./src/dateFormat&#x27;</span>);<br><span class="hljs-keyword">const</span> escapeHTML = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./src/escapeHTML&#x27;</span>);<br><span class="hljs-comment">// 把格式化事件的函数暴露出去</span><br><span class="hljs-comment">// 拓展运算符（...）用于取出参数对象或数组 所有可遍历属性然后拷贝到当前对象或数组。</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    ...dateFormat,<br>    ...escapeHTML<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-5-编写包的说明文档-README-md"><a href="#3-5-编写包的说明文档-README-md" class="headerlink" title="3.5 编写包的说明文档 README.md"></a>3.5 编写包的说明文档 README.md</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">大致分为四个部分 1.安装 2.引入 3.使用 4.协议 一般注明MIT就行<br>使用里根据功能 这里再分为三个部分(1)格式化时间 (2)转义 HTML 中的特殊字符 (3)还原 HTML 中的特殊字符<br></code></pre></td></tr></table></figure><h3 id="3-6-发布包"><a href="#3-6-发布包" class="headerlink" title="3.6 发布包"></a>3.6 发布包</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">1. 注册npm账号<br>2. 在终端中执行 npm login 命令，依次输入用户名、密码、邮箱后，进行登录。<br>3. 在包的发布目录下面执行命令`npm publish`发布到npm上   注意一定要是发布目录下面  <br>4. 运行 npm unpublish 包名 --force 命令，即可从 npm 删除已发布的包。<br></code></pre></td></tr></table></figure><h2 id="四、模块的加载机制-★★★"><a href="#四、模块的加载机制-★★★" class="headerlink" title="四、模块的加载机制  ★★★"></a>四、模块的加载机制  ★★★</h2><h3 id="4-1-模块的缓存机制"><a href="#4-1-模块的缓存机制" class="headerlink" title="4.1 模块的缓存机制"></a>4.1 模块的缓存机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、模块优先从缓存中进行加载 <br>     模块在第一次加载后会被缓存, 如果每次调用 require(&#x27;foo&#x27;) 都解析到同一文件，则返回相同的对象,<br>   不会导致模块的代码被执行多次<br><br>二、缓存的作用<br>     不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的<br>   加载效率<br><br>   说明：文档地址（http://nodejs.cn/api/modules.html#modules_caching） <br></code></pre></td></tr></table></figure><h3 id="4-2-内置模块的加载机制"><a href="#4-2-内置模块的加载机制" class="headerlink" title="4.2 内置模块的加载机制"></a>4.2 内置模块的加载机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、核心模块的加载机制 <br>     require() 总是会优先加载核心模块, 比如 require(&#x27;http&#x27;) 始终返回内置的 HTTP 模块，即使有同名文件<br>     如果下载的第三方包是与内置模块同名的包 如http包 那么require(&#x27;http&#x27;) 始终返回内置的 HTTP 模块<br></code></pre></td></tr></table></figure><h3 id="4-3-自定义模块的加载机制"><a href="#4-3-自定义模块的加载机制" class="headerlink" title="4.3 自定义模块的加载机制"></a>4.3 自定义模块的加载机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、自定义模块的加载机制 <br>      使用 require() 方法去加载自定义模块，必须指定 &#x27;/&#x27;、 &#x27;./&#x27; 或 &#x27;../&#x27; 开头的路径，如果没有这个<br>    路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块<br><br><br>二、自定义文件模块<br>      如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载<br><br>三、自定义目录模块<br>      当传递一个目录标识符给 require () 方法时, 加载的顺序如下:<br>      <br>      1. 在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口<br>      2. 上述找不到,  Node.js 将会试图加载目录下的 index.js 或 index.node 文件<br></code></pre></td></tr></table></figure><h3 id="4-4-第三方模块的加载机制"><a href="#4-4-第三方模块的加载机制" class="headerlink" title="4.4 第三方模块的加载机制"></a>4.4 第三方模块的加载机制</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">一、第三方模块的加载机制 <br>     如果传递给 require() 的模块标识符不是一个核心模块，也没有以 &#x27;/&#x27; 、 &#x27;../&#x27; 或 &#x27;./&#x27; 开头，<br>   那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，<br>   则移动到再上一层父目录，直到文件系统的根目录。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax第一天</title>
    <link href="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/"/>
    <url>/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第一天"><a href="#Ajax第一天" class="headerlink" title="Ajax第一天"></a>Ajax第一天</h1><h2 id="一、客户端与服务器（⭐⭐⭐）"><a href="#一、客户端与服务器（⭐⭐⭐）" class="headerlink" title="一、客户端与服务器（⭐⭐⭐）"></a>一、客户端与服务器（⭐⭐⭐）</h2><h3 id="1-上网的目的"><a href="#1-上网的目的" class="headerlink" title="1.上网的目的"></a>1.上网的目的</h3><p>上网的<strong>本质目的：</strong>通过互联网的形式来 <strong>获取和消费资源</strong></p><h3 id="2-服务器"><a href="#2-服务器" class="headerlink" title="2.服务器"></a>2.服务器</h3><p>上网过程中，负责 <strong>存放和对外提供资源</strong> 的电脑，叫做服务器</p><h3 id="3-客户端"><a href="#3-客户端" class="headerlink" title="3.客户端"></a>3.客户端</h3><p>在上网过程中，负责 <strong>获取和消费资源</strong> 的电脑，叫做客户端</p><h2 id="二、URL地址的概念和组成"><a href="#二、URL地址的概念和组成" class="headerlink" title="二、URL地址的概念和组成"></a>二、URL地址的概念和组成</h2><h3 id="1-URL地址-链接"><a href="#1-URL地址-链接" class="headerlink" title="1.URL地址 (链接)"></a>1.URL地址 (链接)</h3><p>互联网资源的统一定位标识符, 用来标识互联网上每个资源的存放位置</p><h3 id="2-URL地址的三部分组成"><a href="#2-URL地址的三部分组成" class="headerlink" title="2.URL地址的三部分组成"></a>2.URL地址的三部分组成</h3><p>URL地址一般由三部分组成:</p><ul><li>客户端与服务器之间的 <strong>通信协议</strong></li><li>存有该资源的 <strong>服务器名称</strong></li><li>资源在服务器上 <strong>具体的存放位置</strong>    location.path</li></ul><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\URL组成.png"></p><p>复习：<a href="http://www.baidu.com/home/index.html?uname=tom&amp;age=20#abc">http://www.baidu.com/home/index.html?uname=tom&amp;age=20#abc</a></p><p>url中的查询参数： location.search     ?key=value&amp;key=value     上述链接的为 ?uname=tom&amp;age=20</p><p>url中的锚点：location.hash     #后面的          上述链接为 #abc</p><p>BOM中的三大对象： location(操作地址栏) history(浏览器历史) Navigator(获取浏览器信息 UA)</p><h2 id="三、客户端与服务器通讯过程（⭐⭐⭐）"><a href="#三、客户端与服务器通讯过程（⭐⭐⭐）" class="headerlink" title="三、客户端与服务器通讯过程（⭐⭐⭐）"></a>三、客户端与服务器通讯过程（⭐⭐⭐）</h2><ol><li>客户端发送请求 </li><li>服务器处理这个请求</li><li>服务器把数据发送给客户，完成响应</li></ol><ul><li>客户端与服务器之间的通讯过程，分为： <strong>请求-处理-响应</strong> 三个步骤</li><li>网页中每一个资源，都是通过 <strong>请求-处理-响应</strong> 的方式从服务器获取回来的</li></ul><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\客户端与服务器通讯过程.png"></p><h2 id="四、谷歌浏览器中调试通信过程"><a href="#四、谷歌浏览器中调试通信过程" class="headerlink" title="四、谷歌浏览器中调试通信过程"></a>四、谷歌浏览器中调试通信过程</h2><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\请求面板1.png"></p><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\请求面板2.png"></p><h2 id="五、资源请求的方式（⭐⭐⭐）"><a href="#五、资源请求的方式（⭐⭐⭐）" class="headerlink" title="五、资源请求的方式（⭐⭐⭐）"></a>五、资源请求的方式（⭐⭐⭐）</h2><h3 id="1-get请求：表示向服务器获取数据-例如-获取页面-图片-js文件-数据…"><a href="#1-get请求：表示向服务器获取数据-例如-获取页面-图片-js文件-数据…" class="headerlink" title="1.get请求：表示向服务器获取数据, 例如: 获取页面, 图片, js文件, 数据…"></a>1.get请求：表示向服务器获取数据, 例如: 获取页面, 图片, js文件, 数据…</h3><h3 id="2-post请求：表示向服务器发送数据-例如-登录或注册个人信息-购买商品-发表文章…"><a href="#2-post请求：表示向服务器发送数据-例如-登录或注册个人信息-购买商品-发表文章…" class="headerlink" title="2.post请求：表示向服务器发送数据, 例如: 登录或注册个人信息, 购买商品, 发表文章…"></a>2.post请求：表示向服务器发送数据, 例如: 登录或注册个人信息, 购买商品, 发表文章…</h3><h2 id="六、Ajax"><a href="#六、Ajax" class="headerlink" title="六、Ajax"></a>六、Ajax</h2><h3 id="1-Ajax是什么"><a href="#1-Ajax是什么" class="headerlink" title="1.Ajax是什么"></a>1.Ajax是什么</h3><p>   <code>Ajax</code> 的全称是 <code>Asynchronous JavaScript And XML</code>（异步 <code>JavaScript</code> 和 <code>xml</code>）</p><p>通俗理解：在网页中利用 <code>XMLHttpRequest</code> 对象和服务器进行数据交互的方式，就是<code>Ajax</code></p><p> 它最大的特点就是异步, 可以在不重新刷新页面的情况下与服务器通信, 交换数据</p><h3 id="2-异步任务和同步任务回顾"><a href="#2-异步任务和同步任务回顾" class="headerlink" title="2.异步任务和同步任务回顾"></a>2.异步任务和同步任务回顾</h3><p>异步任务: 图片,脚本资源加载; 点击事件; 定时器事件; ajax 数据交互。</p><p>异步执行任务的好处: 不会阻塞主线程执行栈上的同步任务。</p><p>复习： 一个回调函数就是一个异步任务，先执行同步再执行异步</p><h2 id="七、jQ中的Ajax"><a href="#七、jQ中的Ajax" class="headerlink" title="七、jQ中的Ajax"></a>七、jQ中的Ajax</h2><h3 id="1-get-函数介绍（⭐⭐）"><a href="#1-get-函数介绍（⭐⭐）" class="headerlink" title="1.$.get() 函数介绍（⭐⭐）"></a>1.$.get() 函数介绍（⭐⭐）</h3><p>用于发送 <code>get</code> 请求，获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.get(url, [data], [callback])<br></code></pre></td></tr></table></figure><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\get请求参数.png"></p><ul><li>$.get()发起不带参数的请求</li></ul><p>直接提供给 <strong>请求的 URL 地址</strong> 和 <strong>请求成功之后的回调函数</strong> 即可，示例代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 发送不带参数的get请求</span><br>           $.get(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>               <span class="hljs-comment">// 回调函数的小括号中定义的参数(随便写)就是获取到的数据</span><br>               <span class="hljs-built_in">console</span>.log(res);<br>           &#125;)<br></code></pre></td></tr></table></figure><ul><li><p>$.get()发起携带参数的请求</p><p>[data]传的内容必须是键值对的形式 可以是’id=1&amp;name=西游记’ 或者 推荐使用对象{id:1,name:西游记}</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$.get(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123;<br>                 id: <span class="hljs-number">1</span>,<br>                 name:<span class="hljs-string">&#x27;西游记&#x27;</span><br>             &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>                 <span class="hljs-built_in">console</span>.log(res);<br>             &#125;)<br></code></pre></td></tr></table></figure><h3 id="2-post-函数介绍（⭐⭐）"><a href="#2-post-函数介绍（⭐⭐）" class="headerlink" title="2.$.post() 函数介绍（⭐⭐）"></a>2.$.post() 函数介绍（⭐⭐）</h3><p>用来发起<code>post</code>请求，从而向服务器提交数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.post(url,  [data],  [callback])<br></code></pre></td></tr></table></figure><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\post请求参数.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  发送post请求 添加图书</span><br>            $.post(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;<br>                    bookname: <span class="hljs-string">&#x27;123&#x27;</span>,<br>                    author: <span class="hljs-string">&#x27;赵德芳&#x27;</span>,<br>                    publisher: <span class="hljs-string">&#x27;人民教育出版色&#x27;</span><br>                &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(res);<br>                &#125;)<br>                <span class="hljs-comment">// post传递的参数也支持字符串形式 &#x27;键=值&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="get-和-post-请求的区别-面试"><a href="#get-和-post-请求的区别-面试" class="headerlink" title="get 和 post 请求的区别 (面试)"></a>get 和 post 请求的区别 (面试)</h3><ol><li><p>get 请求发送的参数放在 url 中, post 参数放在 请求体 中, 相对安全</p></li><li><p>get 请求会被缓存到浏览器, post 不会被缓存</p></li><li><p>get 请求的参数有长度限制, post 发送数据量比 get 大, 且支持发送二进制数据</p></li></ol><h3 id="3-ajax-函数介绍（⭐⭐⭐）"><a href="#3-ajax-函数介绍（⭐⭐⭐）" class="headerlink" title="3.$.ajax() 函数介绍（⭐⭐⭐）"></a>3.<code>$.ajax()</code> 函数介绍（⭐⭐⭐）</h3><p>综合了get和post的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$.ajax(&#123;<br>       url:  请求地址,<br>       method: 请求方式,<span class="hljs-comment">//get post 大小写无所谓</span><br>       data: 请求参数,<span class="hljs-comment">//对象</span><br>       success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123; <span class="hljs-comment">// 请求成功的回调函数 &#125;</span><br>     &#125;)<br></code></pre></td></tr></table></figure><h2 id="八、接口"><a href="#八、接口" class="headerlink" title="八、接口"></a>八、接口</h2><h3 id="1-接口的概念（⭐⭐⭐）"><a href="#1-接口的概念（⭐⭐⭐）" class="headerlink" title="1.接口的概念（⭐⭐⭐）"></a>1.接口的概念（⭐⭐⭐）</h3><p>使用 <code>Ajax</code> 请求数据时，被请求的 <code>URL</code> 地址，就叫做 数据接口（简称<strong>接口</strong>）。同时，每个接口必须有请求方式。</p><ul><li>GET方式请求接口的过程</li></ul><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\get方式请求接口过程.png"></p><ul><li>POST方式请求接口的过程</li></ul><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第一天\images\post请求接口过程.png"></p><h3 id="2-接口文档（⭐⭐⭐）"><a href="#2-接口文档（⭐⭐⭐）" class="headerlink" title="2.接口文档（⭐⭐⭐）"></a>2.接口文档（⭐⭐⭐）</h3><p>项目接口的说明文档, 它是我们调用接口的依据. 前端人员根据接口文档中规定的 url 地址，请求参数等进行调用，后端人员负责维护接口返回的数据</p><h3 id="3-接口文档规范"><a href="#3-接口文档规范" class="headerlink" title="3.接口文档规范"></a>3.接口文档规范</h3><p>   一个规范的接口文档通常包含下列 5 部分：</p><ol><li><p>接口名称: 说明接口功能</p></li><li><p>接口的 URL 地址</p></li><li><p>接口的请求方式: get, post</p></li><li><p>接口的请求参数格式: 参数名称, 参数类型, 参数是否必选, 含义说明</p></li><li><p>接口的响应的详细描述: 返回的数据名称, 数据类型, 含义说明</p></li><li><p>接口的返回示例</p></li></ol><h2 id="九、图书管理案例"><a href="#九、图书管理案例" class="headerlink" title="九、图书管理案例"></a>九、图书管理案例</h2><p>类似的案例三个步骤</p><ul><li><p>封装获取列表并渲染到页面的方法  </p><p>(1)用$.ajax获取 在回调函数里用if判断是否获取成功</p><p>(2)渲染之前可以先用empty清空数据 再用模板字符串+append或者调用模板引擎template()方法+append</p><p>(3)封装好了 在页面加载的时候先调用一下</p></li><li><p>添加数据的事件</p></li></ul><p>​     (1)可以给按钮绑定点击事件 也可以给 表单域绑定submit提交事件</p><p>​     (2)防止提交后页面跳转或数据刷新 要加e.preventDefault()方法 禁用默认行为</p><p>​     (3)用$.ajax获取 在回调函数里用if判断是否添加成功</p><p>​     (4)成功后 再次调用渲染到页面的方法  并使用<code>DOM原生</code>的reset()方法清空表单里的内容</p><ul><li>删除数据的事件</li></ul><p>​     (1)可以给删除按钮或a链接绑定点击事件</p><p>​     (2)用$.ajax获取 在回调函数里用if判断是否添加成功</p><p>​     (3)如果$.ajax里面data的值涉及到id在页面上没有渲染出来  </p><p>​          那么可以提前在模板字符串里面的a标签加上data-id=’res.id’自定义属性</p><p>​          或者在模板引擎中的模板里面的a标签加上data-id=”</p>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax第三天</title>
    <link href="/2021/02/09/Ajax/Ajax%E7%AC%AC03%E5%A4%A9/"/>
    <url>/2021/02/09/Ajax/Ajax%E7%AC%AC03%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第三天"><a href="#Ajax第三天" class="headerlink" title="Ajax第三天"></a>Ajax第三天</h1><h2 id="一、XMLHttpRequest的基本使用"><a href="#一、XMLHttpRequest的基本使用" class="headerlink" title="一、XMLHttpRequest的基本使用"></a>一、<code>XMLHttpRequest</code>的基本使用</h2><h3 id="1-什么是XMLHttpRequest"><a href="#1-什么是XMLHttpRequest" class="headerlink" title="1.什么是XMLHttpRequest"></a>1.什么是XMLHttpRequest</h3><p>浏览器为我们提供的一个内置对象(构造函数), 通过它我们可以向服务器发送请求, 并接受响应</p><p> $.ajax() 请求方法底层就是 jQuery 封装这个对象的一系列方法来实现的</p><h3 id="2-使用原生-XMLHttpRequest-发送GET请求的步骤-（⭐⭐⭐）"><a href="#2-使用原生-XMLHttpRequest-发送GET请求的步骤-（⭐⭐⭐）" class="headerlink" title="2.使用原生 XMLHttpRequest 发送GET请求的步骤  （⭐⭐⭐）"></a>2.使用原生 XMLHttpRequest 发送GET请求的步骤  （⭐⭐⭐）</h3><p>(1)构建 xhr 实例对象</p><p>(2)初始化请求 open(请求方式,url地址)</p><p>(3)发送请求  send()</p><p>(4)监听请求状态, 获取响应的数据 onreadystatechange事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1.new 创建实例对象</span><br>     <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>     <span class="hljs-comment">// 2.初始化请求 open(请求方式,url地址)</span><br>     xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);<br>     <span class="hljs-comment">// 3.发送请求  send()</span><br>     xhr.send();<br>     <span class="hljs-comment">// 4.监听请求状态, 获取响应的数据  onreadystatechange事件</span><br>     xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-comment">// 判断是否请求成功 固定写法</span><br>         <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>             <span class="hljs-comment">// 获取服务器响应的数据 .responseText</span><br>             <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>         &#125;<br>     &#125;;<br>     <span class="hljs-comment">// 4.拓展方法  onload事件  表示请求已经完成了</span><br>     <span class="hljs-comment">// xhr.addEventListener(&#x27;load&#x27;, function() &#123;</span><br>     <span class="hljs-comment">//     console.log(xhr.responseText);</span><br>     <span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><h4 id="2-1-了解xhr对象的readyState属性"><a href="#2-1-了解xhr对象的readyState属性" class="headerlink" title="2.1 了解xhr对象的readyState属性"></a>2.1 了解<code>xhr</code>对象的<code>readyState</code>属性</h4><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC03%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第三天\images\readyState属性.png"></p><h4 id="2-2-发送带参数的GET请求"><a href="#2-2-发送带参数的GET请求" class="headerlink" title="2.2 发送带参数的GET请求"></a>2.2 发送带参数的GET请求</h4><p>在open()方法的时候 把参数按键值对字符串的形式拼接到 url 后面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.实例对象</span><br>       <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>       <span class="hljs-comment">// 2.初始化请求</span><br>       xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get?id=1000&#x27;</span>);<br>       <span class="hljs-comment">// 3.发送请求</span><br>       xhr.send();<br>       <span class="hljs-comment">// 4.监听请求状态</span><br>       xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-comment">// 判断是否请求成功</span><br>           <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>               <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-查询参数"><a href="#2-3-查询参数" class="headerlink" title="2.3 查询参数"></a>2.3 查询参数</h4><p>我们在 url 末尾添加的以 ? 开头的参数，叫做查询参数</p><ul><li>特征：格式符合键值对的格式，多个键值对之间使用 &amp; 符号进行连接</li><li>作用：(1)多个页面之间传递数据,从登录页跳转到首页，显示登录名(location.search)   (2)给服务器发送 get 请求的数据</li></ul><h3 id="3-URL的编码和解码"><a href="#3-URL的编码和解码" class="headerlink" title="3.URL的编码和解码"></a>3.URL的编码和解码</h3><h4 id="3-1什么是URL编码"><a href="#3-1什么是URL编码" class="headerlink" title="3.1什么是URL编码"></a>3.1什么是URL编码</h4><p>浏览器中的 URL 中只允许出现字符, 符号和数字, 不允许出现汉字, 如果出现需要对其进行编码</p><p><strong>编码的规则</strong>：使用字母，数字和特殊符号对其他字符(如汉字)进行编码</p><h4 id="3-2-浏览器内置的URL编码和解码方法"><a href="#3-2-浏览器内置的URL编码和解码方法" class="headerlink" title="3.2 浏览器内置的URL编码和解码方法"></a>3.2 浏览器内置的URL编码和解码方法</h4><blockquote><p>encodeURI(参数) 对参数进行 URI 编码</p><p>decodeURI(参数) 对参数进行 URI 解码</p></blockquote><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC03%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第三天\images\编码和解码.png"></p><p><strong>由于浏览器会自动对 URL 地址进行编码操作，因此，大多数情况下，程序员不需要关心 URL 地址的编码与解码操作</strong></p><h3 id="4-使用xhr发起POST请求（⭐⭐⭐）"><a href="#4-使用xhr发起POST请求（⭐⭐⭐）" class="headerlink" title="4.使用xhr发起POST请求（⭐⭐⭐）"></a>4.使用<code>xhr</code>发起<code>POST</code>请求（⭐⭐⭐）</h3><p>(1)构建 xhr 实例对象</p><p>(2)初始化请求 open(请求方式,url地址)</p><p>(3)设置post请求参数的编码方式      固定写法<code>.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)</code></p><p>(4)发送请求  send() 并传递键值对字符串</p><p>(4)监听请求状态, 获取响应的数据   onreadystatechange事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.实例化对象</span><br>      <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>      <span class="hljs-comment">// 2.初始化请求  open()</span><br>      xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>);<br>      <span class="hljs-comment">// 3.设置post请求参数的编码方式</span><br>      xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br>      <span class="hljs-comment">// 4.发送post请求时，要传递键值对字符串</span><br>      xhr.send(<span class="hljs-string">&#x27;bookname=蓝皮书1&amp;author=tom1&amp;publisher=3344&#x27;</span>);<br>      <span class="hljs-comment">// 5.监听请求状态</span><br>      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 判断是否请求成功</span><br>          <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>              <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="5-数据交换格式"><a href="#5-数据交换格式" class="headerlink" title="5.数据交换格式"></a>5.数据交换格式</h3><p>客户端和服务端之间进行数据传输时, 需要使用公共的数据格式. JSON 是前后端开发中最常用的一种轻量级数据交换格式,</p><p> 除此之外还有 XML 这种带有语义化的数据格式</p><h3 id="6-JSON（⭐⭐⭐）"><a href="#6-JSON（⭐⭐⭐）" class="headerlink" title="6.JSON（⭐⭐⭐）"></a>6.JSON（⭐⭐⭐）</h3><p><strong>什么是JSON</strong>：JSON 可以理解为 js 中<b style="color:red">对象的字符串表示法, 本质上还是一个字符串</b></p><p><strong>JSON数据格式的注意</strong> ：</p><p>(1)属性名必须使用双引号包裹</p><p>(2)字符串类型的值必须使用双引号包裹    所以数字 布尔值 null 可以不用双引号</p><p>(3)最后一个属性后不能有逗号</p><p>(4)属性值或数组元素可以是 number数字, string字符串, boolean布尔值, array数组, null, object对象 6种 但不能是 undefined 和 function</p><p>(5)不能在 json 中填写注释</p><p>(6)因为JSON本质是字符串 所以在定义JSON字符串时 外层要使用单引号’’包裹  如<code>var json=&#39;&#123;.............&#125;&#39;</code></p><p><img src="/2021/02/09/Ajax/Ajax%E7%AC%AC03%E5%A4%A9/Users\ytt5023\Desktop\笔记\Ajax\第三天\images\json对象格式.png"></p><h3 id="7-JSON和对象的互相转换（⭐⭐⭐）"><a href="#7-JSON和对象的互相转换（⭐⭐⭐）" class="headerlink" title="7.JSON和对象的互相转换（⭐⭐⭐）"></a>7.JSON和对象的互相转换（⭐⭐⭐）</h3><blockquote><p>JSON.stringify() 方法： 把js对象 转成 json字符串 (序列化)</p><p>JSON.parse() 方法：json字符串数据 转成 js 对象 (反序列化)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 定义 js 对象</span><br>       <span class="hljs-keyword">var</span> obj = &#123;<br>           bookname: <span class="hljs-string">&#x27;js高级&#x27;</span>,<br>           author: <span class="hljs-string">&#x27;zaka&#x27;</span>,<br>           money: <span class="hljs-string">&#x27;79rmb&#x27;</span><br>       &#125;;<br>       <span class="hljs-comment">// 2. 定义 json 字符串</span><br>       <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#123;&quot;bookname&quot;:&quot;js高级&quot;,&quot;author&quot;:&quot;zaka&quot;,&quot;money&quot;:&quot;79rmb&quot;&#125;&#x27;</span><br>           <span class="hljs-comment">// 3. js 对象 转成 json 字符串 (序列化)</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(obj));<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(obj) === str); <span class="hljs-comment">//true</span><br>       <span class="hljs-comment">// 4. json字符串数据 转成 js 对象 (反序列化)</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(str));<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(str) === obj); <span class="hljs-comment">//false</span><br>       <span class="hljs-comment">// 5. 把服务器返回的 json 字符串解析成 js对象 格式</span><br>       <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>       xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span>);<br>       xhr.send();<br>       xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>                   <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>                   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(xhr.responseText));<br>               &#125;<br>           &#125;<br>           <span class="hljs-comment">// 总结：JSON.stringify() JSON.parse()</span><br>           <span class="hljs-comment">// 1. rodolist本地存储，只能存储字符串格式的数据 所以要用JSON.stringify()转成字符串 也叫序列化</span><br>           <span class="hljs-comment">// 2.JS高级 深拷贝：JSON.parse(JSON.stringify(obj))//生成的是一个新对象</span><br>           <span class="hljs-comment">// 把服务器返回的json字符串解析成JS对象格式 JSON.parse()</span><br></code></pre></td></tr></table></figure><h3 id="8-封装自己的Ajax函数（⭐⭐⭐）"><a href="#8-封装自己的Ajax函数（⭐⭐⭐）" class="headerlink" title="8.封装自己的Ajax函数（⭐⭐⭐）"></a>8.封装自己的Ajax函数（⭐⭐⭐）</h3><p><strong>使用自己封装的 ajax 发送 get 请求或post 请求</strong></p><h4 id="8-1-首先封装一个把参数对象data-转成键值对形式的字符串的函数方法"><a href="#8-1-首先封装一个把参数对象data-转成键值对形式的字符串的函数方法" class="headerlink" title="8.1 首先封装一个把参数对象data 转成键值对形式的字符串的函数方法"></a>8.1 首先封装一个把参数对象data 转成键值对形式的字符串的函数方法</h4><ul><li>定义空数组</li><li>遍历对象</li><li>把键k和值data[k]用=号连接 用push()方法添加到数组里</li><li>用join方法 把数组里的数据通过&amp;连接 并返回字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseData</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.定义一个空数组</span><br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-comment">// 2.遍历对象</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;<br>        <span class="hljs-comment">// 3.把键k和值data[k]用=号连接 添加到数组里</span><br>        arr.push(k + <span class="hljs-string">&#x27;=&#x27;</span> + data[k]);<br>    &#125;<br>    <span class="hljs-comment">// 4.用join方法 把数组里的数据通过&amp;连接 并返回字符串</span><br>    <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-2-封装一个自己的ajax函数"><a href="#8-2-封装一个自己的ajax函数" class="headerlink" title="8.2 封装一个自己的ajax函数"></a>8.2 封装一个自己的ajax函数</h4><ul><li>参数option用来接收发送ajax的参数</li><li>获取对象里的数据 用拓展运算符</li><li>new 创建实例对象</li><li>判断请求类型 get还是 post    使用.toUpperCase()方法转换成大写</li><li>监听请求状态   .onreadystatechange()事件</li><li>判断是否请求成功</li><li>成功的话 将获取到的JSON字符串用JSON.pares()方法转换成对象</li><li>最后把对象传给 success里的函数 log出这个对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 参数option用来接收发送ajax的参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myAjax</span>(<span class="hljs-params">option</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取对象里的数据 用拓展运算符</span><br>    <span class="hljs-keyword">var</span> &#123; url, method, data, success &#125; = option;<br>    <span class="hljs-comment">// 创建实例对象</span><br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 判断请求类型 get还是post  .toUpperCase()方法转换成大写</span><br>    <span class="hljs-keyword">if</span> (method.toUpperCase() == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>        xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, url + <span class="hljs-string">&#x27;?&#x27;</span> + parseData(data));<br>        xhr.send()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.toUpperCase() == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>        xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, url);<br>        <span class="hljs-comment">// 设置post请求参数的编码方式</span><br>        xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br>        xhr.send(parseData(data))<br>    &#125;<br>    <span class="hljs-comment">// 监听请求状态</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 判断是否请求成功</span><br>        <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText)<br>                <span class="hljs-comment">// 传给success里面的函数 log打印出来</span><br>            success(res)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax第四天</title>
    <link href="/2021/02/09/Ajax/Ajax%E7%AC%AC04%E5%A4%A9/"/>
    <url>/2021/02/09/Ajax/Ajax%E7%AC%AC04%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="同源策略-⭐⭐⭐"><a href="#同源策略-⭐⭐⭐" class="headerlink" title="同源策略(⭐⭐⭐)"></a>同源策略(⭐⭐⭐)</h1><h2 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h2><p>如果两个页面的协议，域名和端口都相同，则两个页面具有<strong>相同的源</strong>。</p><p>例如，下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a> 页面的同源检测：</p><p><img src="/images/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5.png"></p><h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h2><p><strong>同源策略</strong>（英文全称 Same origin policy）是<strong>浏览器</strong>提供的一个<strong>安全功能</strong></p><p><strong><code>MDN</code> 官方给定的概念</strong>：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这</p><p>是一个用于隔离潜在恶意文件的重要安全机制</p><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><p>① 无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p><p>② 无法接触非同源网页的 DOM</p><p>③ 无法向非同源地址发送 Ajax 请求</p><h1 id="跨域-⭐⭐⭐"><a href="#跨域-⭐⭐⭐" class="headerlink" title="跨域(⭐⭐⭐)"></a>跨域(⭐⭐⭐)</h1><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p><strong>同源</strong>指的是两个 URL 的协议、域名、端口一致，反之，则是<strong>跨域</strong></p><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互</p><p>网页：<code>http://www.test.com/index.html</code></p><p>接口：<code>http://www.api.com/userlist</code></p><h2 id="浏览器对跨域请求的拦截"><a href="#浏览器对跨域请求的拦截" class="headerlink" title="浏览器对跨域请求的拦截"></a>浏览器对跨域请求的拦截</h2><p><img src="/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B7%A8%E5%9F%9F%E6%8B%A6%E6%88%AA.png"></p><p><strong>注意：</strong>浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p><h2 id="如何实现跨域数据请求"><a href="#如何实现跨域数据请求" class="headerlink" title="如何实现跨域数据请求"></a>如何实现跨域数据请求</h2><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <code>JSONP</code> 和 <code>CORS</code>。</p><p><strong><code>JSONP</code>：</strong>出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。<strong>缺点</strong>是只支持 <code>GET</code> 请求，不支持 <code>POST</code> 请求。</p><p><strong><code>CORS</code>：</strong>出现的较晚，它是 <code>W3C</code> 标准，属于跨域 <code>Ajax</code> 请求的根本解决方案。支持 <code>GET</code> 和 <code>POST</code> 请求。<strong>缺点</strong>是不兼容某些低版本的浏览器</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><code>JSONP</code></h1><h2 id="什么是JSONP-⭐⭐⭐"><a href="#什么是JSONP-⭐⭐⭐" class="headerlink" title="什么是JSONP(⭐⭐⭐)"></a>什么是<code>JSONP</code>(⭐⭐⭐)</h2><p><code>JSONP</code> (<code>JSON with Padding</code>) 是 <code>JSON</code> 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p><h2 id="JSONP的实现原理-⭐⭐⭐"><a href="#JSONP的实现原理-⭐⭐⭐" class="headerlink" title="JSONP的实现原理(⭐⭐⭐)"></a><code>JSONP</code>的实现原理(⭐⭐⭐)</h2><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签不受浏览器同</p><p>源策略的影响，可以通过 <code>src</code> 属性，请求非同源的 <code>js</code> 脚本。</p><p>因此，<code>JSONP</code> 的实现原理，就是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，请求跨域的数据接口，并通过<strong>函数调用</strong>的形式，接收跨域接口响应回来的数据</p><h2 id="自己实现一个简单的JSONP"><a href="#自己实现一个简单的JSONP" class="headerlink" title="自己实现一个简单的JSONP"></a>自己实现一个简单的<code>JSONP</code></h2><p>定义一个<code>success</code>回调函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取到了data数据：&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data)</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过 <code>&lt;script&gt;</code> 标签，请求接口数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax.frontend.itheima.net:3006/api/jsonp?callback=success&amp;name=zs&amp;a</span></span><br><span class="hljs-tag"><span class="hljs-string">ge=20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JSONP的缺点"><a href="#JSONP的缺点" class="headerlink" title="JSONP的缺点"></a><code>JSONP</code>的缺点</h2><p>由于 <code>JSONP</code> 是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，来实现跨域数据获取的，所以，<code>JSONP</code> 只支持 <code>GET</code> 数据请求，不支持 POST 请求。</p><p><strong>注意：</strong> <strong><code>JSONP</code> 和 Ajax 之间没有任何关系</strong>，不能把 <code>JSONP</code> 请求数据的方式叫做 Ajax，因为 <code>JSONP</code> 没有用到</p><p><code>XMLHttpRequest</code> 这个对象</p><h2 id="jQuery中的JSONP"><a href="#jQuery中的JSONP" class="headerlink" title="jQuery中的JSONP"></a><code>jQuery</code>中的<code>JSONP</code></h2><p><code>jQuery</code> 提供的 <code>$.ajax()</code> 函数，除了可以发起真正的 <code>Ajax</code> 数据请求之外，还能够发起 <code>JSONP</code> 数据请求，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>     url: <span class="hljs-string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,<br>     <span class="hljs-comment">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span><br>     dataType: <span class="hljs-string">&#x27;jsonp&#x27;</span>,<br>     success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(res)<br>     &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>默认情况下，使用 <code>jQuery</code> 发起 <code>JSONP</code> 请求，会自动携带一个 c<code>allback=jQueryxxx</code> 的参数，<code>jQueryxxx</code> 是随机生成的一个回调函数名称</p><h3 id="自定义参数及回调函数名称"><a href="#自定义参数及回调函数名称" class="headerlink" title="自定义参数及回调函数名称"></a>自定义参数及回调函数名称</h3><p>在使用 <code>jQuery</code> 发起 <code>JSONP</code> 请求时，如果想要自定义 <code>JSONP</code> 的<strong>参数</strong>以及<strong>回调函数名称</strong>，可以通过如下两个参数来指定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>     url: <span class="hljs-string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,<br>     dataType: <span class="hljs-string">&#x27;jsonp&#x27;</span>,<br>     <span class="hljs-comment">// 发送到服务端的参数名称，默认值为 callback</span><br>     jsonp: <span class="hljs-string">&#x27;callback&#x27;</span>,<br>     <span class="hljs-comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span><br>     jsonpCallback: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>     success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(res)<br>     &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="jQuery中JSONP的实现过程"><a href="#jQuery中JSONP的实现过程" class="headerlink" title="jQuery中JSONP的实现过程"></a><code>jQuery</code>中<code>JSONP</code>的实现过程</h3><p><code>jQuery</code> 中的 <code>JSONP</code>，也是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性实现跨域数据访问的，只不过，<code>jQuery</code> 采用的是<strong>动态创建和移除标签</strong>的方式，来发起 <code>JSONP</code> 数据请求。</p><ul><li><p>在发起 <code>JSONP</code> 请求的时候，动态向 <code>&lt;header&gt;</code> 中 append 一个 <code>&lt;script&gt;</code> 标签；</p></li><li><p>在 <code>JSONP</code> 请求成功以后，动态从 <code>&lt;header&gt;</code> 中移除刚才 <code>append</code> 进去的 <code>&lt;script&gt;</code> 标签；</p></li></ul><h1 id="案例-–-淘宝搜索"><a href="#案例-–-淘宝搜索" class="headerlink" title="案例 – 淘宝搜索"></a><strong>案例</strong> <strong>–</strong> 淘宝搜索</h1><h2 id="要实现的UI效果"><a href="#要实现的UI效果" class="headerlink" title="要实现的UI效果"></a>要实现的<code>UI</code>效果</h2><p><img src="/images/%E6%B7%98%E5%AE%9D%E6%90%9C%E7%B4%A2%E6%A1%88%E4%BE%8B.png"></p><h2 id="获取用户输入的搜索关键词"><a href="#获取用户输入的搜索关键词" class="headerlink" title="获取用户输入的搜索关键词"></a>获取用户输入的搜索关键词</h2><p>为了获取到用户每次按下键盘输入的内容，需要监听输入框的 <code>keyup</code> 事件，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听文本框的 keyup 事件</span><br>$(<span class="hljs-string">&#x27;#ipt&#x27;</span>).on(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// 获取用户输入的内容</span><br>     <span class="hljs-keyword">var</span> keywords = $(<span class="hljs-built_in">this</span>).val().trim()<br>     <span class="hljs-comment">// 判断用户输入的内容是否为空</span><br>     <span class="hljs-keyword">if</span> (keywords.length &lt;= <span class="hljs-number">0</span>) &#123;<br>     <span class="hljs-keyword">return</span><br>     &#125;<br>     <span class="hljs-comment">// TODO：获取搜索建议列表</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="封装getSuggestList函数"><a href="#封装getSuggestList函数" class="headerlink" title="封装getSuggestList函数"></a>封装<code>getSuggestList</code>函数</h2><p>将获取搜索建议列表的代码，封装到 <code>getSuggestList</code> 函数中，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSuggestList</span>(<span class="hljs-params">kw</span>) </span>&#123;<br>     $.ajax(&#123;<br>     <span class="hljs-comment">// 指定请求的 URL 地址，其中，q 是用户输入的关键字</span><br>     url: <span class="hljs-string">&#x27;https://suggest.taobao.com/sug?q=&#x27;</span> + kw,<br>     <span class="hljs-comment">// 指定要发起的是 JSONP 请求</span><br>     dataType: <span class="hljs-string">&#x27;jsonp&#x27;</span>,<br>     <span class="hljs-comment">// 成功的回调函数</span><br>     success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123; <span class="hljs-built_in">console</span>.log(res) &#125;<br>     &#125;)<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="渲染建议列表的UI结构"><a href="#渲染建议列表的UI结构" class="headerlink" title="渲染建议列表的UI结构"></a>渲染建议列表的<code>UI</code>结构</h2><h3 id="定义搜索建议列表"><a href="#定义搜索建议列表" class="headerlink" title="定义搜索建议列表"></a>定义搜索建议列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- tab 栏区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 搜索区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 搜索建议列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;suggest-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义模板结构"><a href="#定义模板结构" class="headerlink" title="定义模板结构"></a>定义模板结构</h3><ul><li>创建<code>script</code>标签</li><li>设置<code>type</code>属性为 <code>text/html</code> 设置模板<code>id</code></li><li>利用 <code>each</code> 遍历结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 模板结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tpl-suggestList&quot;</span>&gt;</span><br><span class="handlebars"><span class="xml">     </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name"><span class="hljs-builtin-name">each</span></span> result&#125;&#125;</span></span><br><span class="handlebars"><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;suggest-item&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$value</span>[0]&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">     </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义渲染模板结构的函数"><a href="#定义渲染模板结构的函数" class="headerlink" title="定义渲染模板结构的函数"></a>定义渲染模板结构的函数</h3><ul><li>定义函数，接收一个参数，就是服务器返回的数据</li><li>判断返回的数据长度是否大于0</li><li>如果没有，将页面的列表清空，并且进行隐藏</li><li>如果有数据，调用模板的 <code>template</code> 函数，传入<code>id</code>和数据</li><li>返回渲染好的<code>html</code>字符串，然后放入容器中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">// 渲染建议列表</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderSuggestList</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-comment">// 如果没有需要渲染的数据，则直接 return</span><br>     <span class="hljs-keyword">if</span> (res.result.length &lt;= <span class="hljs-number">0</span>) &#123;<br>     <span class="hljs-keyword">return</span> $(<span class="hljs-string">&#x27;#suggest-list&#x27;</span>).empty().hide()<br>     &#125;<br>     <span class="hljs-comment">// 渲染模板结构</span><br>     <span class="hljs-keyword">var</span> htmlStr = template(<span class="hljs-string">&#x27;tpl-suggestList&#x27;</span>, res)<br>     $(<span class="hljs-string">&#x27;#suggest-list&#x27;</span>).html(htmlStr).show()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="搜索关键词为空时隐藏搜索建议列表"><a href="#搜索关键词为空时隐藏搜索建议列表" class="headerlink" title="搜索关键词为空时隐藏搜索建议列表"></a>搜索关键词为空时隐藏搜索建议列表</h2><ul><li>注册<code>keyup</code>事件</li><li>判断输入框的内容是否为空</li><li>如果为空隐藏列表</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#ipt&#x27;</span>).on(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// 获取用户输入的内容</span><br>     <span class="hljs-keyword">var</span> keywords = $(<span class="hljs-built_in">this</span>).val().trim()<br>     <span class="hljs-comment">// 判断用户输入的内容是否为空</span><br>     <span class="hljs-keyword">if</span> (keywords.length &lt;= <span class="hljs-number">0</span>) &#123;<br>     <span class="hljs-comment">// 如果关键词为空，则清空后隐藏搜索建议列表</span><br>     <span class="hljs-keyword">return</span> $(<span class="hljs-string">&#x27;#suggest-list&#x27;</span>).empty().hide()<br>     &#125;<br>     getSuggestList(keywords)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="防抖-amp-节流"><a href="#防抖-amp-节流" class="headerlink" title="防抖&amp;节流"></a>防抖&amp;节流</h1><h2 id="输入框防抖"><a href="#输入框防抖" class="headerlink" title="输入框防抖"></a>输入框防抖</h2><h3 id="什么是防抖-⭐⭐⭐"><a href="#什么是防抖-⭐⭐⭐" class="headerlink" title="什么是防抖(⭐⭐⭐)"></a>什么是防抖(⭐⭐⭐)</h3><p><strong>防抖策略</strong>（<code>debounce</code>）是当事件被触发后，延迟 <code>n</code> 秒后再执行回调，如果在这 <code>n</code> 秒内事件又被触发，则重新计时。</p><p><img src="/images/%E9%98%B2%E6%8A%96.png"></p><p><strong>好处：</strong>能够保证用户在频繁触发某些事件的时候，不会频繁的执行回调，只会被执行一次</p><h3 id="防抖的应用场景"><a href="#防抖的应用场景" class="headerlink" title="防抖的应用场景"></a>防抖的应用场景</h3><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减</p><p>少请求次数，节约请求资源；</p><h3 id="实现输入框的防抖"><a href="#实现输入框的防抖" class="headerlink" title="实现输入框的防抖"></a>实现输入框的防抖</h3><ul><li>防抖动的 timer</li><li>定义防抖的函数，函数里面定义一个延时器，在演示器里面调用发起<code>JSONP</code>的请求</li><li>在触发 <code>keyup</code> 事件时，立即清空 <code>timer</code>，然后调用防抖的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span> <span class="hljs-comment">// 1. 防抖动的 timer</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounceSearch</span>(<span class="hljs-params">keywords</span>) </span>&#123; <span class="hljs-comment">// 2. 定义防抖的函数</span><br>     timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// 发起 JSONP 请求</span><br>     getSuggestList(keywords)<br>     &#125;, <span class="hljs-number">500</span>)<br> &#125;<br>$(<span class="hljs-string">&#x27;#ipt&#x27;</span>).on(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 3. 在触发 keyup 事件时，立即清空 timer</span><br> <span class="hljs-built_in">clearTimeout</span>(timer)<br> <span class="hljs-comment">// ...省略其他代码</span><br> debounceSearch(keywords)<br> &#125;)<br></code></pre></td></tr></table></figure><h3 id="缓存搜索的建议列表"><a href="#缓存搜索的建议列表" class="headerlink" title="缓存搜索的建议列表"></a>缓存搜索的建议列表</h3><h4 id="定义全局缓存对象"><a href="#定义全局缓存对象" class="headerlink" title="定义全局缓存对象"></a>定义全局缓存对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 缓存对象</span><br><span class="hljs-keyword">var</span> cacheObj = &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="将搜索结果保存到缓存对象中"><a href="#将搜索结果保存到缓存对象中" class="headerlink" title="将搜索结果保存到缓存对象中"></a>将搜索结果保存到缓存对象中</h4><ul><li>键就是用户输入的关键字，值就是服务器返回的value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 渲染建议列表</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderSuggestList</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-comment">// ...省略其他代码</span><br>     <span class="hljs-comment">// 将搜索的结果，添加到缓存对象中</span><br>     <span class="hljs-keyword">var</span> k = $(<span class="hljs-string">&#x27;#ipt&#x27;</span>).val().trim()<br>     cacheObj[k] = res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="优先从缓存中获取搜索建议"><a href="#优先从缓存中获取搜索建议" class="headerlink" title="优先从缓存中获取搜索建议"></a>优先从缓存中获取搜索建议</h4><ul><li>在发起请求之前，先判断缓存中是否有数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听文本框的 keyup 事件</span><br>$(<span class="hljs-string">&#x27;#ipt&#x27;</span>).on(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// ...省略其他代码</span><br>     <span class="hljs-comment">// 优先从缓存中获取搜索建议</span><br>     <span class="hljs-keyword">if</span> (cacheObj[keywords]) &#123;<br>     <span class="hljs-keyword">return</span> renderSuggestList(cacheObj[keywords])<br>     &#125;<br>     <span class="hljs-comment">// 获取搜索建议列表</span><br>     debounceSearch(keywords)<br> &#125;)<br></code></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><h3 id="什么是节流-⭐⭐⭐"><a href="#什么是节流-⭐⭐⭐" class="headerlink" title="什么是节流(⭐⭐⭐)"></a>什么是节流(⭐⭐⭐)</h3><p><strong>节流策略</strong>（<code>throttle</code>），顾名思义，可以减少一段时间内事件的触发频率。</p><p><img src="/images/%E8%8A%82%E6%B5%81.png"></p><h3 id="节流的应用场景"><a href="#节流的应用场景" class="headerlink" title="节流的应用场景"></a>节流的应用场景</h3><p>① 鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p><p>② 懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</p><h3 id="节流案例-–-鼠标跟随效果"><a href="#节流案例-–-鼠标跟随效果" class="headerlink" title="节流案例 – 鼠标跟随效果"></a><strong>节流案例</strong> <strong>–</strong> 鼠标跟随效果</h3><h4 id="UI效果"><a href="#UI效果" class="headerlink" title="UI效果"></a><code>UI</code>效果</h4><p><img src="/images/%E5%A4%A9%E4%BD%BFUI%E6%95%88%E6%9E%9C.png"></p><h4 id="渲染UI结构并美化样式"><a href="#渲染UI结构并美化样式" class="headerlink" title="渲染UI结构并美化样式"></a>渲染<code>UI</code>结构并美化样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- UI 结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./assets/angel.gif&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;angel&quot;</span> /&gt;</span><br>/* CSS 样式 */<br>html, body &#123;<br> margin: 0;<br> padding: 0;<br> overflow: hidden; &#125;<br>#angel &#123;<br> position: absolute; &#125;<br></code></pre></td></tr></table></figure><h4 id="不使用节流时实现鼠标跟随效果"><a href="#不使用节流时实现鼠标跟随效果" class="headerlink" title="不使用节流时实现鼠标跟随效果"></a>不使用节流时实现鼠标跟随效果</h4><ul><li>获取图片元素</li><li>注册 <code>mousemove</code>事件</li><li>设置图片的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// 获取图片元素</span><br>     <span class="hljs-keyword">var</span> angel = $(<span class="hljs-string">&#x27;#angel&#x27;</span>)<br>     <span class="hljs-comment">// 监听文档的 mousemove 事件</span><br>     $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>     <span class="hljs-comment">// 设置图片的位置</span><br>     $(angel).css(<span class="hljs-string">&#x27;left&#x27;</span>, e.pageX + <span class="hljs-string">&#x27;px&#x27;</span>).css(<span class="hljs-string">&#x27;top&#x27;</span>, e.pageY + <span class="hljs-string">&#x27;px&#x27;</span>)<br>     &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="节流阀的概念"><a href="#节流阀的概念" class="headerlink" title="节流阀的概念"></a>节流阀的概念</h4><p>高铁卫生间是否被占用，由红绿灯控制，红灯表示被占用，绿灯表示可使用。</p><p>假设每个人上卫生间都需要花费5分钟，则五分钟之内，被占用的卫生间无法被其他人使用。</p><p>上一个人使用完毕后，需要将红灯<strong>重置</strong>为绿灯，表示下一个人可以使用卫生间。</p><p>下一个人在上卫生间之前，需要<strong>先判断控制灯</strong>是否为绿色，来知晓能否上卫生间。</p><p>节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作。</p><p>当前操作执行完，必须将节流阀<strong>重置</strong>为空，表示可以执行下次操作了。</p><p>每次执行操作前，必须<strong>先判断节流阀是否为空</strong>。</p><h4 id="使用节流优化鼠标跟随效果"><a href="#使用节流优化鼠标跟随效果" class="headerlink" title="使用节流优化鼠标跟随效果"></a>使用节流优化鼠标跟随效果</h4><ul><li>预定义一个 timer <strong>节流阀</strong></li><li>当设置了鼠标跟随效果后，<strong>清空</strong> <strong>timer</strong> <strong>节流阀</strong>，方便下次开启延时器</li><li>执行事件的时候判断<strong>节流阀</strong>是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> angel = $(<span class="hljs-string">&#x27;#angel&#x27;</span>)<br>     <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span> <span class="hljs-comment">// 1.预定义一个 timer 节流阀</span><br>     $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>     <span class="hljs-keyword">if</span> (timer) &#123; <span class="hljs-keyword">return</span> &#125; <span class="hljs-comment">// 3.判断节流阀是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</span><br>     timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     $(angel).css(<span class="hljs-string">&#x27;left&#x27;</span>, e.pageX + <span class="hljs-string">&#x27;px&#x27;</span>).css(<span class="hljs-string">&#x27;top&#x27;</span>, e.pageY + <span class="hljs-string">&#x27;px&#x27;</span>)<br>     timer = <span class="hljs-literal">null</span> <span class="hljs-comment">// 2.当设置了鼠标跟随效果后，清空 timer 节流阀，方便下次开启延时器</span><br>     &#125;, <span class="hljs-number">16</span>)<br>     &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="总结防抖和节流的区别"><a href="#总结防抖和节流的区别" class="headerlink" title="总结防抖和节流的区别"></a>总结防抖和节流的区别</h2><ul><li><p><strong>防抖</strong>：如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略！</p></li><li><p><strong>节流</strong>：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax第五天</title>
    <link href="/2021/02/09/Ajax/Ajax%E7%AC%AC05%E5%A4%A9/"/>
    <url>/2021/02/09/Ajax/Ajax%E7%AC%AC05%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h1><h2 id="什么是通信"><a href="#什么是通信" class="headerlink" title="什么是通信"></a>什么是通信</h2><p>通信，就是<strong>信息的传递和交换</strong>。</p><p>通信三要素：</p><ul><li><p>通信的主体</p></li><li><p>通信的内容</p></li><li><p>通信的方式</p></li></ul><h3 id="现实生活中的通信"><a href="#现实生活中的通信" class="headerlink" title="现实生活中的通信"></a>现实生活中的通信</h3><p>案例：<strong>张三</strong>要把自己考上传智专修学院的好消息写信告诉自己的好朋友<strong>李四</strong></p><p><strong>其中：</strong></p><p>通信的<strong>主体</strong>是张三和李四；</p><p>通信的<strong>内容</strong>是考上传智专修学院；</p><p>通信的<strong>方式</strong>是写信；</p><h3 id="互联网中的通信"><a href="#互联网中的通信" class="headerlink" title="互联网中的通信"></a><strong>互联网中的通信</strong></h3><p><strong>案例：</strong>服务器把传智专修学院的简介通过响应的方式发送给客户端浏览器。</p><p>其中，</p><p>通信的<strong>主体</strong>是服务器和客户端浏览器；</p><p>通信的<strong>内容</strong>是传智专修学院的简介；</p><p>通信的<strong>方式</strong>是响应；</p><h2 id="什么是通信协议"><a href="#什么是通信协议" class="headerlink" title="什么是通信协议"></a>什么是通信协议</h2><p><strong>通信协议</strong>（<code>Communication Protocol</code>）是指通信的双方完成通信所<strong>必须遵守</strong>的<strong>规则和约定</strong>。</p><p><strong>通俗的理解：</strong>通信双方采用约定好的格式来发送和接收消息，这种<strong>事先约定好的通信格式，就叫做通信协议</strong>。</p><h3 id="现实生活中的通信协议"><a href="#现实生活中的通信协议" class="headerlink" title="现实生活中的通信协议"></a>现实生活中的通信协议</h3><p>张三与李四采用写信的方式进行通信，在填写信封时，写信的双方需要遵守固定的规则。<strong>信封的填写规则</strong>就是一种通信协议</p><p><img src="/images/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.png"></p><h3 id="互联网中的通信协议"><a href="#互联网中的通信协议" class="headerlink" title="互联网中的通信协议"></a>互联网中的通信协议</h3><p>客户端与服务器之间要实现网页内容的传输，则通信的双方必须遵守网页内容的传输协议。</p><p>网页内容又叫做<strong>超文本</strong>，因此网页内容的传输协议又叫做<strong>超文本传输协议</strong>（HyperText Transfer Protocol） ，</p><p>简称 <strong>HTTP 协议</strong>。</p><h2 id="HTTP-⭐⭐⭐"><a href="#HTTP-⭐⭐⭐" class="headerlink" title="HTTP(⭐⭐⭐)"></a>HTTP(⭐⭐⭐)</h2><h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><p><strong>HTTP 协议</strong>即超文本传送协议 (<code>HyperText Transfer Protocol</code>) ，它规定了客户端与服务器之间进行网页内容传输时，所必须遵守的传输格式。</p><p><strong>例如：</strong></p><ul><li><p>客户端要以HTTP协议要求的格式把数据提交到服务器</p></li><li><p>服务器要以HTTP协议要求的格式把内容响应给客户端</p></li></ul><h3 id="HTTP协议的交互模型"><a href="#HTTP协议的交互模型" class="headerlink" title="HTTP协议的交互模型"></a>HTTP协议的交互模型</h3><p>HTTP 协议采用了 <strong>请求/响应</strong> 的交互模型。</p><p><img src="/images/http%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.png"></p><h1 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h1><h2 id="什么是HTTP请求消息"><a href="#什么是HTTP请求消息" class="headerlink" title="什么是HTTP请求消息"></a>什么是HTTP请求消息</h2><p>由于 <code>HTTP</code> 协议属于客户端浏览器和服务器之间的通信协议。因此，客户端发起的请求叫做 <strong>HTTP 请求</strong>，客户</p><p>端发送到服务器的消息，叫做 <strong>HTTP 请求消息</strong>。</p><p><strong>注意：</strong><code>HTTP</code> 请求消息又叫做 <code>HTTP</code> 请求报文</p><h2 id="HTTP请求消息的组成部分-⭐⭐⭐"><a href="#HTTP请求消息的组成部分-⭐⭐⭐" class="headerlink" title="HTTP请求消息的组成部分(⭐⭐⭐)"></a>HTTP请求消息的组成部分(⭐⭐⭐)</h2><p><code>HTTP</code> 请求消息由请求行（<code>request line</code>）、请求头部（ <code>header</code> ） 、空行 和 请求体 4 个部分组成。</p><p><img src="/images/%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png"></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p><strong>请求行</strong>由<strong>请求方式</strong>、<strong>URL</strong> 和 <strong>HTTP 协议版本</strong> 3 个部分组成，他们之间使用空格隔开。</p><p><img src="/images/%E8%AF%B7%E6%B1%82%E8%A1%8C.png"></p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p><strong>请求头部</strong>用来描述客户端的基本信息，从而把客户端相关的信息告知服务器。比如：User-Agent 用来说明当前是什么类型的浏览器；</p><p><code>Content-Type</code> 用来描述发送到服务器的数据格式；Accept 用来描述客户端能够接收什么类型的返回内容；<code>Accept-Language</code> 用来描述客户端期望接收哪种人类语言的文本内容。</p><p>请求头部由多行 <strong>键/值对</strong> 组成，每行的键和值之间用英文的冒号分隔</p><p><img src="/images/%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8.png"></p><h4 id="请求头部-–-常见的请求头字段"><a href="#请求头部-–-常见的请求头字段" class="headerlink" title="请求头部 – 常见的请求头字段"></a>请求头部 – 常见的请求头字段</h4><p><img src="/images/%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E5%A4%B4.png"></p><p><img src="/images/%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%A4%BA%E4%BE%8B.png"></p><p>关于更多请求头字段的描述，可以查看 <code>MDN</code> 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>最后一个请求头字段的后面是一个<strong>空行</strong>，通知服务器<strong>请求头部至此结束</strong>。</p><p>请求消息中的<strong>空行</strong>，用来分隔请求头部与请求体</p><p><img src="/images/%E7%A9%BA%E8%A1%8C.png"></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体中存放的，是要通过 <code>POST</code> 方式提交到服务器的数据。</p><p><img src="/images/%E8%AF%B7%E6%B1%82%E4%BD%93.png"></p><p><strong>注意</strong>：只有 <code>POST</code> 请求才<strong>有请求体</strong>，<code>GET</code> 请求<strong>没有请求体</strong>！</p><h1 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h1><h2 id="什么是HTTP响应消息"><a href="#什么是HTTP响应消息" class="headerlink" title="什么是HTTP响应消息"></a>什么是HTTP响应消息</h2><p><strong>响应消息</strong>就是服务器响应给客户端的消息内容，也叫作<strong>响应报文</strong>。</p><h2 id="HTTP响应消息的组成部分-⭐⭐⭐"><a href="#HTTP响应消息的组成部分-⭐⭐⭐" class="headerlink" title="HTTP响应消息的组成部分(⭐⭐⭐)"></a>HTTP响应消息的组成部分(⭐⭐⭐)</h2><p>HTTP响应消息由<strong>状态行</strong>、<strong>响应头部</strong>、<strong>空行</strong> 和 <strong>响应体</strong> 4 个部分组成，如下图所示：</p><p><img src="/images/%E7%9B%B8%E5%BA%94%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png"></p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p><strong>状态行</strong>由 <strong>HTTP 协议版本</strong>、<strong>状态码</strong>和<strong>状态码的描述文本</strong> 3 个部分组成，他们之间使用空格隔开</p><p><img src="/images/%E7%9B%B8%E5%BA%94%E7%BB%84%E6%88%90%E7%A4%BA%E4%BE%8B.png"></p><h3 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h3><p><strong>响应头部</strong>用来描述<strong>服务器的基本信息</strong>。响应头部由多行 <strong>键/值对</strong> 组成，每行的键和值之间用英文的冒号分隔。</p><p><img src="/images/%E7%9B%B8%E5%BA%94%E5%A4%B4%E9%83%A8.png"></p><h3 id="响应头部-–-常见的响应头字段"><a href="#响应头部-–-常见的响应头字段" class="headerlink" title="响应头部 – 常见的响应头字段"></a>响应头部 – 常见的响应头字段</h3><p><img src="/images/%E7%9B%B8%E5%BA%94%E5%A4%B4%E9%83%A8%E5%B8%B8%E8%A7%81%E5%AD%97%E6%AE%B5.png"></p><p>关于更多响应头字段的描述，可以查看 <code>MDN</code> 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p><h3 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h3><p>在最后一个响应头部字段结束之后，会紧跟一个<strong>空行</strong>，用来通知客户端<strong>响应头部至此结束</strong>。</p><p>响应消息中的空行，用来分隔<strong>响应头部</strong>与<strong>响应体</strong>。</p><p><img src="/images/%E7%9B%B8%E5%BA%94%E7%A9%BA%E8%A1%8C.png"></p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体中存放的，是服务器响应给客户端的资源内容。</p><p><img src="/images/%E5%93%8D%E5%BA%94%E4%BD%93.png"></p><h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><h2 id="什么是HTTP请求方法"><a href="#什么是HTTP请求方法" class="headerlink" title="什么是HTTP请求方法"></a>什么是HTTP请求方法</h2><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明<strong>要对服务器上的资源执行的操作</strong>。最常用的请求方法是 <code>GET</code> 和 <code>POST</code>。</p><h2 id="HTTP的请求方法-⭐⭐⭐"><a href="#HTTP的请求方法-⭐⭐⭐" class="headerlink" title="HTTP的请求方法(⭐⭐⭐)"></a>HTTP的请求方法(⭐⭐⭐)</h2><p><img src="/images/http%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F.png"></p><h1 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h1><h2 id="什么是HTTP响应状态码"><a href="#什么是HTTP响应状态码" class="headerlink" title="什么是HTTP响应状态码"></a>什么是HTTP响应状态码</h2><p><strong>HTTP 响应状态码</strong>（<code>HTTP Status Code</code>），也属于 <code>HTTP</code> 协议的一部分，用来标识响应的状态。</p><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次</p><p><code>HTTP</code> 请求的结果是成功还是失败了。</p><p><img src="/images/http%E7%9B%B8%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.png"></p><h2 id="HTTP响应状态码的组成及分类"><a href="#HTTP响应状态码的组成及分类" class="headerlink" title="HTTP响应状态码的组成及分类"></a>HTTP响应状态码的组成及分类</h2><p>HTTP 状态码由<strong>三个十进制数字组成</strong>，<strong>第一个十进制数字定义了状态码的类型</strong>，后两个数字<strong>用来对状态码进行细分</strong>。</p><p>HTTP 状态码共分为 5 种类型：</p><p><img src="/images/%E7%8A%B6%E6%80%81%E7%A0%81.png"></p><p>完整的 HTTP 响应状态码，可以参考 <code>MDN</code> 官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><h2 id="常见的HTTP响应状态码-⭐⭐⭐"><a href="#常见的HTTP响应状态码-⭐⭐⭐" class="headerlink" title="常见的HTTP响应状态码(⭐⭐⭐)"></a>常见的HTTP响应状态码(⭐⭐⭐)</h2><h3 id="2-成功相关的响应状态码"><a href="#2-成功相关的响应状态码" class="headerlink" title="2** 成功相关的响应状态码"></a>2** 成功相关的响应状态码</h3><p>2** 范围的状态码，表示服务器已成功接收到请求并进行处理。常见的 2** 类型的状态码如下：</p><p><img src="/images/200%E7%B3%BB%E5%88%97.png"></p><h3 id="3-重定向相关的响应状态码"><a href="#3-重定向相关的响应状态码" class="headerlink" title="3** 重定向相关的响应状态码"></a>3** 重定向相关的响应状态码</h3><p>3** 范围的状态码，表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。常见的 3** 类型的状态码如下：</p><p><img src="/images/300%E7%B3%BB%E5%88%97.png"></p><h3 id="4-客户端错误相关的响应状态码"><a href="#4-客户端错误相关的响应状态码" class="headerlink" title="4** 客户端错误相关的响应状态码"></a>4** 客户端错误相关的响应状态码</h3><p>4** 范围的状态码，表示客户端的请求有非法内容，从而导致这次请求失败。常见的 4** 类型的状态码如下：</p><p><img src="/images/400%E7%B3%BB%E5%88%97.png"></p><h3 id="5-服务端错误相关的响应状态码"><a href="#5-服务端错误相关的响应状态码" class="headerlink" title="5** 服务端错误相关的响应状态码"></a>5** 服务端错误相关的响应状态码</h3><p>5** 范围的状态码，表示服务器未能正常处理客户端的请求而出现意外错误。常见的 5** 类型的状态码如下</p><p><img src="/images/500%E7%B3%BB%E5%88%97.png"></p>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 高级第一天</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC01%E5%A4%A9/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC01%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>##一、面向对象与面向过程</p><h3 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1.面向对象"></a>1.面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li><li>易于维护、拓展，耦合性低；适用场景：多人合作的复杂项目</li></ul><h3 id="2-面向过程"><a href="#2-面向过程" class="headerlink" title="2.面向过程"></a>2.面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现， 使用的时候再一个一个的依次调用就可以了。</li><li>不易于维护、拓展，耦合性高；适用场景：简单的功能模块</li></ul><h2 id="二、面向对象的三个特性"><a href="#二、面向对象的三个特性" class="headerlink" title="二、面向对象的三个特性"></a>二、面向对象的三个特性</h2><h3 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1.封装性"></a>1.封装性</h3><p>把公共的特征提取出来，封装在一个模板中</p><h3 id="2-继承性："><a href="#2-继承性：" class="headerlink" title="2.继承性："></a>2.继承性：</h3><p>类进行实例化，得到的具体的对象</p><h3 id="3-多态性："><a href="#3-多态性：" class="headerlink" title="3.多态性："></a>3.多态性：</h3><p>生成多个对象</p><h2 id="三、对象与类"><a href="#三、对象与类" class="headerlink" title="三、对象与类"></a>三、对象与类</h2><h3 id="1-什么是对象"><a href="#1-什么是对象" class="headerlink" title="1.什么是对象"></a>1.什么是对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h3 id="2-什么是类-class"><a href="#2-什么是类-class" class="headerlink" title="2.什么是类 class"></a>2.什么是类 class</h3><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实 例化对象。</p><h3 id="3-如何定义一个类"><a href="#3-如何定义一个类" class="headerlink" title="3.如何定义一个类"></a>3.如何定义一个类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>        <span class="hljs-comment">// 构造函数: 定义公共的属性</span><br>        <span class="hljs-title">constructor</span> (<span class="hljs-params">参数</span>) &#123; <br>          <span class="hljs-built_in">this</span>.属性名 = 属性值<br>        &#125;<br><br>        <span class="hljs-comment">// 类方法: 定义公共的行为</span><br>        方法名<span class="hljs-number">1</span> (参数) &#123;  &#125;<br>        方法名<span class="hljs-number">2</span> (参数) &#123;  &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.创建 人 类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, sex, height</span>)</span> &#123;<br>                    <span class="hljs-built_in">this</span>.name = name;<br>                    <span class="hljs-built_in">this</span>.age = age;<br>                    <span class="hljs-built_in">this</span>.sex = sex;<br>                    <span class="hljs-built_in">this</span>.height = height<br>                &#125;<br> <span class="hljs-comment">// 定义类上的公共方法，多个类方法之间不允许加,号</span><br>            <span class="hljs-function"><span class="hljs-title">buy</span>(<span class="hljs-params">book</span>)</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;买了一本&#x27;</span> + book);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 2.实例化people 创建对象</span><br>        <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">175</span>);<br>        <span class="hljs-keyword">var</span> xh = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">165</span>);<br>        xm.buy(<span class="hljs-string">&#x27;红楼梦&#x27;</span>);<br>        xh.buy(<span class="hljs-string">&#x27;水浒传&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(xm, xh);<br></code></pre></td></tr></table></figure><h3 id="4-注意要点"><a href="#4-注意要点" class="headerlink" title="4.注意要点"></a>4.注意要点</h3><ul><li> class 创建的类首字母还是要大写</li><li>类中的 constructor 构造函数, 接收 new 创建对象传递的参数，并返回实例对象（return this）</li><li> new 一个类时，自动调用构造函数方法，但不会自动调用类方法</li><li> 类中的构造函数 和 类方法不需要加 function （重点）</li><li>多个类方法之间不需要使用逗号隔开 (重点)</li></ul><h3 id="5-类的继承-extends"><a href="#5-类的继承-extends" class="headerlink" title="5.类的继承  extends"></a>5.类的继承  extends</h3><ul><li>定义一个类（子类）通过 extends 继承父类上的方法和属性</li><li>写法：class 子类名 extends 父类 {}</li><li>super 关键字可以访问和调用父类上的函数，包括构造函数和类方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义了父类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>                <span class="hljs-built_in">this</span>.x = x;<br>                <span class="hljs-built_in">this</span>.y = y;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//子元素通过extends继承父类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>                <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//调用了父类的方法  如果子父存在同名的方法，就近使用子类的</span><br>        son.sum(); <span class="hljs-comment">//结果为3</span><br></code></pre></td></tr></table></figure><h5 id="5-1-类的继承注意点"><a href="#5-1-类的继承注意点" class="headerlink" title="5.1 类的继承注意点"></a>5.1 类的继承注意点</h5><ul><li>子类调用方法时的查找顺序：先从子类上找再从父类上找</li><li>super 作为一个函数，可以调用父类的构造函数；作为一个对象，可以调用父类的方法</li><li>子类中使用 this 之前，必须要先调用 super</li><li>子类可以拓展自己的属性和方法</li></ul><h3 id="6-补充的注意点和this指向"><a href="#6-补充的注意点和this指向" class="headerlink" title="6.补充的注意点和this指向"></a>6.补充的注意点和this指向</h3><ul><li>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li><li>在类中访问属性和方法，必须加 this</li><li>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.<ul><li>constructor中的this指向的是new出来的实例对象</li><li>自定义的方法,一般也指向的new出来的实例对象</li><li>绑定事件之后this指向的就是触发事件的事件源</li></ul></li></ul><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC01%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第1天\imgs\Snipaste_2021-01-04_10-30-58.png" alt="Snipaste_2021-01-04_10-30-58"></p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 高级第二天</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级第二天"><a href="#JS高级第二天" class="headerlink" title="JS高级第二天"></a>JS高级第二天</h1><h2 id="一、构造函数和原型"><a href="#一、构造函数和原型" class="headerlink" title="一、构造函数和原型"></a>一、构造函数和原型</h2><h3 id="1-创建对象的三种方式-—–-复习"><a href="#1-创建对象的三种方式-—–-复习" class="headerlink" title="1.创建对象的三种方式 —– 复习"></a>1.创建对象的三种方式 —– 复习</h3><ul><li>字面量方式  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure><ul><li>new关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure><ul><li>构造函数方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h3 id="2-实例成员和静态成员"><a href="#2-实例成员和静态成员" class="headerlink" title="2.实例成员和静态成员"></a>2.实例成员和静态成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">uname, age, sex</span>) </span>&#123;<br>          <span class="hljs-built_in">this</span>.uname = uname<br>          <span class="hljs-built_in">this</span>.age = age<br>          <span class="hljs-built_in">this</span>.sex = sex<br>          <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;在唱歌&#x27;</span>);<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="2-1实例成员"><a href="#2-1实例成员" class="headerlink" title="2.1实例成员"></a>2.1实例成员</h5><p>把在this上添加的属性和方法 叫做实例成员 只能通过实例对象才能访问的属性或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(xm.uname); <span class="hljs-comment">//可以访问</span><br><span class="hljs-built_in">console</span>.log(Man.uname); <span class="hljs-comment">//不可以访问 undefined</span><br></code></pre></td></tr></table></figure><h5 id="2-2静态成员"><a href="#2-2静态成员" class="headerlink" title="2.2静态成员"></a>2.2静态成员</h5><p>给构造函数添加的属性和方法 叫做静态成员 只能通过构造函数本身才能访问的属性或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">Man.height = <span class="hljs-string">&#x27;170&#x27;</span> <span class="hljs-comment">//给Man添加一个hight属性</span><br><span class="hljs-built_in">console</span>.log(Man.height); <span class="hljs-comment">//可以访问</span><br><span class="hljs-built_in">console</span>.log(xm.height); <span class="hljs-comment">//不可以访问 undefined</span><br></code></pre></td></tr></table></figure><h3 id="3-构造函数的原型-prototype"><a href="#3-构造函数的原型-prototype" class="headerlink" title="3.构造函数的原型 prototype"></a>3.构造函数的原型 prototype</h3><h5 id="3-1-构造函数中直接添加方法的缺点"><a href="#3-1-构造函数中直接添加方法的缺点" class="headerlink" title="3.1 构造函数中直接添加方法的缺点"></a>3.1 构造函数中直接添加方法的缺点</h5><p>   每次创建对象，要重复开辟内存空间，浪费资源 </p><h5 id="3-2-构造函数的原型-prototype"><a href="#3-2-构造函数的原型-prototype" class="headerlink" title="3.2 构造函数的原型 prototype"></a>3.2 构造函数的原型 prototype</h5><ul><li><p>每个函数默认都有一个 propotype 属性, 它的值默认是一个对象</p></li><li><p>在 prototype 对象上的方法和属性, 会被 new 构造函数() 创建出来的实例对象所继承</p></li></ul><h5 id="3-3-注意"><a href="#3-3-注意" class="headerlink" title="3.3 注意:"></a>3.3 注意:</h5><ul><li><p>只要是函数就默认有 prototype 属性, 但非函数的对象是不具有的</p></li><li><p>定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p></li></ul><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第2天\imgs\Snipaste_2021-01-04_10-53-21.png"></p><h3 id="4-对象的原型-proto"><a href="#4-对象的原型-proto" class="headerlink" title="4.对象的原型  proto"></a>4.对象的原型  <strong>proto</strong></h3><h4 id="4-1对象的原型"><a href="#4-1对象的原型" class="headerlink" title="4.1对象的原型"></a>4.1对象的原型</h4><p>每个对象都默认有一个 <strong>proto</strong> 的属性, 它的值是一个对象, 默认指向创建这个对象的构造函数的原型</p><h4 id="4-2对象原型的访问特点"><a href="#4-2对象原型的访问特点" class="headerlink" title="4.2对象原型的访问特点"></a>4.2对象原型的访问特点</h4><p>每个对象访问 <strong>proto</strong> 下的所有属性和方法，可以省略<strong>proto</strong></p><h4 id="4-3对象上读取属性的顺序"><a href="#4-3对象上读取属性的顺序" class="headerlink" title="4.3对象上读取属性的顺序"></a>4.3对象上读取属性的顺序</h4><p>先从自身的属性上进行查找，如果没有再去 <strong>proto</strong> 属性指向的对象上去查找</p><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第2天\imgs\Snipaste_2021-01-04_11-19-46.png"></p><h3 id="5-constructor构造函数"><a href="#5-constructor构造函数" class="headerlink" title="5.constructor构造函数"></a>5.constructor构造函数</h3><ul><li>每个构造函数的原型上默认都有一个constructor属性，指向构造函数</li><li>作用：constructor帮助我们判断这个对象是由谁创建出来的</li></ul><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第2天\imgs\Snipaste_2021-01-04_11-27-48.png"></p><h3 id="6-构造函数、对象原型、实例的三角关系"><a href="#6-构造函数、对象原型、实例的三角关系" class="headerlink" title="6.构造函数、对象原型、实例的三角关系"></a>6.构造函数、对象原型、实例的三角关系</h3><ul><li>实例对象是由构造函数创建的</li><li>构造函数有个默认的属性prototype 指向这个构造函数的原型对象</li><li>实例对象有个默认的属性 __proto杠杠 指向创建对象时构造函数的原型对象prototype</li><li>构造函数的原型对象有个默认的属性constructor 指向构造函数本身</li></ul><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第2天\imgs\三角关系.png"></p><h3 id="7-原型链"><a href="#7-原型链" class="headerlink" title="7.原型链"></a>7.原型链</h3><h5 id="7-1原型链的理解（面试常问）"><a href="#7-1原型链的理解（面试常问）" class="headerlink" title="7.1原型链的理解（面试常问）"></a>7.1原型链的理解（面试常问）</h5><p>每个实例对象（ object ）都有一个私有属性（称之为 __proto杠杠 ）指向创建它的构造函数的原型对象（prototype ）。</p><p> 该原型对象也有一个自己的原型对象( __proto杠杠 ) ，层层向上直到一个对象的原型对象为 null。</p><p> 注意: 根据定义，null 没有原型，并作为这个原型链中的最后一个环节 是原型链的终点</p><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC02%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第2天\imgs\Snipaste_2021-01-04_11-43-59.png"></p><h5 id="7-2对象访问属性时遵从原型链的顺序"><a href="#7-2对象访问属性时遵从原型链的顺序" class="headerlink" title="7.2对象访问属性时遵从原型链的顺序"></a>7.2对象访问属性时遵从原型链的顺序</h5><ul><li><p>当访问一个对象的属性时，首先从这个对象自身进行查找</p></li><li><p>如果没有找到就从它的原型对象（__proto杠杠）中查找</p></li><li><p>如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null 还找不到的话 默认结果是undefined</p></li></ul><h3 id="8-原型对象中的this指向"><a href="#8-原型对象中的this指向" class="headerlink" title="8.原型对象中的this指向"></a>8.原型对象中的this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p><h3 id="9-通过原型链拓展内置对象上的方法"><a href="#9-通过原型链拓展内置对象上的方法" class="headerlink" title="9.通过原型链拓展内置对象上的方法"></a>9.通过原型链拓展内置对象上的方法</h3><ul><li>如给数组添加求和方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-built_in">console</span>.log(arr.__proto__ === <span class="hljs-built_in">Array</span>.prototype);<br><span class="hljs-comment">// 给Array.prototype添加求和方法  注意：拓展原型对象上的方法时，不能直接覆盖原来的原型对象，只能添加或和修改方法</span><br><span class="hljs-built_in">Array</span>.prototype.getSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(this);//指向实例对象arr</span><br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>        sum += <span class="hljs-built_in">this</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-built_in">console</span>.log(arr.getSum());<br></code></pre></td></tr></table></figure><ul><li>注意：拓展原型对象上的方法时，不能直接覆盖原来的原型对象，只能添加或和修改方法</li></ul><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h3 id="1-call继承"><a href="#1-call继承" class="headerlink" title="1.call继承"></a>1.call继承</h3><ul><li>call()可以调用函数，并修改函数中 this 指向</li><li>格式： fn.call([参数1, 参数2,参数3…..])    参数1是修改后的this指向 </li><li>参数2,参数3.. 是正常调用函数传递的实参   使用逗号隔开连接 </li></ul><h3 id="2-子构造函数继承父构造函数中的属性"><a href="#2-子构造函数继承父构造函数中的属性" class="headerlink" title="2.子构造函数继承父构造函数中的属性"></a>2.子构造函数继承父构造函数中的属性</h3><ul><li>核心: 使用 call() 把父类的实例对象 this 手动修改为子类的实例对象 this</li></ul><h3 id="3-子构造函数继承父构造函数中的方法"><a href="#3-子构造函数继承父构造函数中的方法" class="headerlink" title="3.子构造函数继承父构造函数中的方法"></a>3.子构造函数继承父构造函数中的方法</h3><ul><li>核心: 新建一个对象作为子类的原型对象, 并把这个对象的原型指向父类的 prototype  </li><li>最后再用用constructor指回原构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用newFather重新开辟一个内存空间创建实例对象 他的__proto杠杠指向父函数的原型对象prototype 并且让他作为子函数的原型对象prototype</span><br>Son.prototype = <span class="hljs-keyword">new</span> Father()<br><span class="hljs-comment">//父函数的原型对象prototype中的constructor 肯定指向父函数  所以为了优化要把子函数的原型对象prototype中的constructor指回子函数</span><br>Son.prototype.constructor = Son<br></code></pre></td></tr></table></figure><h3 id="4-类的本质"><a href="#4-类的本质" class="headerlink" title="4.类的本质"></a>4.类的本质</h3><p>es6 之前构造函数的特点:</p><ol><li><p>构造函数默认有一个 prototype 属性, 它的值是一个对象</p></li><li><p>构造函数 prototype 属性下有 constructor 和 __proto杠杠 两个默认的属性</p></li><li><p>构造函数可以通过在 prototype 上添加方法, 去实现所有实例继承</p></li><li><p>构造函数创建的实例上 __proto杠杠指向创建它构造函数的 prototype</p></li></ol><p>class 类的本质其实就是一个改造版的构造函数</p><h2 id="三、ES5新增方法"><a href="#三、ES5新增方法" class="headerlink" title="三、ES5新增方法"></a>三、ES5新增方法</h2><h3 id="1-数组方法-forEach-fn-遍历数组"><a href="#1-数组方法-forEach-fn-遍历数组" class="headerlink" title="1.数组方法.forEach(fn)遍历数组"></a>1.数组方法.forEach(fn)遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>];<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">var</span> newArr = arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index,arr</span>) </span>&#123; <br>            <span class="hljs-comment">//这三个返回值的英文可以随便定义 返回的是固定的元素, 索引, 数组本身 数组本身用的很少 可以不写</span><br>            sum += item<br>        &#125;)<br>        <span class="hljs-built_in">console</span>.log(sum);<br>        <span class="hljs-built_in">console</span>.log(newArr); <span class="hljs-comment">//返回值：undefixed  只遍历</span><br></code></pre></td></tr></table></figure><ul><li><strong>注意：forEach方法只遍历数组，他的返回值是undefined</strong></li><li>会完整的遍历数组</li></ul><h3 id="2-数组方法filter-过滤数组"><a href="#2-数组方法filter-过滤数组" class="headerlink" title="2.数组方法filter()过滤数组"></a>2.数组方法filter()过滤数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>        <span class="hljs-keyword">var</span> newArr2 = arr2.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index</span>) </span>&#123;<br>            <span class="hljs-comment">// 如果return后面的结果为true 就把当前项item放到新数组newArr2里面</span><br>            <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-comment">//&amp;&amp; item &gt;= 6</span><br>        &#125;)<br>        <span class="hljs-built_in">console</span>.log(newArr2); <span class="hljs-comment">//返回值 新数组[2,4,6,8]</span><br></code></pre></td></tr></table></figure><ul><li>返回值：新数组</li><li>注意：filter结束后才会返回一个新数组  并不像for循环那样一个一个数返回出来 所以后面用indexof做题目的时候要注意 newArr2里面一直是空的  在filter结束后才会获得返回的新数组 </li><li>会完整的遍历数组</li></ul><h3 id="3-数组方法some"><a href="#3-数组方法some" class="headerlink" title="3.数组方法some()"></a>3.数组方法some()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>           <span class="hljs-comment">//是否有大于3的元素</span><br>       <span class="hljs-keyword">var</span> res = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">3</span><br>       &#125;)<br>       <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>查找数组中是否有符合条件的某一个元素</li><li>返回值：true(找到) || false(找不到)</li><li>遇到return true的话会终止遍历 (也就是遇到第一个符合条件的元素)</li></ul><h3 id="4-数组方法every"><a href="#4-数组方法every" class="headerlink" title="4.数组方法every()"></a>4.数组方法every()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>]<br><span class="hljs-comment">//判断数组中是否所有数字都大于 20</span><br><span class="hljs-keyword">var</span> res3 = arr3.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">20</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(res3); <span class="hljs-comment">//false  必须所有元素都满足条件</span><br></code></pre></td></tr></table></figure><ul><li>查找数组中是否所有的元素都符合条件</li><li>返回值：true || false (只有有一个不满足就返回 false)</li><li>遇到return false的话会终止遍历(也就是遇到第一个不符合条件的元素)</li></ul><h3 id="5-trim-去字符串两端空格"><a href="#5-trim-去字符串两端空格" class="headerlink" title="5.trim()去字符串两端空格"></a>5.trim()去字符串两端空格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 使用 trim() 方法去除字符串两端的空格</span><br>        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;     123      &#x27;</span>;<br>        str = str.trim();<br>        <span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><ul><li>去除字符串两端的空格</li></ul><h3 id="6-Object-keys-对象-获取到当前对象中的属性名"><a href="#6-Object-keys-对象-获取到当前对象中的属性名" class="headerlink" title="6.Object.keys(对象)获取到当前对象中的属性名"></a>6.Object.keys(对象)获取到当前对象中的属性名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>           id: <span class="hljs-number">1</span>,<br>           pname: <span class="hljs-string">&#x27;小米&#x27;</span>,<br>           price: <span class="hljs-number">1999</span>,<br>           num: <span class="hljs-number">2000</span><br>       &#125;;<br>       <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Object</span>.keys(obj)<br>       <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">//[id，pname,price,num]</span><br></code></pre></td></tr></table></figure><ul><li>获取到当前对象中的属性名</li><li>返回值：当前对象中所有属性名组成的数组</li></ul><h3 id="7-Object-definePropert-方法"><a href="#7-Object-definePropert-方法" class="headerlink" title="7.Object.definePropert()方法"></a>7.Object.definePropert()方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>           uname: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>           age: <span class="hljs-number">15</span>,<br>           sex: <span class="hljs-string">&#x27;男&#x27;</span><br>       &#125;;<br>       <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;height&#x27;</span>, &#123;<br>           value: <span class="hljs-number">175</span>,<br>           <span class="hljs-comment">// writable: true, //可以修改</span><br>           <span class="hljs-comment">// enumerable: false, //不可以枚举（遍历到）</span><br>           <span class="hljs-comment">// configurable: false //不可以删除或再次修改特性</span><br>       &#125;)<br>       obj.height = <span class="hljs-number">180</span><br>       <span class="hljs-built_in">console</span>.log(obj);<br></code></pre></td></tr></table></figure><ul><li>Object.defineProperty() 方法的作用：在对象上定义一个新属性，或者修改原属性，并返回对象</li><li>使用方法：Object.defineProperty(obj, prop, descriptor)<ol><li>obj: 要定义属性的对象</li><li> prop: 要定义或修改的属性的名称, 字符串 ‘XXX’</li><li>descriptor: 要定义或修改的属性描述符, 数据格式是对象 {}<ul><li> value: 属性值 </li><li>writable: 是否可以修改  默认false</li><li>enumerable: 是否可以枚举（遍历到）   默认false</li><li>configurable: 是否可以删除或再次修改特性   默认false</li></ul></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 高级第四天</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC04%E5%A4%A9/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC04%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级第04天"><a href="#JS高级第04天" class="headerlink" title="JS高级第04天"></a>JS高级第04天</h1><h2 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1.正则表达式概述"></a>1.正则表达式概述</h2><h3 id="1-1什么是正则表达式"><a href="#1-1什么是正则表达式" class="headerlink" title="1.1什么是正则表达式"></a>1.1什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p><h3 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</li><li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   /^[a-z0-9_-]{3,16}$/</li></ol><h2 id="2-正则表达式在js中的使用"><a href="#2-正则表达式在js中的使用" class="headerlink" title="2.正则表达式在js中的使用"></a>2.正则表达式在js中的使用</h2><h3 id="2-1正则表达式的创建"><a href="#2-1正则表达式的创建" class="headerlink" title="2.1正则表达式的创建"></a>2.1正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过调用RegExp对象的构造函数创建 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/123/</span>);<br><span class="hljs-built_in">console</span>.log(regexp);<br></code></pre></td></tr></table></figure><p>方式二：利用字面量创建 正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;<br></code></pre></td></tr></table></figure><h3 id="2-2测试正则表达式"><a href="#2-2测试正则表达式" class="headerlink" title="2.2测试正则表达式"></a>2.2测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-number">123</span>));<span class="hljs-comment">//匹配字符中是否出现123  出现结果为true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//匹配字符中是否出现123 未出现结果为false</span><br></code></pre></td></tr></table></figure><p><img src="/images/img4.png"></p><h2 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3.正则表达式中的特殊字符"></a>3.正则表达式中的特殊字符</h2><h3 id="3-1正则表达式的组成"><a href="#3-1正则表达式的组成" class="headerlink" title="3.1正则表达式的组成"></a>3.1正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p>[正则测试工具]( &lt;<a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a>)</p><h3 id="3-2边界符"><a href="#3-2边界符" class="headerlink" title="3.2边界符"></a>3.2边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/abc/</span>; <span class="hljs-comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span><br><span class="hljs-comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abcd&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------------&#x27;</span>);<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc/</span>;<br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------------&#x27;</span>);<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^abc$/</span>; <span class="hljs-comment">// 精确匹配 要求必须是 abc字符串才符合规范</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abcabc&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="3-3字符类"><a href="#3-3字符类" class="headerlink" title="3.3字符类"></a>3.3字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="3-3-1-方括号"><a href="#3-3-1-方括号" class="headerlink" title="3.3.1 [] 方括号"></a>3.3.1 [] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span>; <span class="hljs-comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;andy&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;baby&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;color&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;red&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-keyword">var</span> rg1 = <span class="hljs-regexp">/^[abc]$/</span>; <span class="hljs-comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span><br><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">&#x27;aa&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">&#x27;b&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">&#x27;c&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg1.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br>----------------------------------------------------------------------------------<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-z]$/</span> <span class="hljs-comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;z&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//false</span><br>-----------------------------------------------------------------------------------<br><span class="hljs-comment">//字符组合</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^[a-zA-Z0-9]$/</span>; <span class="hljs-comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span><br>------------------------------------------------------------------------------------<br><span class="hljs-comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span><br><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[^a-zA-Z0-9]$/</span>;<br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;B&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-number">8</span>));<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;!&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2量词符"><a href="#3-3-2量词符" class="headerlink" title="3.3.2量词符"></a>3.3.2量词符</h4><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="3-3-3用户名表单验证"><a href="#3-3-3用户名表单验证" class="headerlink" title="3.3.3用户名表单验证"></a>3.3.3用户名表单验证</h4><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li></ol><p><img src="/images/img2.png"></p><p><img src="/images/img1.png"></p><p>分析:</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li><li>首先准备好这种正则表达式模式/$[a-zA-Z0-9-_]{6,16}^/</li><li>当表单失去焦点就开始验证. </li><li>如果符合正则规范, 则让后面的span标签添加 right类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;uname&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>请输入用户名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br> &lt;script&gt;<br> <span class="hljs-comment">//  量词是设定某个模式出现的次数</span><br> <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="hljs-comment">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span><br> <span class="hljs-keyword">var</span> uname = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.uname&#x27;</span>);<br> <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;span&#x27;</span>);<br> uname.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-built_in">this</span>.value)) &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;正确的&#x27;</span>);<br>   span.className = <span class="hljs-string">&#x27;right&#x27;</span>;<br>   span.innerHTML = <span class="hljs-string">&#x27;用户名格式输入正确&#x27;</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;错误的&#x27;</span>);<br>   span.className = <span class="hljs-string">&#x27;wrong&#x27;</span>;<br>   span.innerHTML = <span class="hljs-string">&#x27;用户名格式输入不正确&#x27;</span>;<br>   &#125;<br> &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-3-4-括号总结"><a href="#3-3-4-括号总结" class="headerlink" title="3.3.4 括号总结"></a>3.3.4 括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符. </p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/">正则表达式在线测试</a></p><h3 id="3-4预定义类"><a href="#3-4预定义类" class="headerlink" title="3.4预定义类"></a>3.4预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p><p><img src="/images/img3.png"></p><p><strong>案例:验证座机号码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;<br></code></pre></td></tr></table></figure><p><strong>表单验证案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span><br><span class="hljs-comment">//验证通过与不通过更换元素的类名与元素中的内容</span><br> <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-built_in">this</span>.value)) &#123;<br>    <span class="hljs-comment">// console.log(&#x27;正确的&#x27;);</span><br>    <span class="hljs-built_in">this</span>.nextElementSibling.className = <span class="hljs-string">&#x27;success&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">// console.log(&#x27;不正确&#x27;);</span><br>      <span class="hljs-built_in">this</span>.nextElementSibling.className = <span class="hljs-string">&#x27;error&#x27;</span>;<br>      <span class="hljs-built_in">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt;格式不正确,请从新输入 &#x27;</span>;<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//QQ号验证: /^[1-9]\d&#123;4,&#125;$/; </span><br><span class="hljs-comment">//昵称验证:/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span><br><span class="hljs-comment">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">regexp</span>(<span class="hljs-params">ele, reg</span>) </span>&#123;<br>    ele.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (reg.test(<span class="hljs-built_in">this</span>.value)) &#123;<br>        <span class="hljs-comment">// console.log(&#x27;正确的&#x27;);</span><br>        <span class="hljs-built_in">this</span>.nextElementSibling.className = <span class="hljs-string">&#x27;success&#x27;</span>;<br>        <span class="hljs-built_in">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-comment">// console.log(&#x27;不正确&#x27;);</span><br>     <span class="hljs-built_in">this</span>.nextElementSibling.className = <span class="hljs-string">&#x27;error&#x27;</span>;<br>     <span class="hljs-built_in">this</span>.nextElementSibling.innerHTML = <span class="hljs-string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 格式不正确,请从新输入 &#x27;</span>;<br>            &#125;<br>        &#125;<br> &#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//密码验证:/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span><br><span class="hljs-comment">//再次输入密码只需匹配与上次输入的密码值 是否一致</span><br></code></pre></td></tr></table></figure><h3 id="3-5正则替换replace"><a href="#3-5正则替换replace" class="headerlink" title="3.5正则替换replace"></a>3.5正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;andy和red&#x27;</span>;<br><span class="hljs-keyword">var</span> newStr = str.replace(<span class="hljs-string">&#x27;andy&#x27;</span>, <span class="hljs-string">&#x27;baby&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(newStr)<span class="hljs-comment">//baby和red</span><br><span class="hljs-comment">//等同于 此处的andy可以写在正则表达式内</span><br><span class="hljs-keyword">var</span> newStr2 = str.replace(<span class="hljs-regexp">/andy/</span>, <span class="hljs-string">&#x27;baby&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(newStr2)<span class="hljs-comment">//baby和red</span><br><span class="hljs-comment">//全部替换</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abcabc&#x27;</span><br><span class="hljs-keyword">var</span> nStr = str.replace(<span class="hljs-regexp">/a/</span>,<span class="hljs-string">&#x27;哈哈&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(nStr) <span class="hljs-comment">//哈哈bcabc</span><br><span class="hljs-comment">//全部替换g</span><br><span class="hljs-keyword">var</span> nStr = str.replace(<span class="hljs-regexp">/a/</span>a,<span class="hljs-string">&#x27;哈哈&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(nStr) <span class="hljs-comment">//哈哈bc哈哈bc</span><br><span class="hljs-comment">//忽略大小写i</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;aAbcAba&#x27;</span>;<br><span class="hljs-keyword">var</span> newStr = str.replace(<span class="hljs-regexp">/a/gi</span>,<span class="hljs-string">&#x27;哈哈&#x27;</span>)<span class="hljs-comment">//&quot;哈哈哈哈bc哈哈b哈哈&quot;</span><br></code></pre></td></tr></table></figure><p><strong>案例:过滤敏感词汇</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;textarea name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;<span class="hljs-regexp">/textarea&gt; &lt;button&gt;提交&lt;/</span>button&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    div.innerHTML = text.value.replace(<span class="hljs-regexp">/激情|gay/g</span>, <span class="hljs-string">&#x27;**&#x27;</span>);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 高级第五天</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC05%E5%A4%A9/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC05%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p><img src="/images/es-version.png"></p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>     <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br> &#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a is not defined </span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>    tmp = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    <span class="hljs-keyword">let</span> tmp; <br>&#125; <br></code></pre></td></tr></table></figure><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i); <br>    &#125;<br>&#125;<br>arr[<span class="hljs-number">0</span>]();<br>arr[<span class="hljs-number">1</span>]();<br><br></code></pre></td></tr></table></figure><p><img src="/images/let%E9%9D%A2%E8%AF%95%E9%A2%98.png"></p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i); <br>    &#125;<br>&#125;<br>arr[<span class="hljs-number">0</span>]();<br>arr[<span class="hljs-number">1</span>]();<br><br></code></pre></td></tr></table></figure><p><img src="/images/let%E9%9D%A2%E8%AF%95%E9%A2%982.png"></p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>     <span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br> &#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span><br></code></pre></td></tr></table></figure><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI; <span class="hljs-comment">// Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;<br>PI = <span class="hljs-number">100</span>; <span class="hljs-comment">// Assignment to constant variable.</span><br><br><span class="hljs-keyword">const</span> ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];<br>ary[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>ary[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span><br>ary = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]; <span class="hljs-comment">// Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="/images/var&let&const%E5%8C%BA%E5%88%AB.png"></p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//1</span><br> <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">//2</span><br> <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">//3</span><br><span class="hljs-comment">//如果解构不成功，变量的值为undefined</span><br></code></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;; <br><span class="hljs-keyword">let</span> &#123; name, age &#125; = person;<br><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 20</span><br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge&#125; = person; <span class="hljs-comment">// myName myAge 属于别名</span><br><span class="hljs-built_in">console</span>.log(myName); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br><span class="hljs-built_in">console</span>.log(myAge); <span class="hljs-comment">// 20</span><br><br></code></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">() =&gt; &#123;&#125; <span class="hljs-comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;&#125;<span class="hljs-comment">//代表把一个函数赋值给fn</span><br></code></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> num1 + num2; <br>&#125;<br><span class="hljs-comment">//es6写法</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> num1 + num2; <br><br></code></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params">v</span>) </span>&#123;<br>     <span class="hljs-keyword">return</span> v;<br> &#125; <br><span class="hljs-comment">//es6写法</span><br> <span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<br><br></code></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125; <br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123; <br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//this 指向 是obj对象</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span><br>     &#125; <br> &#125; <br> <span class="hljs-keyword">const</span> resFn = fn.call(obj); <br> resFn();<br><br></code></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>age: <span class="hljs-number">20</span>,<br>say: <span class="hljs-function">() =&gt;</span> &#123;<br>alert(<span class="hljs-built_in">this</span>.age)<br>&#125;<br>&#125;<br><br>obj.say();<span class="hljs-comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span><br></code></pre></td></tr></table></figure><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">first, ...args</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(first); <span class="hljs-comment">// 10</span><br>     <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">// [20, 30] </span><br> &#125;<br> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br></code></pre></td></tr></table></figure><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> students = [<span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>];<br><span class="hljs-keyword">let</span> [s1, ...s2] = students; <br><span class="hljs-built_in">console</span>.log(s1);  <span class="hljs-comment">// &#x27;wangwu&#x27; </span><br><span class="hljs-built_in">console</span>.log(s2);  <span class="hljs-comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span><br><br></code></pre></td></tr></table></figure><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>...ary  <span class="hljs-comment">// 1, 2, 3</span><br><span class="hljs-built_in">console</span>.log(...ary);    <span class="hljs-comment">// 1 2 3,相当于下面的代码</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方法一 </span><br> <span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br> <span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];<br> <span class="hljs-comment">// 方法二 </span><br> ary1.push(...ary2);<br></code></pre></td></tr></table></figure><h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> oDivs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>); <br>oDivs = [...oDivs];<br></code></pre></td></tr></table></figure><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义一个集合</span><br><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    length: <span class="hljs-number">3</span><br>&#125;; <br><span class="hljs-comment">//转成数组</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arrayLike = &#123; <br>    <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;length&quot;</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">let</span> newAry = <span class="hljs-built_in">Array</span>.from(arrayLike, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item *<span class="hljs-number">2</span>)<span class="hljs-comment">//[2,4]</span><br><br></code></pre></td></tr></table></figure><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [&#123;<br>     id: <span class="hljs-number">1</span>,<br>     name: <span class="hljs-string">&#x27;张三&#x27;</span><br> &#125;, &#123; <br>     id: <span class="hljs-number">2</span>,<br>     name: <span class="hljs-string">&#x27;李四&#x27;</span><br> &#125;]; <br> <span class="hljs-keyword">let</span> target = ary.find(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item.id == <span class="hljs-number">2</span>);<span class="hljs-comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];<br><span class="hljs-keyword">let</span> index = ary.findIndex(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> value &gt; <span class="hljs-number">9</span>); <br><span class="hljs-built_in">console</span>.log(index); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>) <span class="hljs-comment">// true </span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">`zhangsan`</span>;<br><br></code></pre></td></tr></table></figure><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>; <br><span class="hljs-keyword">let</span> sayHello = <span class="hljs-string">`hello,my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>; <span class="hljs-comment">// hello, my name is zhangsan</span><br></code></pre></td></tr></table></figure><h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> result = &#123; <br>    name: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <br>    age: <span class="hljs-number">20</span>,<br>    sex: <span class="hljs-string">&#x27;男&#x27;</span> <br>&#125; <br><span class="hljs-keyword">let</span> html = <span class="hljs-string">` &lt;div&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">&lt;/div&gt; `</span>;<br><br></code></pre></td></tr></table></figure><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;<br> &#125;; <br> <span class="hljs-keyword">let</span> greet = <span class="hljs-string">`<span class="hljs-subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;<br> <span class="hljs-built_in">console</span>.log(greet); <span class="hljs-comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br>str.startsWith(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// true </span><br>str.endsWith(<span class="hljs-string">&#x27;!&#x27;</span>)       <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;x&#x27;</span>.repeat(<span class="hljs-number">3</span>)      <span class="hljs-comment">// &quot;xxx&quot; </span><br><span class="hljs-string">&#x27;hello&#x27;</span>.repeat(<span class="hljs-number">2</span>)  <span class="hljs-comment">// &quot;hellohello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br></code></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<span class="hljs-comment">//&#123;1, 2, 3, 4&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>s.add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>); <span class="hljs-comment">// 向 set 结构中添加值 </span><br>s.delete(<span class="hljs-number">2</span>)             <span class="hljs-comment">// 删除 set 结构中的2值   </span><br>s.has(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span><br>s.clear()               <span class="hljs-comment">// 清除 set 结构中的所有值</span><br><span class="hljs-comment">//注意：删除的是元素的值，不是代表的索引</span><br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(value))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 高级第六天</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC06%E5%A4%A9/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC06%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="一、ES6相关概念"><a href="#一、ES6相关概念" class="headerlink" title="一、ES6相关概念"></a>一、ES6相关概念</h2><h3 id="1-什么是ES6"><a href="#1-什么是ES6" class="headerlink" title="1.什么是ES6"></a>1.什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><h3 id="2-为什么使用ES6"><a href="#2-为什么使用ES6" class="headerlink" title="2.为什么使用ES6"></a>2.为什么使用ES6</h3><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="二、ES6新增语法"><a href="#二、ES6新增语法" class="headerlink" title="二、ES6新增语法"></a>二、ES6新增语法</h2><h3 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h3><h4 id="1-1-let的作用"><a href="#1-1-let的作用" class="headerlink" title="1.1 let的作用"></a>1.1 let的作用</h4><p>用来声明一个有块级作用域的变量，使用方法和 var 一样</p><h4 id="1-2-let的特点"><a href="#1-2-let的特点" class="headerlink" title="1.2 let的特点"></a>1.2 let的特点</h4><ul><li><p>只在声明时的块或子块中可用</p></li><li><p> 不存在变量提升，只能先声明再使用</p></li><li><p>存在“暂存死区”</p><ul><li><p>只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，</p><p>   只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC06%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第6天\imgs\Snipaste_2021-01-06_20-25-49.png" alt="Snipaste_2021-01-06_20-25-49"></p></li></ul></li><li><p>同一作用域下不能重复声明同一变量</p></li><li><p>声明的变量不会挂载在 window 对象上 </p></li></ul><h3 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h3><p>const声明的是一个常量，常量就是值（内存地址）不能变化的量</p><h4 id="2-1-const的特点"><a href="#2-1-const的特点" class="headerlink" title="2.1 const的特点"></a>2.1 const的特点</h4><ul><li>具有块级作用域</li><li>声明常量时必须赋值</li><li>赋值为简单数据类型时，不能直接修改值</li><li>赋值为复杂数据类型时，只能修改对象里面的属性和方法   不能更改地址</li></ul><h4 id="2-2-var、let、const的区别"><a href="#2-2-var、let、const的区别" class="headerlink" title="2.2 var、let、const的区别"></a>2.2 var、let、const的区别</h4><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC06%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第6天\imgs\var&let&const区别.png" alt="var&amp;let&amp;const区别"></p><h4 id="2-3-变量的使用建议"><a href="#2-3-变量的使用建议" class="headerlink" title="2.3 变量的使用建议"></a>2.3 变量的使用建议</h4><ul><li>优先使用 const 关键字声明固定不变的量</li><li>使用 let 关键字声明变化的量</li><li>兼容性考虑 或 基于 jQuery 的项目使用 var; 基于 vue 的项目 let/const</li></ul><h3 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3.解构赋值"></a>3.解构赋值</h3><p>可以从数组或对象中，把值取出来，再赋值给对应的变量</p><h4 id="3-1-对数组进行解构赋值"><a href="#3-1-对数组进行解构赋值" class="headerlink" title="3.1 对数组进行解构赋值"></a>3.1 对数组进行解构赋值</h4><h5 id="3-1-1-写法"><a href="#3-1-1-写法" class="headerlink" title="3.1.1 写法"></a>3.1.1 写法</h5><p>let [a, b, …] = 数组</p><p>使用变量名和对应位置的数组元素一一匹配，匹配成功就把元素赋值给变量</p><h5 id="3-1-2-使用注意"><a href="#3-1-2-使用注意" class="headerlink" title="3.1.2  使用注意"></a>3.1.2  使用注意</h5><ul><li>没有解构成功的变量，值为 undefined</li><li>变量的位置和数组中值的位置一一对应</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> [a, b, c, d] = arr; <br><span class="hljs-comment">//等号右边是我们的原数组  等号左边是声明的变量 变量名和对应位置的数组元素一一匹配</span><br><span class="hljs-built_in">console</span>.log(a, b, c, d); <span class="hljs-comment">//1 2 3 4</span><br><span class="hljs-comment">// 2. 没有解构成功的变量，值为 undefined</span><br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> [a1, b1, c1] = arr2;<br><span class="hljs-built_in">console</span>.log(a1, b1, c1); <span class="hljs-comment">//1 2 undefined</span><br><span class="hljs-comment">// 3. 不需要解构的元素可以使用 逗号 隔开</span><br><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> [, , a2, b2] = arr3 <span class="hljs-comment">//如果我们只要第三和第四个数 前面两个用逗号隔开</span><br><span class="hljs-built_in">console</span>.log(a2, b2); <span class="hljs-comment">//3 4</span><br><span class="hljs-comment">// 4. 交换两个变量</span><br><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> num2 = <span class="hljs-number">20</span>;<br>[num1, num2] = [num2, num1];<br><span class="hljs-comment">//等号右边是原数组 也就是[10,20]  等号左边进行解构 </span><br><span class="hljs-built_in">console</span>.log(num1, num2); <span class="hljs-comment">//20  10</span><br></code></pre></td></tr></table></figure><h4 id="3-2-对对象进行解构"><a href="#3-2-对对象进行解构" class="headerlink" title="3.2 对对象进行解构"></a>3.2 对对象进行解构</h4><h5 id="3-2-1-写法"><a href="#3-2-1-写法" class="headerlink" title="3.2.1 写法"></a>3.2.1 写法</h5><p>let {prop1, prop2, …} = 对象</p><p>使用变量名和对象中的属性名进行一一匹配，匹配成功就把对象的属性值赋值给变量</p><h5 id="3-2-2-使用注意"><a href="#3-2-2-使用注意" class="headerlink" title="3.2.2  使用注意"></a>3.2.2  使用注意</h5><ul><li>没有解构成功的变量，值为 undefined</li><li>变量的名称和属性名一一对应</li><li>变量名的顺序和数量没有要求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>           name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>           age: <span class="hljs-number">18</span>,<br>           height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>           weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>            &#125;<br>            <span class="hljs-comment">// 和结构数组不一样的是  这里let的变量名 要和对象里的属性名一样 顺序没有要求</span><br>            <span class="hljs-comment">// let &#123;height,name&#125; = obj;</span><br>            <span class="hljs-comment">// console.log(name, height); //张三 175cm</span><br>        <span class="hljs-comment">// 没有解构成功的变量，值为 undefined</span><br>        <span class="hljs-keyword">let</span> &#123;age,foo&#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(age, foo); <span class="hljs-comment">//18  undefined  因为obj里没有没有foo这个属性名</span><br></code></pre></td></tr></table></figure><h5 id="3-2-3-对象解构赋值别名"><a href="#3-2-3-对象解构赋值别名" class="headerlink" title="3.2.3 对象解构赋值别名"></a>3.2.3 对象解构赋值别名</h5><p>: 变量名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 如何给解构后的变量起个别名 : 变量名</span><br>        <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">height</span>:<span class="hljs-string">&#x27;175cm&#x27;</span>,<span class="hljs-attr">weight</span>: <span class="hljs-string">&#x27;65kg&#x27;</span>&#125;;<br>        <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: name2&#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(name2); <span class="hljs-comment">//张三</span><br>        <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">//空 </span><br>        <span class="hljs-comment">// 原因： 冒号左边的name只用来进行属性名的匹配， 冒号右边才是真正赋值的变量</span><br><span class="hljs-comment">//嵌套写法</span><br><span class="hljs-keyword">let</span> data = &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;家电&#x27;</span>, <span class="hljs-attr">googs</span>: &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;冰箱&#x27;</span>&#125; &#125;<br>            <span class="hljs-comment">//从data中解构出googs对象下的name</span><br>        <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">googs</span>:&#123;uname,id&#125;&#125; = data;<br>        <span class="hljs-built_in">console</span>.log(uname); <span class="hljs-comment">//冰箱</span><br></code></pre></td></tr></table></figure><h3 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4.箭头函数"></a>4.箭头函数</h3><h4 id="4-1-箭头函数表达式"><a href="#4-1-箭头函数表达式" class="headerlink" title="4.1 箭头函数表达式"></a>4.1 箭头函数表达式</h4><p> () =&gt; {}   小括号内是形参 大括号内是函数体</p><h4 id="4-2-箭头函数的特点"><a href="#4-2-箭头函数的特点" class="headerlink" title="4.2 箭头函数的特点"></a>4.2 箭头函数的特点</h4><ul><li>一般不会单独使用, 可以当做匿名函数进行赋值 \ 传参 \ 返回值</li><li>如果函数体只有一行代码，并代码执行结果就是返回值, 可以同时省略大括号和 return</li><li>如果形参只有一个, 可以省略小括号</li><li>内部没有 arguments 这个内置对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 计算两个数的和</span><br>        <span class="hljs-comment">// 函数体只有一行代码, 结果就是返回值时, 可以直接省略大括号 </span><br>        <span class="hljs-keyword">let</span> getSum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> num1 + num2 <span class="hljs-comment">//省略大括号和return</span><br>        <span class="hljs-keyword">var</span> res = getSum(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//15</span><br><br><span class="hljs-comment">// 使用箭头函数遍历数组</span><br>        <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>        <span class="hljs-comment">//1 2 3 4 5 这里形参如果写两个的话 小括号不能省略</span><br>        <span class="hljs-comment">//arr1.forEach((item, index) =&gt; console.log(item)); </span><br>        <span class="hljs-comment">//如果形参只有一个, 可以省略小括号  </span><br>        arr1.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(item)); <span class="hljs-comment">//1 2 3 4 5</span><br><br><span class="hljs-comment">// 筛选出数组中所有的偶数</span><br>        <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>        <span class="hljs-keyword">var</span> newArr2 = arr2.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>); <span class="hljs-comment">//这里省略了小括号和大括号和return</span><br>        <span class="hljs-built_in">console</span>.log(newArr2); <span class="hljs-comment">//2 4 6</span><br></code></pre></td></tr></table></figure><h4 id="4-3-箭头函数的this指向"><a href="#4-3-箭头函数的this指向" class="headerlink" title="4.3 箭头函数的this指向"></a>4.3 箭头函数的this指向</h4><p>箭头函数没有自己的 this, 它里面的 this 指向箭头函数所处位置的 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例子1:</span><br>        <span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">const</span> resFn = fn.call(obj) <span class="hljs-comment">//这里log出的this 被call改成了obj 所以输出obj</span><br>        resFn() <span class="hljs-comment">//它里面的 this 指向箭头函数所处位置的 this所以也是obj</span><br><span class="hljs-comment">// 例子2:</span><br>        <span class="hljs-keyword">const</span> obj1 = &#123;<br>            age: <span class="hljs-number">20</span>,<br>            say: <span class="hljs-function">() =&gt;</span> &#123;<br>                alert(<span class="hljs-built_in">this</span>.age)<br>            &#125;<br>        &#125;;<br>        obj1.say(); <span class="hljs-comment">//这里输出undefined</span><br>        <span class="hljs-comment">// 原因：  因为say里面箭头函数的this 指向所处位置的this 也就是obj1的this</span><br>        <span class="hljs-comment">// 非函数中的this 指向window</span><br>        <span class="hljs-comment">// 所以调用后 window.age 为undefined 因为window下面没有age这个值</span><br><span class="hljs-comment">// 例子3</span><br>       <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>            btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//这里虽然btn事件里的this指向btn  但是定时器的this是指向window的</span><br>            <span class="hljs-comment">// 所以正常写法定时器里不能用this  但可以使用箭头函数</span><br>            <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>, <span class="hljs-number">3000</span>)<br>             &#125;)<br><br></code></pre></td></tr></table></figure><h4 id="复习this指向"><a href="#复习this指向" class="headerlink" title="复习this指向"></a>复习this指向</h4><ol><li>非函数中的 this 指向 window</li><li>es5 中函数的 this 指向函数的调用者</li><li>call, apply, bind 这三种手动改变 this 的情况特殊对待, this 指向传递的第一个参数</li><li>es6 中的箭头函数没有自己的 this, 指向所处位置的 this</li></ol><h3 id="5-剩余参数"><a href="#5-剩余参数" class="headerlink" title="5.剩余参数"></a>5.剩余参数</h3><h4 id="5-1-剩余参数语法：-…变量名"><a href="#5-1-剩余参数语法：-…变量名" class="headerlink" title="5.1 剩余参数语法：  (…变量名)"></a>5.1 剩余参数语法：  (…变量名)</h4><p>允许我们将剩下的所有参数表示为一个<span style="color:red"><strong>数组</strong> </span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, ...rest</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">console</span>.log(rest); <span class="hljs-comment">// [2,3,4]</span><br> &#125;;<br> fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-comment">// 2. 用来计算多个数的和 (1, 2, 3, 4, 5)</span><br><span class="hljs-keyword">const</span> getSum = <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>    rest.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> sum += item);<br>    <span class="hljs-built_in">console</span>.log(sum); <span class="hljs-comment">//15</span><br>&#125;<br>getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h4 id="5-2-剩余参数和解构配合使用"><a href="#5-2-剩余参数和解构配合使用" class="headerlink" title="5.2 剩余参数和解构配合使用"></a>5.2 剩余参数和解构配合使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 剩余参数使用在解构赋值中, 表示数组中剩余的所有元素 ，或者对象中剩余的所有属性</span><br>        <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>]<br>        <span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            height: <span class="hljs-string">&#x27;170cm&#x27;</span>,<br>            weight: <span class="hljs-string">&#x27;135kg&#x27;</span>,<br>        &#125;<br><br><span class="hljs-comment">// 1. 把数组中剩下的元素组成新的数组</span><br>        <span class="hljs-keyword">let</span> [a, ...rest1] = arr;<br>        <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//red</span><br>        <span class="hljs-built_in">console</span>.log(rest1); <span class="hljs-comment">//[&quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><br><span class="hljs-comment">// 2. 把对象剩下的属性组成一个新对象</span><br>        <span class="hljs-keyword">let</span> &#123;<br>            name,<br>            ...rest2<br>        &#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">//小明</span><br>        <span class="hljs-built_in">console</span>.log(rest2); <span class="hljs-comment">//&#123;age: 12, height: &quot;170cm&quot;, weight: &quot;135kg&quot;&#125;</span><br><br><span class="hljs-comment">// 3. 使用剩余参数快速实现浅拷贝</span><br>        <span class="hljs-keyword">let</span> &#123;...obj2<br>        &#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(obj2); <span class="hljs-comment">//&#123;name: &quot;小明&quot;, age: 12, height: &quot;170cm&quot;, weight: &quot;135kg&quot;&#125;</span><br>        obj.name = <span class="hljs-string">&#x27;小王&#x27;</span>;<br>        <span class="hljs-built_in">console</span>.log(obj2.name);<br></code></pre></td></tr></table></figure><h4 id="注意！！"><a href="#注意！！" class="headerlink" title="注意！！"></a>注意！！</h4><p><strong>剩余参数和拓展运算符的区别是</strong>  </p><p><span style="color:red"><strong>剩余参数是（…变量名）  是用小括号包起来的</strong> </span></p><p><span style="color:red"><strong>拓展运算符是[…数组名] 或{…对象名} 是用大括号包起来的</strong> </span></p><h2 id="三、ES6内置对象方法拓展"><a href="#三、ES6内置对象方法拓展" class="headerlink" title="三、ES6内置对象方法拓展"></a>三、ES6内置对象方法拓展</h2><h3 id="1-拓展运算符"><a href="#1-拓展运算符" class="headerlink" title="1.拓展运算符"></a>1.拓展运算符</h3><h3 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2.模板字符串"></a>2.模板字符串</h3><h3 id="3-数组的扩展方法"><a href="#3-数组的扩展方法" class="headerlink" title="3.数组的扩展方法"></a>3.数组的扩展方法</h3><h4 id="3-1Array-from-方法"><a href="#3-1Array-from-方法" class="headerlink" title="3.1Array.from()方法"></a>3.1Array.from()方法</h4><h4 id="3-2-数组find-方法"><a href="#3-2-数组find-方法" class="headerlink" title="3.2 数组find()方法"></a>3.2 数组find()方法</h4><h4 id="3-3-数组findIndex-方法"><a href="#3-3-数组findIndex-方法" class="headerlink" title="3.3 数组findIndex()方法"></a>3.3 数组findIndex()方法</h4><h4 id="3-4-数组findIndex-方法"><a href="#3-4-数组findIndex-方法" class="headerlink" title="3.4.数组findIndex()方法"></a>3.4.数组findIndex()方法</h4><h4 id="3-5-数组includes-方法和map-方法"><a href="#3-5-数组includes-方法和map-方法" class="headerlink" title="3.5 数组includes() 方法和map()方法"></a>3.5 数组includes() 方法和map()方法</h4><h3 id="4-字符串的扩展方法"><a href="#4-字符串的扩展方法" class="headerlink" title="4.字符串的扩展方法"></a>4.字符串的扩展方法</h3><h4 id="4-1字符串的startsWith-和endsWith-方法"><a href="#4-1字符串的startsWith-和endsWith-方法" class="headerlink" title="4.1字符串的startsWith()和endsWith()方法"></a>4.1字符串的startsWith()和endsWith()方法</h4><h4 id="4-2-字符串的repeat-n-方法"><a href="#4-2-字符串的repeat-n-方法" class="headerlink" title="4.2 字符串的repeat(n) 方法"></a>4.2 字符串的repeat(n) 方法</h4><h3 id="5-Set数据结构"><a href="#5-Set数据结构" class="headerlink" title="5.Set数据结构"></a>5.Set数据结构</h3><h4 id="5-1-Set的方法"><a href="#5-1-Set的方法" class="headerlink" title="5.1 Set的方法"></a>5.1 Set的方法</h4><h4 id="5-2-Set的遍历"><a href="#5-2-Set的遍历" class="headerlink" title="5.2 Set的遍历"></a>5.2 Set的遍历</h4>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础第一天</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-基础第一天"><a href="#JS-基础第一天" class="headerlink" title="JS 基础第一天"></a>JS 基础第一天</h1><h2 id="一、JavaScript认识"><a href="#一、JavaScript认识" class="headerlink" title="一、JavaScript认识"></a>一、JavaScript认识</h2><h3 id="1、什么是JS？"><a href="#1、什么是JS？" class="headerlink" title="1、什么是JS？"></a>1、什么是JS？</h3><p>全称JavaScript，是一种运行在客户端的脚本语言。</p><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行。</p><h3 id="4、JS组成"><a href="#4、JS组成" class="headerlink" title="4、JS组成"></a>4、JS组成</h3><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8711.png" alt="图片11"></p><h2 id="二、JS注释"><a href="#二、JS注释" class="headerlink" title="二、JS注释"></a>二、JS注释</h2><h3 id="1、单行注释"><a href="#1、单行注释" class="headerlink" title="1、单行注释"></a>1、单行注释</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//单行文本注释</span><br></code></pre></td></tr></table></figure><p>默认快捷键：ctrl +/</p><h3 id="2、多行文本注释"><a href="#2、多行文本注释" class="headerlink" title="2、多行文本注释"></a>2、多行文本注释</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*多行文本注释*/</span><br></code></pre></td></tr></table></figure><p>默认快捷键：Alt+shift+a</p><h2 id="三、JavaScript输入输出语句"><a href="#三、JavaScript输入输出语句" class="headerlink" title="三、JavaScript输入输出语句"></a>三、JavaScript输入输出语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">浏览器输入语句：prompt(<span class="hljs-string">&#x27;123&#x27;</span>);<br>浏览器输出语句：alert(<span class="hljs-string">&#x27;&#x27;</span>);<br>控制台输出语句：<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li></ul><h2 id="四、变量的概念"><a href="#四、变量的概念" class="headerlink" title="四、变量的概念"></a>四、变量的概念</h2><h3 id="1、什么是变量"><a href="#1、什么是变量" class="headerlink" title="1、什么是变量"></a>1、什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p><h3 id="2、变量本质"><a href="#2、变量本质" class="headerlink" title="2、变量本质"></a>2、变量本质</h3><p>​    本质：<strong>变量是程序在内存中申请的一块用来存放数据的空间。</strong></p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8714.png" alt="图片14"></p><h2 id="五、变量的使用"><a href="#五、变量的使用" class="headerlink" title="五、变量的使用"></a>五、变量的使用</h2><h3 id="1、变量声明"><a href="#1、变量声明" class="headerlink" title="1、变量声明"></a>1、变量声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  声明变量  </span><br><span class="hljs-keyword">var</span> age; <span class="hljs-comment">//  声明一个 名称为age 的变量     </span><br></code></pre></td></tr></table></figure><h3 id="2、赋值"><a href="#2、赋值" class="headerlink" title="2、赋值"></a>2、赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">age = <span class="hljs-number">10</span>; <span class="hljs-comment">// 给 age  这个变量赋值为 10          </span><br></code></pre></td></tr></table></figure><h3 id="3、变量初始化"><a href="#3、变量初始化" class="headerlink" title="3、变量初始化"></a>3、变量初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>; <span class="hljs-comment">// 声明变量同时赋值为 18</span><br><span class="hljs-comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span><br></code></pre></td></tr></table></figure><h3 id="4、变量语法拓展"><a href="#4、变量语法拓展" class="headerlink" title="4、变量语法拓展"></a>4、变量语法拓展</h3><ul><li><p>更新变量</p><p>​        一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><br>age = <span class="hljs-number">81</span>;   <span class="hljs-comment">// 最后的结果就是81因为18 被覆盖掉了          </span><br></code></pre></td></tr></table></figure></li><li><p>同时声明多个变量</p><p>​        同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>,  name = <span class="hljs-string">&#x27;zs&#x27;</span>, sex = <span class="hljs-number">2</span>;       <br></code></pre></td></tr></table></figure></li><li><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var  age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值  直接使用</td><td>报错</td></tr><tr><td>age   = 10; console.log (age);</td><td>不声明   只赋值</td><td>10</td></tr></tbody></table></li></ul><h3 id="5、命名规范"><a href="#5、命名规范" class="headerlink" title="5、命名规范"></a>5、命名规范</h3><ul><li>组成：字母：a-z、A-Z、数字0-9、下划线(_)、美元符号（$）;</li><li>区分大小写；</li><li>不能以数字开头；</li><li>不能使用关键字和保留字；</li><li>尽量使变量命名一亩了然（用英文）；</li><li>驼峰命名法（首字母小写，后面的首字母大写：myFirstName）；</li></ul><h2 id="六、数据类型"><a href="#六、数据类型" class="headerlink" title="六、数据类型"></a>六、数据类型</h2><h3 id="1、为什么需要数据类型"><a href="#1、为什么需要数据类型" class="headerlink" title="1、为什么需要数据类型"></a>1、为什么需要数据类型</h3><p>在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p><h3 id="2、数据类型分类"><a href="#2、数据类型分类" class="headerlink" title="2、数据类型分类"></a>2、数据类型分类</h3><ul><li>简单数据类型 （Number,String,Boolean,Undefined,Null）</li></ul><ul><li>复杂数据类型 （object)    </li></ul><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8716.png" alt="图片16"></p><h4 id="1、数字类型（number）"><a href="#1、数字类型（number）" class="headerlink" title="1、数字类型（number）"></a>1、数字类型（number）</h4><ul><li><p>分为整数型和浮点型（小数）</p></li><li><p>数字型进制</p><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 1.八进制数字序列范围：0~7</span><br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">07</span>;   <span class="hljs-comment">// 对应十进制的7</span><br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">019</span>;  <span class="hljs-comment">// 对应十进制的19</span><br><span class="hljs-keyword">var</span> num3 = <span class="hljs-number">08</span>;   <span class="hljs-comment">// 对应十进制的8</span><br> <span class="hljs-comment">// 2.十六进制数字序列范围：0~9以及A~F</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">0xA</span>;   <br></code></pre></td></tr></table></figure><p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p></li><li><p>数字型范围</p><p>JavaScript中数值的最大和最小值</p><ul><li>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</li><li>最小值：Number.MIN_VALUE，这个值为：5e-32</li></ul></li><li><p>数字型特殊数值</p><ul><li>Infinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>NaN ，Not a number，代表一个非数值</li></ul></li><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8717.png" alt="图片17"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> usrAge = <span class="hljs-number">21</span>;<br> <span class="hljs-keyword">var</span> isOk = <span class="hljs-built_in">isNaN</span>(userAge);<br>   <span class="hljs-built_in">console</span>.log(isNum);          <span class="hljs-comment">// false ，21 不是一个非数字</span><br> <span class="hljs-keyword">var</span> usrName = <span class="hljs-string">&quot;andy&quot;</span>;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(userName));<span class="hljs-comment">// true ，&quot;andy&quot;是一个非数字</span><br></code></pre></td></tr></table></figure><h4 id="2、字符串类型（String）"><a href="#2、字符串类型（String）" class="headerlink" title="2、字符串类型（String）"></a>2、字符串类型（String）</h4></li></ul><p>字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p><ul><li><p>字符串引号嵌套</p><p>​        JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&#x27;我是&quot;高帅富&quot;程序猿&#x27;</span>;   <span class="hljs-comment">// 可以用&#x27;&#x27;包含&quot;&quot;</span><br><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">&quot;我是&#x27;高帅富&#x27;程序猿&quot;</span>;  <span class="hljs-comment">// 也可以用&quot;&quot; 包含&#x27;&#x27;</span><br><span class="hljs-comment">//  常见错误</span><br><span class="hljs-keyword">var</span> badQuotes = <span class="hljs-string">&#x27;What on earth?&quot;; // 报错，不能 单双引号搭配</span><br></code></pre></td></tr></table></figure></li><li><p>字符串转义符</p><p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n   是   newline   的意思</td></tr><tr><td>\ \</td><td>斜杠   \</td></tr><tr><td>&#39;</td><td>‘   单引号</td></tr><tr><td>&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab  缩进</td></tr><tr><td>\b</td><td>空格 ，b   是   blank  的意思</td></tr></tbody></table></li></ul><ul><li><p>字符串长度</p><p>通过默认函数length（）测量；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&quot;我是帅气多金的程序猿！&quot;</span>;<br>  alert(strMsg.length); <span class="hljs-comment">// 显示 11</span><br></code></pre></td></tr></table></figure></li><li><p>字符串拼接</p><ul><li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p></li><li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.1 字符串 &quot;相加&quot;</span><br>alert(<span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">// hello world</span><br><span class="hljs-comment">//1.2 数值字符串 &quot;相加&quot;</span><br>alert(<span class="hljs-string">&#x27;100&#x27;</span> + <span class="hljs-string">&#x27;100&#x27;</span>); <span class="hljs-comment">// 100100</span><br><span class="hljs-comment">//1.3 数值字符串 + 数值</span><br>alert(<span class="hljs-string">&#x27;11&#x27;</span> + <span class="hljs-number">12</span>);     <span class="hljs-comment">// 1112 </span><br></code></pre></td></tr></table></figure><p><strong><em>+ 号总结口诀：数值相加 ，字符相连</em></strong></p></li></ul></li><li><p>字符串拼接加强</p><ul><li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li><li><strong>变量是不能添加引号的</strong>，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li></ul></li></ul><h4 id="3、布尔类型Boolean"><a href="#3、布尔类型Boolean" class="headerlink" title="3、布尔类型Boolean"></a>3、布尔类型Boolean</h4><p>​    布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>​    布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h4 id="4、null和undefined"><a href="#4、null和undefined" class="headerlink" title="4、null和undefined"></a>4、null和undefined</h4><p>​    一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> variable;<br><span class="hljs-built_in">console</span>.log(variable);           <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span> + variable);  <span class="hljs-comment">// 你好undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + variable);     <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + variable);   <span class="hljs-comment">//  NaN</span><br></code></pre></td></tr></table></figure><p>​    一个声明变量给 null 值，里面存的值为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vari = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span> + vari);  <span class="hljs-comment">// 你好null</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + vari);     <span class="hljs-comment">// 11</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + vari);   <span class="hljs-comment">//  1</span><br></code></pre></td></tr></table></figure><h3 id="3、获取数据类型"><a href="#3、获取数据类型" class="headerlink" title="3、获取数据类型"></a>3、获取数据类型</h3><h4 id="1、获取数据类型"><a href="#1、获取数据类型" class="headerlink" title="1、获取数据类型"></a>1、获取数据类型</h4><p>typeof 可用来获取检测变量的数据类型</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8718.png" alt="图片18"></p><h4 id="2、数据类型转换"><a href="#2、数据类型转换" class="headerlink" title="2、数据类型转换"></a>2、数据类型转换</h4><ul><li><p>字符串类型转换</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8719.png" alt="图片19"></p><ul><li>toString() 和 String()  使用方式不一样。</li><li>三种转换方式，<strong>更多第三种加号拼接字符串转换方式</strong>， 隐式转换。</li></ul></li><li><p>数字类型转换</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8720.png" alt="图片20"></p><ul><li>注意 <strong>parseInt</strong> 和 <strong>parseFloat</strong> 单词的大小写重点</li><li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li></ul></li><li><p>转换布尔型</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C1%5C%E5%9B%BE%E7%89%8721.png" alt="图片21"></p><ul><li><strong>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined</strong>  </li><li>其余值都会被转换为 true</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础第二天</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第02天"><a href="#JavaScript基础第02天" class="headerlink" title="JavaScript基础第02天"></a>JavaScript基础第02天</h1><h2 id="1-运算符（操作符）"><a href="#1-运算符（操作符）" class="headerlink" title="1 - 运算符（操作符）"></a>1 - 运算符（操作符）</h2><h3 id="1-1-运算符的分类"><a href="#1-1-运算符的分类" class="headerlink" title="1.1 运算符的分类"></a>1.1 运算符的分类</h3><p><strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><pre><code>JavaScript中常用的运算符有：</code></pre><ul><li> 算数运算符</li><li> 递增和递减运算符</li><li> 比较运算符</li><li> 逻辑运算符</li><li> 赋值运算符</li></ul><h3 id="1-2-算数运算符"><a href="#1-2-算数运算符" class="headerlink" title="1.2 算数运算符"></a>1.2 算数运算符</h3><ul><li><p>算术运算符概述</p><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%871.png"></p></li><li><p>浮点数的精度问题</p><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;    <span class="hljs-comment">// 结果不是 0.3，而是：0.30000000000000004</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>);   <span class="hljs-comment">// 结果不是 7，  而是：7.000000000000001</span><br></code></pre></td></tr></table></figure><p>所以：不要直接判断两个浮点数是否相等 ! </p></li><li><p>表达式和返回值</p><p>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p>简单理解：是由数字、运算符、变量等组成的式子</p><p>表达式最终都会有一个结果，返回给开发者，称为返回值</p></li></ul><h3 id="1-3-递增和递减运算符"><a href="#1-3-递增和递减运算符" class="headerlink" title="1.3 递增和递减运算符"></a>1.3 递增和递减运算符</h3><ul><li><p>递增和递减运算符概述</p><pre><code>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成。  在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。  注意：递增和递减运算符必须和变量配合使用。 </code></pre></li><li><p>递增运算符</p><ul><li><p>前置递增运算符</p><p>  ++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p><p>  使用口诀：先自加，后返回值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;<br>alert(++num + <span class="hljs-number">10</span>);   <span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><ul><li><p>后置递增运算符</p><p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p><p>使用口诀：先返回原值，后自加 </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;<br>alert(<span class="hljs-number">10</span> + num++);  <span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><h3 id="1-4-比较运算符"><a href="#1-4-比较运算符" class="headerlink" title="1.4 比较运算符"></a>1.4 比较运算符</h3></li><li><p>比较运算符概述</p><pre><code>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</code></pre><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%872.png"></p></li><li><p>等号比较</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%873.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> == <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> === <span class="hljs-string">&#x27;18&#x27;</span>); <br></code></pre></td></tr></table></figure><h3 id="1-5-逻辑运算符"><a href="#1-5-逻辑运算符" class="headerlink" title="1.5 逻辑运算符"></a>1.5 逻辑运算符</h3></li><li><p>逻辑运算符概述</p><pre><code>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</code></pre><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%874.png"></p></li><li><p>逻辑与&amp;&amp;</p><p>两边都是 true才返回 true，否则返回 false</p><p>​                <img src="images\2\图片5.png" alt></p><p>​                <img src="images\2\图片6.png" alt></p></li><li><p>逻辑或 ||</p><p>两边都是 true才返回 true，否则返回 false</p><p>​                <img src="images\2\图片7.png" alt></p><p>​                <img src="images\2\图片8.png" alt></p></li><li><p>逻辑非 ！</p><p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isOk = !<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">console</span>.log(isOk);  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>短路运算（逻辑中断）</p><p> 短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><ul><li><p>逻辑与</p><p>  语法： 表达式1 &amp;&amp; 表达式2</p><pre><code>  - 如果第一个表达式的值为真，则返回表达式2    - 如果第一个表达式的值为假，则返回表达式1</code></pre>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span> );        <span class="hljs-comment">// 456</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span> );          <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>&amp;&amp; <span class="hljs-number">789</span> );  <span class="hljs-comment">// 789</span><br></code></pre></td></tr></table></figure></li><li><p>逻辑或</p><p> 语法： 表达式1 || 表达式2</p><pre><code> - 如果第一个表达式的值为真，则返回表达式1  - 如果第一个表达式的值为假，则返回表达式2</code></pre>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> );         <span class="hljs-comment">//  123</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> ||  <span class="hljs-number">456</span> );          <span class="hljs-comment">//  456</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> || <span class="hljs-number">789</span> );  <span class="hljs-comment">//  123</span><br></code></pre></td></tr></table></figure><h3 id="1-6-赋值运算符"><a href="#1-6-赋值运算符" class="headerlink" title="1.6 赋值运算符"></a>1.6 赋值运算符</h3><p>概念：用来把数据赋值给变量的运算符。</p></li></ul></li></ul><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%879.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;<br>age += <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age + 5;</span><br>age -= <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age - 5;</span><br>age *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 相当于 age = age * 10;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-运算符优先级"><a href="#1-7-运算符优先级" class="headerlink" title="1.7 运算符优先级"></a>1.7 运算符优先级</h3><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%8710.png"></p><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 - 流程控制"></a>2 - 流程控制</h2><h3 id="2-1-流程控制概念"><a href="#2-1-流程控制概念" class="headerlink" title="2.1 流程控制概念"></a>2.1 流程控制概念</h3><pre><code>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。简单理解：**流程控制就是来控制代码按照一定结构顺序来执行**流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。</code></pre><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%8711.png"></p><h3 id="2-2-顺序流程控制"><a href="#2-2-顺序流程控制" class="headerlink" title="2.2 顺序流程控制"></a>2.2 顺序流程控制</h3><p>​    </p><p>​    顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br>​                <img src="images\2\图片12.png" alt></p><h3 id="2-3-分支流程控制"><a href="#2-3-分支流程控制" class="headerlink" title="2.3 分支流程控制"></a>2.3 分支流程控制</h3><ul><li><p>分支结构</p><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><pre><code>            &lt;img src=&quot;images\2\图片13.png&quot; alt=&quot;&quot;&gt;</code></pre><p>  JS 语言提供了两种分支结构语句：if 语句、switch 语句</p></li><li><p>if 语句</p><ul><li>语法结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 条件成立执行代码，否则什么也不做</span><br><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// 条件成立执行的代码语句</span><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</code></pre><ul><li><p>执行流程</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%8714.png"></p></li></ul></li><li><p>if else语句（双分支语句）</p><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span><br><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// [如果] 条件成立执行的代码</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// [否则] 执行的代码</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>执行流程</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%8715.png"></p></li></ul></li><li><p>if else if 语句(多分支语句)</p><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 适合于检查多重条件。</span><br><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>    语句<span class="hljs-number">1</span>；<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>)  &#123;<br>    语句<span class="hljs-number">2</span>；<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>)  &#123;<br>   语句<span class="hljs-number">3</span>；<br> ....<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 上述条件都不成立执行此处代码</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>执行逻辑</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/images%5C2%5C%E5%9B%BE%E7%89%8716.png"></p></li></ul></li></ul><h3 id="2-4-三元表达式"><a href="#2-4-三元表达式" class="headerlink" title="2.4 三元表达式"></a>2.4 三元表达式</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">表达式<span class="hljs-number">1</span> ? 表达式<span class="hljs-number">2</span> : 表达式<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>执行思路</p><ul><li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li><li>简单理解： 就类似于  if  else （双分支） 的简写</li></ul></li></ul><h3 id="2-5-switch分支流程控制"><a href="#2-5-switch分支流程控制" class="headerlink" title="2.5 switch分支流程控制"></a>2.5 switch分支流程控制</h3><ul><li><p>语法结构</p><pre><code>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span>( 表达式 )&#123; <br>    <span class="hljs-keyword">case</span> value1:<br>        <span class="hljs-comment">// 表达式 等于 value1 时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value2:<br>        <span class="hljs-comment">// 表达式 等于 value2 时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">// 表达式 不等于任何一个 value 时要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>switch ：开关 转换  ， case ：小例子   选项</p></li><li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p></li><li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p></li><li><p>switch 表达式的值会与结构中的 case 的值做比较 </p></li><li><p>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p></li><li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p></li></ul></li><li><p>switch 语句和 if else if 语句的区别</p><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</li><li>当分支比较少时，if… else语句的执行效率比 switch语句高。</li><li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 </li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础第三天</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC03%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC03%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JS基础第三天"><a href="#JS基础第三天" class="headerlink" title="JS基础第三天"></a>JS基础第三天</h1><h2 id="一、循环"><a href="#一、循环" class="headerlink" title="一、循环"></a>一、循环</h2><h3 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h3><p>语法结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>（初始化变量；条件表达式；操作表达式）｛<br><span class="hljs-comment">//循环体</span><br>｝<br></code></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>初始化变量</td><td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td></tr><tr><td>条件表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr><tr><td>操作表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">断点调试的流程：<br><span class="hljs-number">1</span>、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点<br><span class="hljs-number">2</span>、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。<br><span class="hljs-number">3</span>、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。<br></code></pre></td></tr></table></figure><h3 id="2、双重for循环"><a href="#2、双重for循环" class="headerlink" title="2、双重for循环"></a>2、双重for循环</h3><p>即在for循环中再次嵌套一个for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(...)&#123;<br><span class="hljs-keyword">for</span>(...)&#123;<span class="hljs-comment">//可以将中间的for循环看成一个整体</span><br>      ...<br>&#125;<br>  ....<br>&#125;<br></code></pre></td></tr></table></figure><p>外层循环执行一次，内层循环需要执行全部次数，随后外层循环开始执行第二次，内层循环再次执行全部次数，直至外层循环结束。</p><p><strong>相关经典案例：</strong></p><p>打印乘法表、打印倒三角你星星</p><h3 id="3、while循环"><a href="#3、while循环" class="headerlink" title="3、while循环"></a>3、while循环</h3><p>语法结构：</p><p>while (条件表达式) {</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// 循环体代码 </span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li> 执行循环体代码</li><li>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ul><p><strong>注意：</strong>要添加退出条件，否则会成为死循环</p><h3 id="4、do-while"><a href="#4、do-while" class="headerlink" title="4、do-while"></a>4、do-while</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span><br>&#125; <span class="hljs-keyword">while</span>(条件表达式);<br></code></pre></td></tr></table></figure><p>和while循环类似，不同点do-while要先执行一次循环，再进行条件表达式判断。</p><h3 id="5、continue、break"><a href="#5、continue、break" class="headerlink" title="5、continue、break"></a>5、continue、break</h3><p>continue 关键字：用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>  break 关键字：用于立即跳出整个循环（循环结束）。</p><h2 id="二、代码规范"><a href="#二、代码规范" class="headerlink" title="二、代码规范"></a>二、代码规范</h2><p>1、标识符命名规范</p><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词  </li><li>函数的名称一般用动词  </li></ul>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础第四天</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第04天笔记"><a href="#JavaScript基础第04天笔记" class="headerlink" title="JavaScript基础第04天笔记"></a>JavaScript基础第04天笔记</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1 - 数组"></a>1 - 数组</h2><h3 id="1-1-数组的概念"><a href="#1-1-数组的概念" class="headerlink" title="1.1 数组的概念"></a>1.1 数组的概念</h3><ul><li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li><li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li></ul><h3 id="1-2-创建数组"><a href="#1-2-创建数组" class="headerlink" title="1.2 创建数组"></a>1.2 创建数组</h3><p>JS 中创建数组有两种方式：</p><ul><li><p>利用  new 创建数组  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 数组名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() ；<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();   <span class="hljs-comment">// 创建一个新的空数组</span><br></code></pre></td></tr></table></figure><p>注意 Array () ，A 要大写    </p></li><li><p>利用数组字面量创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 使用数组字面量方式创建空的数组</span><br><span class="hljs-keyword">var</span>  数组名 = []；<br><span class="hljs-comment">//2. 使用数组字面量方式创建带初始值的数组</span><br><span class="hljs-keyword">var</span>  数组名 = [<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-string">&#x27;大黄&#x27;</span>,<span class="hljs-string">&#x27;瑞奇&#x27;</span>];<br></code></pre></td></tr></table></figure><ul><li>数组的字面量是方括号 [ ] </li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">28.9</span>];<br></code></pre></td></tr></table></figure><h3 id="1-3-获取数组中的元素"><a href="#1-3-获取数组中的元素" class="headerlink" title="1.3 获取数组中的元素"></a>1.3 获取数组中的元素</h3></li></ul><p>​        索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\4\图片1.png"></p><p>​        数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义数组</span><br><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">// 获取数组中的第2个元素</span><br>alert(arrStus[<span class="hljs-number">1</span>]);    <br></code></pre></td></tr></table></figure><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p><h3 id="1-4-遍历数组"><a href="#1-4-遍历数组" class="headerlink" title="1.4 遍历数组"></a>1.4 遍历数组</h3><ul><li><p>数组遍历</p><p>  ​        把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(arrStus[i]);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>数组的长度</p><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>alert(arrStus.length);  <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>  <strong>注意</strong>：</p><ul><li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li></ul></li><li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p><ul><li>数组的length属性可以被修改：</li></ul></li><li><p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p><ul><li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li></ul></li></ul><h3 id="1-5-数组中新增元素"><a href="#1-5-数组中新增元素" class="headerlink" title="1.5 数组中新增元素"></a>1.5 数组中新增元素</h3><p>​        数组中可以通过以下方式在数组的末尾插入新元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组[ 数组.length ] = 新数据;<br></code></pre></td></tr></table></figure><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 - 函数"></a>2 - 函数</h2><h3 id="2-1-函数的概念"><a href="#2-1-函数的概念" class="headerlink" title="2.1 函数的概念"></a>2.1 函数的概念</h3><p>​        在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p><p>​        函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。  </p><h3 id="2-2-函数的使用"><a href="#2-2-函数的使用" class="headerlink" title="2.2 函数的使用"></a>2.2 函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//函数体代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>function 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p></li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用函数</span><br>函数名();  <span class="hljs-comment">// 通过调用函数名来执行函数体代码</span><br></code></pre></td></tr></table></figure><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\4\图片2.png"></p><p>例子：封装计算1-100累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">   计算1-100之间值的函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 声明函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> sumNum = <span class="hljs-number">0</span>;<span class="hljs-comment">// 准备一个变量，保存数字和</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    sumNum += i;<span class="hljs-comment">// 把每个数值 都累加 到变量中</span><br>  &#125;<br>  alert(sumNum);<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>getSum();<br></code></pre></td></tr></table></figure><h3 id="2-3-函数的参数"><a href="#2-3-函数的参数" class="headerlink" title="2.3 函数的参数"></a>2.3 函数的参数</h3></li></ul><h4 id="函数参数语法"><a href="#函数参数语法" class="headerlink" title="函数参数语法"></a>函数参数语法</h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\4\图片3.png"></p><p>​    参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p><p>函数参数的运用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 带参数的函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>, 形参<span class="hljs-number">2</span> , 形参<span class="hljs-number">3.</span>..</span>) </span>&#123; <span class="hljs-comment">// 可以定义任意多的参数，用逗号分隔</span><br>  <span class="hljs-comment">// 函数体</span><br>&#125;<br><span class="hljs-comment">// 带参数的函数调用</span><br>函数名(实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>, 实参<span class="hljs-number">3.</span>..); <br></code></pre></td></tr></table></figure><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol></li></ul><h4 id="函数形参和实参数量不匹配时"><a href="#函数形参和实参数量不匹配时" class="headerlink" title="函数形参和实参数量不匹配时"></a>函数形参和实参数量不匹配时</h4><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\4\图片4.png"></p><pre><code>注意：在JavaScript中，形参的默认值是undefined。</code></pre><p>小结：</p><ul><li> 函数可以带参数也可以不带参数</li><li> 声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li> 调用函数的时候，函数名括号里面的是实参</li><li> 多个参数中间用逗号分隔</li><li> 形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="2-4-函数的返回值"><a href="#2-4-函数的返回值" class="headerlink" title="2.4 函数的返回值"></a>2.4 函数的返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名（）</span>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span>  需要返回的值；<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>函数名();    <span class="hljs-comment">// 此时调用函数就可以得到函数体内return 后面的值</span><br></code></pre></td></tr></table></figure><ul><li> 在使用 return 语句时，函数会停止执行，并返回指定的值</li><li> 如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="2-5-arguments的使用"><a href="#2-5-arguments的使用" class="headerlink" title="2.5 arguments的使用"></a>2.5 arguments的使用</h3><p>​        当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="2-6-函数案例"><a href="#2-6-函数案例" class="headerlink" title="2.6 函数案例"></a>2.6 函数案例</h3><pre><code>    函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</code></pre><h3 id="2-7-函数的两种声明方式"><a href="#2-7-函数的两种声明方式" class="headerlink" title="2.7 函数的两种声明方式"></a>2.7 函数的两种声明方式</h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用函数关键字 function 自定义函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明定义方式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;<br><span class="hljs-comment">// 调用  </span><br>fn();  <br></code></pre></td></tr></table></figure><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul></li><li><p>函数表达式方式(匿名函数）</p><p>利用函数表达式方式的写法如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;；<br><span class="hljs-comment">// 调用的方式，函数调用必须写到函数体下面</span><br>fn();<br></code></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个fn 里面存储的是一个函数  </li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础第五天</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC05%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC05%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JS第五天"><a href="#JS第五天" class="headerlink" title="JS第五天"></a>JS第五天</h1><h2 id="一、arguments使用"><a href="#一、arguments使用" class="headerlink" title="一、arguments使用"></a>一、arguments使用</h2><p>当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。</p><p>具有以下特点：</p><ul><li>是一个伪数组</li><li>具有数组length属性</li><li>可以按照索引的方式进行存贮</li><li>没有真正数组 的一些方法，如：push、pop</li><li>只有函数有arguments对象，每个函数都内置好了arguments</li></ul><h2 id="二、函数声明"><a href="#二、函数声明" class="headerlink" title="二、函数声明"></a>二、函数声明</h2><h3 id="1、自定义函数命名方式（命名函数）"><a href="#1、自定义函数命名方式（命名函数）" class="headerlink" title="1、自定义函数命名方式（命名函数）"></a>1、自定义函数命名方式（命名函数）</h3><p>利用函数关键字function自定义函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>  函数名 （）｛...｝</span><br><span class="hljs-function">函数名（）；//调用，可以放在函数前或后</span><br></code></pre></td></tr></table></figure><h3 id="2、函数表达式（匿名函数）"><a href="#2、函数表达式（匿名函数）" class="headerlink" title="2、函数表达式（匿名函数）"></a>2、函数表达式（匿名函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;;<br>变量名（）；<span class="hljs-comment">//调用，必须放在函数体下面</span><br></code></pre></td></tr></table></figure><h2 id="三、作用域"><a href="#三、作用域" class="headerlink" title="三、作用域"></a>三、作用域</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><ul><li>限定这个变量名字的可用性的代码范围就是这个名字的作用域。</li><li>提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</li></ul><h3 id="2、全局作用域"><a href="#2、全局作用域" class="headerlink" title="2、全局作用域"></a>2、全局作用域</h3><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p><h3 id="3、局部作用域"><a href="#3、局部作用域" class="headerlink" title="3、局部作用域"></a>3、局部作用域</h3><p>作用于函数内的代码环境，就是局部作用域。</p><h3 id="4、块级作用域"><a href="#4、块级作用域" class="headerlink" title="4、块级作用域"></a>4、块级作用域</h3><p>js中没有块级作用域</p><h2 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h2><h3 id="1、全局变量"><a href="#1、全局变量" class="headerlink" title="1、全局变量"></a>1、全局变量</h3><p>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</p><ul><li><strong>注意</strong>：如果在函数内部，没有声明直接赋值的变量也属于全局变量</li><li>只有在浏览器关闭的上海才会销毁，比较占内存</li><li>全局变量在代码的任何位置都可以使用</li></ul><h3 id="2、局部变量"><a href="#2、局部变量" class="headerlink" title="2、局部变量"></a>2、局部变量</h3><p>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</p><ul><li>只能在函数内部使用</li><li>函数内部声明的变量就是局部变量</li><li>函数的形参实际上就是局部变量</li><li>当我们程序执行完毕就会销毁</li></ul><h2 id="五、作用域链"><a href="#五、作用域链" class="headerlink" title="五、作用域链"></a>五、作用域链</h2><h3 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h3><p>只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；</p><p>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；</p><p>根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</p><h3 id="2、作用域链："><a href="#2、作用域链：" class="headerlink" title="2、作用域链："></a>2、作用域链：</h3><p>采取就近原则的方式来查找变量最终的值。</p><h2 id="六、预解析"><a href="#六、预解析" class="headerlink" title="六、预解析"></a>六、预解析</h2><h3 id="1、js引擎如何执行-js代码"><a href="#1、js引擎如何执行-js代码" class="headerlink" title="1、js引擎如何执行 js代码"></a>1、js引擎如何执行 js代码</h3><p><strong>先进行语法校验，再进行预解析，最后执行代码</strong></p><ul><li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p></li><li><p>代码执行： 从上到下执行JS语句。</p><p><strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p></li></ul><h4 id="1、语法校验阶段报错"><a href="#1、语法校验阶段报错" class="headerlink" title="1、语法校验阶段报错:"></a>1、语法校验阶段报错:</h4><p>整个js 文件都不会运行 (了解)</p><h4 id="2、代码执行阶段报错"><a href="#2、代码执行阶段报错" class="headerlink" title="2、代码执行阶段报错:"></a>2、代码执行阶段报错:</h4><p>从当前位置开始下面的js 都不会执行 (了解)</p><h3 id="2、变量预解析"><a href="#2、变量预解析" class="headerlink" title="2、变量预解析"></a>2、变量预解析</h3><p>变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</p><h3 id="3、函数预解析"><a href="#3、函数预解析" class="headerlink" title="3、函数预解析"></a>3、函数预解析</h3><p>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p><p>函数表达式提升？ <strong>不存在函数提升，只存在变量提升</strong></p><p>（拓展）函数和变量同时提升: </p><p>​    // 函数声明的优先级高于变量声明，但不高于变量赋值</p><h2 id="七、对象（object）"><a href="#七、对象（object）" class="headerlink" title="七、对象（object）"></a>七、对象（object）</h2><h3 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h3><p>对象是一组无无序的相关属性和方法的集合，所有的事物都是对象</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h3 id="2、创建对象的三种方法"><a href="#2、创建对象的三种方法" class="headerlink" title="2、创建对象的三种方法"></a>2、创建对象的三种方法</h3><h4 id="1、字面量创建对象"><a href="#1、字面量创建对象" class="headerlink" title="1、字面量创建对象"></a>1、字面量创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = ｛<br><br>属性<span class="hljs-number">1</span>：<span class="hljs-string">&#x27;&#x27;</span>,<br>属性<span class="hljs-number">2</span>：<span class="hljs-string">&#x27;&#x27;</span>,<br>方法名：<span class="hljs-function"><span class="hljs-keyword">function</span>（）｛...｝；//方法冒号后面跟的是匿名函数</span><br><span class="hljs-function">｝//注意：属性之间要用逗号隔开</span><br></code></pre></td></tr></table></figure><p>调用对象属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">（<span class="hljs-number">1</span>）<span class="hljs-built_in">console</span>.log(变量名.属性<span class="hljs-number">1</span>)<br><br>（<span class="hljs-number">2</span>）<span class="hljs-built_in">console</span>.log(变量名[<span class="hljs-string">&#x27;属性1&#x27;</span>])<br></code></pre></td></tr></table></figure><p>调用对象方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">变量名.方法名；<br></code></pre></td></tr></table></figure><h4 id="2、利用new-Object-创建对象"><a href="#2、利用new-Object-创建对象" class="headerlink" title="2、利用new Object 创建对象"></a>2、利用new Object 创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> andy = <span class="hljs-keyword">new</span> Obect();<br></code></pre></td></tr></table></figure><p>添加对象属性使用的格式：对象.属性 =  值;</p><h4 id="3、利用构造函数创建对象"><a href="#3、利用构造函数创建对象" class="headerlink" title="3、利用构造函数创建对象"></a>3、利用构造函数创建对象</h4><p>格式：</p><pre><code> function 构造函数名(形参1,形参2,形参3) &#123; this.属性名1 = 参数1; this.属性名2 = 参数2; this.属性名3 = 参数3; this.方法名 = 函数体; &#125;</code></pre><p>调用格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> 构造函数名(实参<span class="hljs-number">1</span>，实参<span class="hljs-number">2</span>，实参<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><ul><li>构造函数约定<strong>首字母大写</strong>。</li><li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>构造函数中<strong>不需要 return 返回结果</strong>。</li><li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ul><h3 id="3、new关键字执行过程★★★★★"><a href="#3、new关键字执行过程★★★★★" class="headerlink" title="3、new关键字执行过程★★★★★"></a>3、<strong>new关键字执行过程★★★★★</strong></h3><ol><li>首先在内存中新增一块内存空间，存放将要创建的对象</li><li>用this关键字指向内存空间</li><li>this添加属性方法</li><li>添加完成后，返回这个this，完成创建对象</li></ol><h3 id="4、遍历对象"><a href="#4、遍历对象" class="headerlink" title="4、遍历对象"></a>4、遍历对象</h3><p>for (变量 in 对象名字) {</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 对象名字) &#123;<br><span class="hljs-comment">// 在此执行代码</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj) &#123;<br><span class="hljs-built_in">console</span>.log(k);      <span class="hljs-comment">// 这里的 k 是属性名</span><br><span class="hljs-built_in">console</span>.log(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础第六天</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第06天笔记"><a href="#JavaScript基础第06天笔记" class="headerlink" title="JavaScript基础第06天笔记"></a>JavaScript基础第06天笔记</h1><h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1 - 内置对象"></a>1 - 内置对象</h2><h3 id="1-1-内置对象"><a href="#1-1-内置对象" class="headerlink" title="1.1 内置对象"></a>1.1 内置对象</h3><p>​         JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    </p><h3 id="1-2-查文档"><a href="#1-2-查文档" class="headerlink" title="1.2 查文档"></a>1.2 查文档</h3><p>​        查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。<br>​        Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>​        MDN:<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="1-3-Math对象"><a href="#1-3-Math对象" class="headerlink" title="1.3 Math对象"></a>1.3 Math对象</h3><p>​        Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​    注意：上面的方法使用时必须带括号</p><p>​    <strong>获取指定范围内的随机整数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-日期对象"><a href="#1-4-日期对象" class="headerlink" title="1.4 日期对象"></a>1.4 日期对象</h3><p>​         Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用Date实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> future = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2019/5/1&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></li><li><p>使用Date实例的方法和属性    </p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片1.png"></p></li><li><p>通过Date实例获取总毫米数</p><ul><li><p>总毫秒数的含义</p><p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实例化Date对象</span><br><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-comment">// 1. 用于获取对象的原始值</span><br><span class="hljs-built_in">console</span>.log(date.valueOf())<br><span class="hljs-built_in">console</span>.log(date.getTime())<br><span class="hljs-comment">// 2. 简单写可以这么做</span><br><span class="hljs-keyword">var</span> now = + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-comment">// 3. HTML5中提供的方法，有兼容性问题</span><br><span class="hljs-keyword">var</span> now = <span class="hljs-built_in">Date</span>.now();<br></code></pre></td></tr></table></figure><h3 id="1-5-数组对象"><a href="#1-5-数组对象" class="headerlink" title="1.5 数组对象"></a>1.5 数组对象</h3></li></ul></li></ul><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-type">Array</span>();<br></code></pre></td></tr></table></figure><p>​    注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p><p>​    参数传递规则如下：</p><ul><li><p>如果只传入一个参数，则参数规定了数组的长度</p></li><li><p>如果传入了多个参数，则参数称为数组的元素</p></li></ul></li></ul></li></ul><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">console</span>.log(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr));   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(obj));   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4></li></ul></li><li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片2.png"></p><p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p></li></ul><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片3.png"></p><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片4.png"></p></li></ul><h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片5.png"></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p>  <img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片6.png"></p></li></ul><h3 id="1-6-字符串对象"><a href="#1-6-字符串对象" class="headerlink" title="1.6 字符串对象"></a>1.6 字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>​        为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>​        基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 下面代码有什么问题？</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;andy&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.length);<br></code></pre></td></tr></table></figure><p>​        按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>​        js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">// 2. 赋值给我们声明的字符变量</span><br>str = temp;<br><span class="hljs-comment">// 3. 销毁临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>​        指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>​        当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>​        由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片7.png"></p><p>​        案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li>先查找第一个o出现的位置</li><li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找     </li></ol><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片8.png"></p><p>​        在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片9.png"></p><p>​        案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p></li><li><p>遍历对象，得到最大值和该字符     </p><p>​    注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片10.png"></p><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>​        replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">字符串.<span class="hljs-built_in">replace</span>(被替换的字符串， 要替换为的字符串)；<br></code></pre></td></tr></table></figure><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>​        split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>​        其使用格式如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">字符串.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;分割字符&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-简单数据类型和复杂数据类型"><a href="#2-简单数据类型和复杂数据类型" class="headerlink" title="2 - 简单数据类型和复杂数据类型"></a>2 - 简单数据类型和复杂数据类型</h2><h3 id="2-1-简单数据类型"><a href="#2-1-简单数据类型" class="headerlink" title="2.1 简单数据类型"></a>2.1 简单数据类型</h3><p>​        <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="2-2-复杂数据类型"><a href="#2-2-复杂数据类型" class="headerlink" title="2.2 复杂数据类型"></a>2.2 复杂数据类型</h3><p>​        <strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="2-3-堆栈"><a href="#2-3-堆栈" class="headerlink" title="2.3 堆栈"></a>2.3 堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片11.png"></p><ul><li><p>简单数据类型的存储方式</p><p>​        值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片12.png"></p><ul><li><p>复杂数据类型的存储方式</p><p>​        引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片13.png"></p></li></ul><h3 id="2-4-简单类型传参"><a href="#2-4-简单类型传参" class="headerlink" title="2.4 简单类型传参"></a>2.4 简单类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    a++;<br>    <span class="hljs-built_in">console</span>.log(a); <br>&#125;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br>fn(x);<br><span class="hljs-built_in">console</span>.log(x)；<br></code></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片14.png"></p><h3 id="2-5-复杂数据类型传参"><a href="#2-5-复杂数据类型传参" class="headerlink" title="2.5 复杂数据类型传参"></a>2.5 复杂数据类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>) </span>&#123; <span class="hljs-comment">// x = p</span><br>    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 2. 这个输出什么 ?    </span><br>    x.name = <span class="hljs-string">&quot;张学友&quot;</span>;<br>    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 3. 这个输出什么 ?    </span><br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;刘德华&quot;</span>);<br><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 1. 这个输出什么 ?   </span><br>f1(p);<br><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 4. 这个输出什么 ?  </span><br></code></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/Users\ytt5023\Desktop\笔记\JS基础\images\6\图片15.png"></p>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第一天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC01%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC01%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-API第一天"><a href="#Web-API第一天" class="headerlink" title="Web API第一天"></a>Web API第一天</h1><h2 id="一、Web-API介绍"><a href="#一、Web-API介绍" class="headerlink" title="一、Web API介绍"></a>一、Web API介绍</h2><h3 id="1-API介绍"><a href="#1-API介绍" class="headerlink" title="1.API介绍"></a>1.API介绍</h3><p>（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，只需直接调用使用即可。</p><h3 id="2、Web-API的概念"><a href="#2、Web-API的概念" class="headerlink" title="2、Web  API的概念"></a>2、Web  API的概念</h3><p>Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p><p>MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><h3 id="3、API-和-Web-API-总结"><a href="#3、API-和-Web-API-总结" class="headerlink" title="3、API 和 Web  API 总结"></a>3、API 和 Web  API 总结</h3><ol><li>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</li><li>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</li><li>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</li><li>学习 Web API 可以结合前面学习内置对象方法的思路学习</li></ol><h3 id="4、JS组成"><a href="#4、JS组成" class="headerlink" title="4、JS组成"></a>4、JS组成</h3><ol><li>ECMAscript 指定的标准语法</li><li>DOM(文档对象模型) 网页</li><li>BOM(浏览器对象模型) 浏览器</li></ol><h2 id="二、DOM数"><a href="#二、DOM数" class="headerlink" title="二、DOM数"></a>二、DOM数</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>文档对象模型（Document Object Model，简称DOM），是 <a href="https://baike.baidu.com/item/W3C">W3C</a> 组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80">可扩展标记语言</a>（html或者xhtml）的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">编程接口</a>。</p><h3 id="2、组成"><a href="#2、组成" class="headerlink" title="2、组成"></a>2、组成</h3><p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p><ul><li>文档：一个页面就是一个文档，DOM中使用document表示</li><li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li><li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li></ul><p><strong>DOM把以上内容都看做是对象</strong></p><h2 id="三、获取元素"><a href="#三、获取元素" class="headerlink" title="三、获取元素"></a>三、获取元素</h2><h3 id="1、根据元素的id名称"><a href="#1、根据元素的id名称" class="headerlink" title="1、根据元素的id名称"></a>1、根据元素的id名称</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementById(&#x27;id名称&#x27;)不需要加#号<br></code></pre></td></tr></table></figure><h3 id="2、-根据元素的标签名"><a href="#2、-根据元素的标签名" class="headerlink" title="2、 根据元素的标签名"></a>2、 根据元素的标签名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementsByTagName(<span class="hljs-string">&#x27;标签名&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、根据元素的类名"><a href="#3、根据元素的类名" class="headerlink" title="3、根据元素的类名"></a>3、根据元素的类名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementsByClassName(<span class="hljs-string">&#x27;类名&#x27;</span>) <span class="hljs-comment">//不需要加.</span><br></code></pre></td></tr></table></figure><h3 id="4、★根据-css-选择器字符串来获取符合条件的第一个元素"><a href="#4、★根据-css-选择器字符串来获取符合条件的第一个元素" class="headerlink" title="4、★根据 css 选择器字符串来获取符合条件的第一个元素"></a>4、★根据 css 选择器字符串来获取符合条件的第一个元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">querySelector(<span class="hljs-string">&#x27;css选择器&#x27;</span>)<span class="hljs-comment">// # . ul&gt;li ul li</span><br></code></pre></td></tr></table></figure><p><strong>返回的是单个元素</strong></p><ul><li>伪类选择器 :checked :disabled</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">querySelector(<span class="hljs-string">&#x27;:checked&#x27;</span>)<span class="hljs-comment">//checked,disabled,selected</span><br></code></pre></td></tr></table></figure><h3 id="5、-根据-css-选择器字符串来获取符合条件的所有元素"><a href="#5、-根据-css-选择器字符串来获取符合条件的所有元素" class="headerlink" title="5、 根据 css 选择器字符串来获取符合条件的所有元素"></a>5、 根据 css 选择器字符串来获取符合条件的所有元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">querySelectorAll(<span class="hljs-string">&#x27;css选择器&#x27;</span>) <span class="hljs-comment">//# . ul&gt;li ul li</span><br></code></pre></td></tr></table></figure><p><strong>返回的结果是元素对象集合，伪数组</strong></p><p><strong>注意: api名称中带有 elements, children, all 返回的都是伪数组</strong></p><h3 id="6、获取特殊元素（body，html）"><a href="#6、获取特殊元素（body，html）" class="headerlink" title="6、获取特殊元素（body，html）"></a>6、获取特殊元素（body，html）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">documents.body<span class="hljs-comment">//返回body元素对象</span><br>documents.documentElement<span class="hljs-comment">//返回html元素对象</span><br></code></pre></td></tr></table></figure><h3 id="7、所有操作元素的方法都必须是单个元素对象"><a href="#7、所有操作元素的方法都必须是单个元素对象" class="headerlink" title="7、所有操作元素的方法都必须是单个元素对象"></a>7、<strong>所有操作元素的方法都必须是单个元素对象</strong></h3><h2 id="四、事件基础"><a href="#四、事件基础" class="headerlink" title="四、事件基础"></a>四、事件基础</h2><h3 id="1、事件概述"><a href="#1、事件概述" class="headerlink" title="1、事件概述"></a>1、事件概述</h3><p><strong>触发— 响应机制</strong>。</p><h3 id="2、事件三要素"><a href="#2、事件三要素" class="headerlink" title="2、事件三要素"></a>2、事件三要素</h3><ul><li>事件源（谁）：触发事件的元素</li><li>事件类型（什么事件）： 例如 click 点击事件<ul><li>onclick</li><li>onfoucs</li><li>onblur</li></ul></li><li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li></ul><p><strong>事件源.事件类型 = 事件处理函数</strong></p><h3 id="3、执行事件的步骤"><a href="#3、执行事件的步骤" class="headerlink" title="3、执行事件的步骤"></a>3、执行事件的步骤</h3><ul><li>获取事件源</li><li>绑定事件</li><li>添加事件处理程序（采取函数值形式）</li></ul><p><strong>注意: 事件不触发, 事件处理函数不执行</strong></p><p><strong>事件处理函数中的this：指向事件源，事件的绑定者</strong></p><h3 id="4、常见的鼠标事件"><a href="#4、常见的鼠标事件" class="headerlink" title="4、常见的鼠标事件"></a>4、常见的鼠标事件</h3><p>![web api01_2](\img\web api01_2.png)</p><h2 id="五、操作元素"><a href="#五、操作元素" class="headerlink" title="五、操作元素"></a>五、操作元素</h2><h3 id="1、改变元素内容（获取或设置）"><a href="#1、改变元素内容（获取或设置）" class="headerlink" title="1、改变元素内容（获取或设置）"></a>1、改变元素内容（获取或设置）</h3><p>![web api01_2](\img\web api01_2.png)</p><p>区别:</p><ul><li>innerHTML 保留空格和换行, 并支持 html 字符串标签;</li><li> 反之, innerText 只能修改纯文字; 他们都是可读写属性</li></ul><h3 id="2、常见元素的属性操作"><a href="#2、常见元素的属性操作" class="headerlink" title="2、常见元素的属性操作"></a>2、常见元素的属性操作</h3><p>src、href、tilte、alt</p><p>表单元素的属性：</p><p>value、type</p><p>都只能设置为布尔值（true  false）：checked、disabled、selected</p><h2 id="六、操作元素样式"><a href="#六、操作元素样式" class="headerlink" title="六、操作元素样式"></a>六、操作元素样式</h2><h3 id="1、修改元素的内联样式"><a href="#1、修改元素的内联样式" class="headerlink" title="1、修改元素的内联样式"></a>1、修改元素的内联样式</h3><p>元素对象.style.样式属性 = 值;</p><p>属性名必须要遵守驼峰命名 ：font-size ==&gt; fontSize</p><p>值一定是字符串, 带上单位’300px’</p><h3 id="2、-修改元素的类名"><a href="#2、-修改元素的类名" class="headerlink" title="2、 修改元素的类名"></a>2、 修改元素的类名</h3><p>ele.className = 值</p><p>多类名的情况,要加空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;style&gt;<br>        .box &#123;<br>            width: 100px;<br>            height: 100px;<br>            background-color: #ccc;<br>            border: 1px solid;<br>        &#125;<br>        <br>        .big &#123;<br>            height: 200px;<br>            width: 200px;<br>            background-color: pink;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;pre&gt;<br>    操作元素样式的两种方法：<br>    <span class="hljs-number">1.</span> element.style.属性名: 修改元素的样式属性 (内联样式)<br>    <span class="hljs-number">2.</span> element.className: 修改类名的方式<br>  &lt;/pre&gt;<br>    &lt;hr&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;点击盒子&lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>);<br>        box.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(1);</span><br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;box big&#x27;</span>; <span class="hljs-comment">//修改类名</span><br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(box.className);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第五天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day05-Web-APIs"><a href="#day05-Web-APIs" class="headerlink" title="day05 - Web APIs"></a><strong>day05 - Web APIs</strong></h1><h2 id="1-1-元素偏移量-offset-系列"><a href="#1-1-元素偏移量-offset-系列" class="headerlink" title="**1.1. **元素偏移量 offset 系列"></a>**1.1. **元素偏移量 offset 系列</h2><h3 id="1-1-1-offset-概述"><a href="#1-1-1-offset-概述" class="headerlink" title="1.1.1 offset 概述"></a>1.1.1 offset 概述</h3><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ol><li><p>获得元素距离带有定位父元素的位置</p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意：返回的数值都不带单位</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p></li></ol><p>![图片2](F:\Web APIs\Web APIs 第五天\笔记\images\图片2.png)</p><h3 id="1-1-2-offset-与-style-区别"><a href="#1-1-2-offset-与-style-区别" class="headerlink" title="1.1.2 offset 与 style 区别"></a>1.1.2 offset 与 style 区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ul><li><p>offset 可以得到任意样式表中的样式值</p></li><li><p>offset 系列获得的数值是没有单位的</p></li><li><p>offsetWidth 包含padding+border+width</p></li><li><p>offsetWidth 等属性是只读属性，只能获取不能赋值</p></li><li><blockquote><p>所以，我们想要获取元素大小位置，用offset更合适</p></blockquote></li></ul><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><p>style 只能得到行内样式表中的样式值</p></li><li><p>style.width 获得的是带有单位的字符串</p></li><li><p>style.width 获得不包含padding和border 的值</p></li><li><p>style.width 是可读写属性，可以获取也可以赋值</p></li><li><blockquote><p>所以，我们想要给元素更改值，则需要用style改变</p></blockquote></li></ul><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="1-1-3-案例：获取鼠标在盒子内的坐标"><a href="#1-1-3-案例：获取鼠标在盒子内的坐标" class="headerlink" title="1.1.3  案例：获取鼠标在盒子内的坐标"></a>1.1.3  案例：获取鼠标在盒子内的坐标</h3><ol><li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li><li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li><li>其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)</li><li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标</li><li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>);<br>box.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br><span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-built_in">this</span>.offsetLeft;<br><span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-built_in">this</span>.offsetTop;<br><span class="hljs-built_in">this</span>.innerHTML = <span class="hljs-string">&#x27;x坐标是&#x27;</span> + x + <span class="hljs-string">&#x27; y坐标是&#x27;</span> + y;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：模态框拖拽"><a href="#1-1-4-案例：模态框拖拽" class="headerlink" title="1.1.4  案例：模态框拖拽"></a>1.1.4  案例：模态框拖拽</h3><p>弹出框，我们也称为模态框。</p><p>​    1.点击弹出层，会弹出模态框， 并且显示灰色半透明的遮挡层。</p><p>​    2.点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</p><p>​    3.鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</p><p>​    4.鼠标松开，可以停止拖动模态框移动</p><h3 id="1-1-5-案例分析"><a href="#1-1-5-案例分析" class="headerlink" title="1.1.5. 案例分析:"></a>1.1.5. 案例分析:</h3><ol><li>点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li><li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li><li>在页面中拖拽的原理：鼠标按下并且移动， 之后松开鼠标</li><li>触发事件是鼠标按下mousedown，鼠标移动mousemove 鼠标松开 mouseup</li><li>拖拽过程:  鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li><li>鼠标按下触发的事件源是最上面一行，就是  id 为 title </li><li>鼠标的坐标减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li><li>鼠标按下，我们要得到鼠标在盒子的坐标。</li><li>鼠标移动，就让模态框的坐标  设置为  ：鼠标坐标 减去盒子坐标即可，注意移动事件写到按下事件里面。</li><li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 获取元素</span><br>       <span class="hljs-keyword">var</span> login = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.login&#x27;</span>);<br>       <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.login-bg&#x27;</span>);<br>       <span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#link&#x27;</span>);<br>       <span class="hljs-keyword">var</span> closeBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#closeBtn&#x27;</span>);<br>       <span class="hljs-keyword">var</span> title = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#title&#x27;</span>);<br>       <span class="hljs-comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span><br>       link.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               mask.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>               login.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>           &#125;)<br>           <span class="hljs-comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span><br>       closeBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               mask.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>               login.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>           &#125;)<br>           <span class="hljs-comment">// 4. 开始拖拽</span><br>           <span class="hljs-comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span><br>       title.addEventListener(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> x = e.pageX - login.offsetLeft;<br>           <span class="hljs-keyword">var</span> y = e.pageY - login.offsetTop;<br>           <span class="hljs-comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span><br>           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move)<br><br>           <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params">e</span>) </span>&#123;<br>               login.style.left = e.pageX - x + <span class="hljs-string">&#x27;px&#x27;</span>;<br>               login.style.top = e.pageY - y + <span class="hljs-string">&#x27;px&#x27;</span>;<br>           &#125;<br>           <span class="hljs-comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span><br>           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move);<br>           &#125;)<br>       &#125;)<br><br></code></pre></td></tr></table></figure><h3 id="1-1-6-案例：仿京东放大镜"><a href="#1-1-6-案例：仿京东放大镜" class="headerlink" title="1.1.6  案例：仿京东放大镜"></a>1.1.6  案例：仿京东放大镜</h3><ol><li>整个案例可以分为三个功能模块</li><li>鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能</li><li>黄色的遮挡层跟随鼠标功能。 </li><li>移动黄色遮挡层，大图片跟随移动功能。</li></ol><h3 id="1-1-7-案例分析"><a href="#1-1-7-案例分析" class="headerlink" title="1.1.7. 案例分析:"></a>1.1.7. 案例分析:</h3><ol><li>黄色的遮挡层跟随鼠标功能。</li><li>把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。</li><li>首先是获得鼠标在盒子的坐标。 </li><li>之后把数值给遮挡层做为left 和top值。</li><li>此时用到鼠标移动事件，但是还是在小图片盒子内移动。</li><li>发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。</li><li>遮挡层不能超出小图片盒子范围。</li><li>如果小于零，就把坐标设置为0</li><li>如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离</li><li>遮挡层的最大移动距离：小图片盒子宽度 减去 遮挡层盒子宽度</li></ol><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C1551881487(1).png" alt="1551881487(1)"></p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C1551881563(1).jpg" alt="1551881563(1)"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> preview_img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.preview_img&#x27;</span>);<br>    <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.mask&#x27;</span>);<br>    <span class="hljs-keyword">var</span> big = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.big&#x27;</span>);<br>    <span class="hljs-comment">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span><br>    preview_img.addEventListener(<span class="hljs-string">&#x27;mouseover&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        mask.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        big.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>    &#125;)<br>    preview_img.addEventListener(<span class="hljs-string">&#x27;mouseout&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            mask.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            big.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        &#125;)<br>        <span class="hljs-comment">// 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span><br>    preview_img.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// (1). 先计算出鼠标在盒子内的坐标</span><br>        <span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-built_in">this</span>.offsetLeft;<br>        <span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-built_in">this</span>.offsetTop;<br>        <span class="hljs-comment">// console.log(x, y);</span><br>        <span class="hljs-comment">// (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span><br>        <span class="hljs-comment">// (3) 我们mask 移动的距离</span><br>        <span class="hljs-keyword">var</span> maskX = x - mask.offsetWidth / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">var</span> maskY = y - mask.offsetHeight / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// (4) 如果x 坐标小于了0 就让他停在0 的位置</span><br>        <span class="hljs-comment">// 遮挡层的最大移动距离</span><br>        <span class="hljs-keyword">var</span> maskMax = preview_img.offsetWidth - mask.offsetWidth;<br>        <span class="hljs-keyword">if</span> (maskX &lt;= <span class="hljs-number">0</span>) &#123;<br>            maskX = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskX &gt;= maskMax) &#123;<br>            maskX = maskMax;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (maskY &lt;= <span class="hljs-number">0</span>) &#123;<br>            maskY = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskY &gt;= maskMax) &#123;<br>            maskY = maskMax;<br>        &#125;<br>        mask.style.left = maskX + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        mask.style.top = maskY + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        <span class="hljs-comment">// 3. 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span><br>        <span class="hljs-comment">// 大图</span><br>        <span class="hljs-keyword">var</span> bigIMg = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.bigImg&#x27;</span>);<br>        <span class="hljs-comment">// 大图片最大移动距离</span><br>        <span class="hljs-keyword">var</span> bigMax = bigIMg.offsetWidth - big.offsetWidth;<br>        <span class="hljs-comment">// 大图片的移动距离 X Y</span><br>        <span class="hljs-keyword">var</span> bigX = maskX * bigMax / maskMax;<br>        <span class="hljs-keyword">var</span> bigY = maskY * bigMax / maskMax;<br>        bigIMg.style.left = -bigX + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        bigIMg.style.top = -bigY + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>    &#125;)<br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="1-2-元素可视区-client-系列"><a href="#1-2-元素可视区-client-系列" class="headerlink" title="1.2. 元素可视区 client 系列"></a>1.2. 元素可视区 client 系列</h2><h3 id="1-2-1-client概述"><a href="#1-2-1-client概述" class="headerlink" title="1.2.1 client概述"></a>1.2.1 client概述</h3><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C%E5%9B%BE%E7%89%874.png" alt="图片4"></p><h3 id="1-2-2-淘宝-flexible-js-源码分析"><a href="#1-2-2-淘宝-flexible-js-源码分析" class="headerlink" title="1.2.2. 淘宝 flexible.js 源码分析"></a>1.2.2. 淘宝 flexible.js 源码分析</h3><p>立即执行函数 (function(){})()  或者 (function(){}())</p><p>主要作用： 创建一个独立的作用域。 避免了命名冲突问题</p><p>下面三种情况都会刷新页面都会触发 load 事件。</p><p>1.a标签的超链接</p><p>2.F5或者刷新按钮（强制刷新）</p><p>3.前进后退按钮</p><p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。</p><p>所以此时后退按钮不能刷新页面。</p><p>此时可以使用 pageshow事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件</p><p><code>注意这个事件给window添加。</code></p><h2 id="1-3-元素滚动-scroll-系列"><a href="#1-3-元素滚动-scroll-系列" class="headerlink" title="1.3.元素滚动 scroll 系列"></a>1.3.元素滚动 scroll 系列</h2><h3 id="1-3-1-scroll-概述"><a href="#1-3-1-scroll-概述" class="headerlink" title="1.3.1. scroll 概述"></a>1.3.1. scroll 概述</h3><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C%E5%9B%BE%E7%89%875.png" alt="图片5"></p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C%E5%9B%BE%E7%89%876.png" alt="图片6"></p><h3 id="1-3-2-页面被卷去的头部"><a href="#1-3-2-页面被卷去的头部" class="headerlink" title="1.3.2. 页面被卷去的头部"></a>1.3.2. 页面被卷去的头部</h3><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件。</p><h3 id="1-3-3-案例：仿淘宝固定右侧侧边栏"><a href="#1-3-3-案例：仿淘宝固定右侧侧边栏" class="headerlink" title="1.3.3.案例：仿淘宝固定右侧侧边栏"></a>1.3.3.案例：仿淘宝固定右侧侧边栏</h3><ol><li>原先侧边栏是绝对定位</li><li>当页面滚动到一定位置，侧边栏改为固定定位</li><li>页面继续滚动，会让 返回顶部显示出来</li></ol><h3 id="1-3-4-案例分析"><a href="#1-3-4-案例分析" class="headerlink" title="1.3.4.案例分析:"></a>1.3.4.案例分析:</h3><ol><li>需要用到页面滚动事件 scroll  因为是页面滚动，所以事件源是document</li><li>滚动到某个位置，就是判断页面被卷去的上部值。</li><li>页面被卷去的头部：可以通过window.pageYOffset 获得  如果是被卷去的左侧window.pageXOffset</li><li>注意，元素被卷去的头部是element.scrollTop  , 如果是页面被卷去的头部 则是 window.pageYOffset</li><li>其实这个值 可以通过盒子的 offsetTop可以得到，如果大于等于这个值，就可以让盒子固定定位了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 获取元素</span><br>      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.slider-bar&#x27;</span>);<br>      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.banner&#x27;</span>);<br>      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span><br>      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop<br>          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span><br>      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;<br>      <span class="hljs-comment">// 获取main 主体元素</span><br>      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.main&#x27;</span>);<br>      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.goBack&#x27;</span>);<br>      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;<br>      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// console.log(11);</span><br>          <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span><br>          <span class="hljs-comment">// console.log(window.pageYOffset);</span><br>          <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;<br>              sliderbar.style.position = <span class="hljs-string">&#x27;fixed&#x27;</span>;<br>              sliderbar.style.top = sliderbarTop + <span class="hljs-string">&#x27;px&#x27;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              sliderbar.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br>              sliderbar.style.top = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>          &#125;<br>          <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;<br>              goBack.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              goBack.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>          &#125;<br><br>      &#125;)<br></code></pre></td></tr></table></figure><h3 id="1-3-5-页面被卷去的头部兼容性解决方案"><a href="#1-3-5-页面被卷去的头部兼容性解决方案" class="headerlink" title="1.3.5.页面被卷去的头部兼容性解决方案"></a>1.3.5.页面被卷去的头部兼容性解决方案</h3><p>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</p><ol><li>声明了 DTD，使用 document.documentElement.scrollTop</li><li>未声明 DTD，使用  document.body.scrollTop</li><li>新方法 window.pageYOffset和 window.pageXOffset，IE9 开始支持</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScroll</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      left: <span class="hljs-built_in">window</span>.pageXOffset || <span class="hljs-built_in">document</span>.documentElement.scrollLeft || <span class="hljs-built_in">document</span>.body.scrollLeft||<span class="hljs-number">0</span>,<br>      top: <span class="hljs-built_in">window</span>.pageYOffset || <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-number">0</span><br>    &#125;;<br> &#125; <br>使用的时候  getScroll().left<br><br></code></pre></td></tr></table></figure><h2 id="1-4-三大系列总结"><a href="#1-4-三大系列总结" class="headerlink" title="1.4. 三大系列总结"></a>1.4. 三大系列总结</h2><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC05%E5%A4%A9/images%5C%E5%9B%BE%E7%89%877.png" alt="图片7"></p><p>他们主要用法：</p><p>1.offset系列 经常用于获得元素位置    offsetLeft  offsetTop</p><p>2.client经常用于获取元素大小  clientWidth clientHeight</p><p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p><p>4.注意页面滚动的距离通过 window.pageXOffset  获得</p><h2 id="1-5-mouseenter-和mouseover的区别"><a href="#1-5-mouseenter-和mouseover的区别" class="headerlink" title="1.5. mouseenter 和mouseover的区别"></a>1.5. mouseenter 和mouseover的区别</h2><ul><li>当鼠标移动到元素上时就会触发mouseenter 事件</li><li>类似 mouseover，它们两者之间的差别是</li><li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</li><li>之所以这样，就是因为mouseenter不会冒泡</li><li>跟mouseenter搭配鼠标离开 mouseleave  同样不会冒泡</li></ul><h2 id="1-6-动画函数封装"><a href="#1-6-动画函数封装" class="headerlink" title="1.6. 动画函数封装"></a>1.6. 动画函数封装</h2><h3 id="1-6-1-动画实现原理"><a href="#1-6-1-动画实现原理" class="headerlink" title="1.6.1. 动画实现原理"></a>1.6.1. 动画实现原理</h3><blockquote><p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p></blockquote><p>实现步骤：</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h3 id="1-6-2-动画函数给不同元素记录不同定时器"><a href="#1-6-2-动画函数给不同元素记录不同定时器" class="headerlink" title="1.6.2. 动画函数给不同元素记录不同定时器"></a>1.6.2. 动画函数给不同元素记录不同定时器</h3><p>如果多个元素都使用这个动画函数，每次都要var 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><blockquote><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target</span>) </span>&#123;<br>           <span class="hljs-comment">// 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</span><br>           <span class="hljs-comment">// 解决方案就是 让我们元素只有一个定时器执行</span><br>           <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span><br>           <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>           obj.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-keyword">if</span> (obj.offsetLeft &gt;= target) &#123;<br>                   <span class="hljs-comment">// 停止动画 本质是停止定时器</span><br>                   <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>               &#125;<br>               obj.style.left = obj.offsetLeft + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>           &#125;, <span class="hljs-number">30</span>);<br>       &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第六天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC06%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC06%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day06-Web-APIs"><a href="#day06-Web-APIs" class="headerlink" title="day06 - Web APIs"></a><strong>day06 - Web APIs</strong></h1><h2 id="1-1-动画函数封装"><a href="#1-1-动画函数封装" class="headerlink" title="**1.1. **动画函数封装"></a>**1.1. **动画函数封装</h2><h3 id="1-1-1-缓动效果原理"><a href="#1-1-1-缓动效果原理" class="headerlink" title="1.1.1 缓动效果原理"></a>1.1.1 缓动效果原理</h3><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><p>思路：</p><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li>核心算法： (目标值 - 现在的位置)   /  10    做为每次移动的距离步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器  </li><li>注意步长值需要取整  </li></ol><h3 id="1-1-2-动画函数多个目标值之间移动"><a href="#1-1-2-动画函数多个目标值之间移动" class="headerlink" title="1.1.2 动画函数多个目标值之间移动"></a>1.1.2 动画函数多个目标值之间移动</h3><p>可以让动画函数从 800 移动到 500。</p><p>当我们点击按钮时候，判断步长是正值还是负值</p><p>​    1.如果是正值，则步长往大了取整</p><p>​    2.如果是负值，则步长 向小了取整</p><h3 id="1-1-3-动函数添加回调函数"><a href="#1-1-3-动函数添加回调函数" class="headerlink" title="1.1.3  动函数添加回调函数"></a>1.1.3  动函数添加回调函数</h3><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p><p>回调函数写的位置：定时器结束的位置。</p><h3 id="1-1-4-动画完整版代码"><a href="#1-1-4-动画完整版代码" class="headerlink" title="1.1.4  动画完整版代码:"></a>1.1.4  动画完整版代码:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target, callback</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span><br><br>    <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span><br>    <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>    obj.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 步长值写到定时器的里面</span><br>        <span class="hljs-comment">// 把我们步长值改为整数 不要出现小数的问题</span><br>        <span class="hljs-comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span><br>        <span class="hljs-keyword">var</span> step = (target - obj.offsetLeft) / <span class="hljs-number">10</span>;<br>        step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.ceil(step) : <span class="hljs-built_in">Math</span>.floor(step);<br>        <span class="hljs-keyword">if</span> (obj.offsetLeft == target) &#123;<br>            <span class="hljs-comment">// 停止动画 本质是停止定时器</span><br>            <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>            <span class="hljs-comment">// 回调函数写到定时器结束里面</span><br>            <span class="hljs-comment">// if (callback) &#123;</span><br>            <span class="hljs-comment">//     // 调用函数</span><br>            <span class="hljs-comment">//     callback();</span><br>            <span class="hljs-comment">// &#125;</span><br>            callback &amp;&amp; callback();<br>        &#125;<br>        <span class="hljs-comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span><br>        obj.style.left = obj.offsetLeft + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>    &#125;, <span class="hljs-number">15</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-常见网页特效案例"><a href="#1-2-常见网页特效案例" class="headerlink" title="1.2. 常见网页特效案例"></a>1.2. 常见网页特效案例</h2><h3 id="1-2-1-案例：网页轮播图"><a href="#1-2-1-案例：网页轮播图" class="headerlink" title="1.2.1 案例：网页轮播图"></a>1.2.1 案例：网页轮播图</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p><p>功能需求：</p><p>​    1.鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</p><p>​    2.点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</p><p>​    3.图片播放的同时，下面小圆圈模块跟随一起变化。</p><p>​    4.点击小圆圈，可以播放相应图片。</p><p>​    5.鼠标不经过轮播图，轮播图也会自动播放图片。</p><p>​    6.鼠标经过，轮播图模块， 自动播放停止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 1. 获取元素</span><br>    <span class="hljs-keyword">var</span> arrow_l = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.arrow-l&#x27;</span>);<br>    <span class="hljs-keyword">var</span> arrow_r = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.arrow-r&#x27;</span>);<br>    <span class="hljs-keyword">var</span> focus = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.focus&#x27;</span>);<br>    <span class="hljs-keyword">var</span> focusWidth = focus.offsetWidth;<br>    <span class="hljs-comment">// 2. 鼠标经过focus 就显示隐藏左右按钮</span><br>    focus.addEventListener(<span class="hljs-string">&#x27;mouseenter&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        arrow_l.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        arrow_r.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        <span class="hljs-built_in">clearInterval</span>(timer);<br>        timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 清除定时器变量</span><br>    &#125;);<br>    focus.addEventListener(<span class="hljs-string">&#x27;mouseleave&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        arrow_l.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        arrow_r.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//手动调用点击事件</span><br>            arrow_r.click();<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;);<br>    <span class="hljs-comment">// 3. 动态生成小圆圈  有几张图片，我就生成几个小圆圈</span><br>    <span class="hljs-keyword">var</span> ul = focus.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">var</span> ol = focus.querySelector(<span class="hljs-string">&#x27;.circle&#x27;</span>);<br>    <span class="hljs-comment">// console.log(ul.children.length);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ul.children.length; i++) &#123;<br>        <span class="hljs-comment">// 创建一个小li </span><br>        <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>        <span class="hljs-comment">// 记录当前小圆圈的索引号 通过自定义属性来做 </span><br>        li.setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>, i);<br>        <span class="hljs-comment">// 把小li插入到ol 里面</span><br>        ol.appendChild(li);<br>        <span class="hljs-comment">// 4. 小圆圈的排他思想 我们可以直接在生成小圆圈的同时直接绑定点击事件</span><br>        li.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 干掉所有人 把所有的小li 清除 current 类名</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ol.children.length; i++) &#123;<br>                ol.children[i].className = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 留下我自己  当前的小li 设置current 类名</span><br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>            <span class="hljs-comment">// 5. 点击小圆圈，移动图片 当然移动的是 ul </span><br>            <span class="hljs-comment">// ul 的移动距离 小圆圈的索引号 乘以 图片的宽度 注意是负值</span><br>            <span class="hljs-comment">// 当我们点击了某个小li 就拿到当前小li 的索引号</span><br>            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>);<br>            <span class="hljs-comment">// 当我们点击了某个小li 就要把这个li 的索引号给 num  </span><br>            num = index;<br>            <span class="hljs-comment">// 当我们点击了某个小li 就要把这个li 的索引号给 circle  </span><br>            circle = index;<br>            <span class="hljs-comment">// num = circle = index;</span><br>            <span class="hljs-built_in">console</span>.log(focusWidth);<br>            <span class="hljs-built_in">console</span>.log(index);<br><br>            animate(ul, -index * focusWidth);<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 把ol里面的第一个小li设置类名为 current</span><br>    ol.children[<span class="hljs-number">0</span>].className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>    <span class="hljs-comment">// 6. 克隆第一张图片(li)放到ul 最后面</span><br>    <span class="hljs-keyword">var</span> first = ul.children[<span class="hljs-number">0</span>].cloneNode(<span class="hljs-literal">true</span>);<br>    ul.appendChild(first);<br>    <span class="hljs-comment">// 7. 点击右侧按钮， 图片滚动一张</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// circle 控制小圆圈的播放</span><br>    <span class="hljs-keyword">var</span> circle = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// flag 节流阀</span><br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>    arrow_r.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 关闭节流阀</span><br>            <span class="hljs-comment">// 如果走到了最后复制的一张图片，此时 我们的ul 要快速复原 left 改为 0</span><br>            <span class="hljs-keyword">if</span> (num == ul.children.length - <span class="hljs-number">1</span>) &#123;<br>                ul.style.left = <span class="hljs-number">0</span>;<br>                num = <span class="hljs-number">0</span>;<br>            &#125;<br>            num++;<br>            animate(ul, -num * focusWidth, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 打开节流阀</span><br>            &#125;);<br>            <span class="hljs-comment">// 8. 点击右侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br>            circle++;<br>            <span class="hljs-comment">// 如果circle == 4 说明走到最后我们克隆的这张图片了 我们就复原</span><br>            <span class="hljs-keyword">if</span> (circle == ol.children.length) &#123;<br>                circle = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 调用函数</span><br>            circleChange();<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 9. 左侧按钮做法</span><br>    arrow_l.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>                num = ul.children.length - <span class="hljs-number">1</span>;<br>                ul.style.left = -num * focusWidth + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>            &#125;<br>            num--;<br>            animate(ul, -num * focusWidth, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;);<br>            <span class="hljs-comment">// 点击左侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br>            circle--;<br>            <span class="hljs-comment">// 如果circle &lt; 0  说明第一张图片，则小圆圈要改为第4个小圆圈（3）</span><br>            <span class="hljs-comment">// if (circle &lt; 0) &#123;</span><br>            <span class="hljs-comment">//     circle = ol.children.length - 1;</span><br>            <span class="hljs-comment">// &#125;</span><br>            circle = circle &lt; <span class="hljs-number">0</span> ? ol.children.length - <span class="hljs-number">1</span> : circle;<br>            <span class="hljs-comment">// 调用函数</span><br>            circleChange();<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">circleChange</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 先清除其余小圆圈的current类名</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ol.children.length; i++) &#123;<br>            ol.children[i].className = <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 留下当前的小圆圈的current类名</span><br>        ol.children[circle].className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 10. 自动播放轮播图</span><br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//手动调用点击事件</span><br>        arrow_r.click();<br>    &#125;, <span class="hljs-number">2000</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-2-2-节流阀"><a href="#1-2-2-节流阀" class="headerlink" title="1.2.2. 节流阀"></a>1.2.2. 节流阀</h3><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</p><p> 开始设置一个变量var flag= true;</p><p>If(flag){flag = false; do something}       关闭水龙头</p><p>利用回调函数动画执行完毕， flag = true     打开水龙头</p><h3 id="1-2-3-案例：返回顶部"><a href="#1-2-3-案例：返回顶部" class="headerlink" title="1.2.3. 案例：返回顶部"></a>1.2.3. 案例：返回顶部</h3><ol><li>带有动画的返回顶部</li><li>此时可以继续使用我们封装的动画函数</li><li>只需要把所有的left 相关的值改为 跟 页面垂直滚动距离相关就可以了</li><li>页面滚动了多少，可以通过 window.pageYOffset 得到</li><li>最后是页面滚动，使用 window.scroll(x,y) </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 获取元素</span><br>      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.slider-bar&#x27;</span>);<br>      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.banner&#x27;</span>);<br>      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span><br>      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop<br>          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span><br>      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;<br>      <span class="hljs-comment">// 获取main 主体元素</span><br>      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.main&#x27;</span>);<br>      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.goBack&#x27;</span>);<br>      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;<br>      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// console.log(11);</span><br>              <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span><br>              <span class="hljs-comment">// console.log(window.pageYOffset);</span><br>              <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;<br>                  sliderbar.style.position = <span class="hljs-string">&#x27;fixed&#x27;</span>;<br>                  sliderbar.style.top = sliderbarTop + <span class="hljs-string">&#x27;px&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  sliderbar.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br>                  sliderbar.style.top = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>              &#125;<br>              <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;<br>                  goBack.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  goBack.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>              &#125;<br><br>          &#125;)<br>          <span class="hljs-comment">// 3. 当我们点击了返回顶部模块，就让窗口滚动的页面的最上方</span><br>      goBack.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 里面的x和y 不跟单位的 直接写数字即可</span><br>          <span class="hljs-comment">// window.scroll(0, 0);</span><br>          <span class="hljs-comment">// 因为是窗口滚动 所以对象是window</span><br>          animate(<span class="hljs-built_in">window</span>, <span class="hljs-number">0</span>);<br>      &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="1-2-4-案例：筋头云案例"><a href="#1-2-4-案例：筋头云案例" class="headerlink" title="1.2.4. 案例：筋头云案例"></a>1.2.4. 案例：筋头云案例</h3><ol><li>利用动画函数做动画效果</li><li>原先筋斗云的起始位置是0</li><li>鼠标经过某个小li，把当前小li的offsetLeft 位置做为目标值即可</li><li>鼠标离开某个小li，就把目标值设为 0</li><li>如果点击了某个小li， 就把li当前的位置存储起来，做为筋斗云的起始位置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-comment">// 1. 获取元素</span><br>           <span class="hljs-keyword">var</span> cloud = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.cloud&#x27;</span>);<br>           <span class="hljs-keyword">var</span> c_nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.c-nav&#x27;</span>);<br>           <span class="hljs-keyword">var</span> lis = c_nav.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>           <span class="hljs-comment">// 2. 给所有的小li绑定事件 </span><br>           <span class="hljs-comment">// 这个current 做为筋斗云的起始位置</span><br>           <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>               <span class="hljs-comment">// (1) 鼠标经过把当前小li 的位置做为目标值</span><br>               lis[i].addEventListener(<span class="hljs-string">&#x27;mouseenter&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   animate(cloud, <span class="hljs-built_in">this</span>.offsetLeft);<br>               &#125;);<br>               <span class="hljs-comment">// (2) 鼠标离开就回到起始的位置 </span><br>               lis[i].addEventListener(<span class="hljs-string">&#x27;mouseleave&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   animate(cloud, current);<br>               &#125;);<br>               <span class="hljs-comment">// (3) 当我们鼠标点击，就把当前位置做为目标值</span><br>               lis[i].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   current = <span class="hljs-built_in">this</span>.offsetLeft;<br>               &#125;);<br>           &#125;<br>       &#125;)<br><br></code></pre></td></tr></table></figure><h2 id="1-3-触屏事件"><a href="#1-3-触屏事件" class="headerlink" title="1.3. 触屏事件"></a>1.3. 触屏事件</h2><h3 id="1-3-1-触屏事件概述"><a href="#1-3-1-触屏事件概述" class="headerlink" title="1.3.1. 触屏事件概述"></a>1.3.1. 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android和 IOS 都有。</p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC06%E5%A4%A9/images%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h3 id="1-3-2-触摸事件对象（TouchEvent）"><a href="#1-3-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.3.2. 触摸事件对象（TouchEvent）"></a>1.3.2. 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC06%E5%A4%A9/images%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p><blockquote><p><code>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</code></p></blockquote><h3 id="1-3-3-案例：移动端拖动元素"><a href="#1-3-3-案例：移动端拖动元素" class="headerlink" title="1.3.3.案例：移动端拖动元素"></a>1.3.3.案例：移动端拖动元素</h3><ol><li><p>touchstart、touchmove、touchend可以实现拖动元素</p></li><li><p>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </p></li><li><p>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</p></li><li><p>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</p><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><p><code>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</code></p><p>​</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第七天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day07-Web-APIs"><a href="#day07-Web-APIs" class="headerlink" title="day07 - Web APIs"></a><strong>day07 - Web APIs</strong></h1><h2 id="1-1-触屏事件"><a href="#1-1-触屏事件" class="headerlink" title="1.1. 触屏事件"></a><strong>1.1. 触屏事件</strong></h2><h3 id="1-1-1-触屏事件概述"><a href="#1-1-1-触屏事件概述" class="headerlink" title="1.1.1 触屏事件概述"></a>1.1.1 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h3 id="1-1-2-触摸事件对象（TouchEvent）"><a href="#1-1-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.1.2 触摸事件对象（TouchEvent）"></a>1.1.2 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="1-1-3-移动端拖动元素"><a href="#1-1-3-移动端拖动元素" class="headerlink" title="1.1.3  移动端拖动元素"></a>1.1.3  移动端拖动元素</h3><ol><li> touchstart、touchmove、touchend 可以实现拖动元素</li><li> 但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li><li> 移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li> 手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</li></ol><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><blockquote><p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p></blockquote><h2 id="1-2-移动端常见特效"><a href="#1-2-移动端常见特效" class="headerlink" title="1.2. 移动端常见特效"></a>1.2. 移动端常见特效</h2><h3 id="1-2-1-案例-移动轮播图"><a href="#1-2-1-案例-移动轮播图" class="headerlink" title="1.2.1 案例: 移动轮播图"></a>1.2.1 案例: 移动轮播图</h3><p><code>移动端轮播图功能和基本PC端一致。</code></p><ol><li>可以自动播放图片</li><li>手指可以拖动播放轮播图</li></ol><h3 id="1-2-2-案例分析"><a href="#1-2-2-案例分析" class="headerlink" title="1.2.2. 案例分析:"></a>1.2.2. 案例分析:</h3><ol><li>自动播放功能</li><li>开启定时器</li><li>移动端移动，可以使用translate 移动</li><li>想要图片优雅的移动，请添加过渡效果<img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551795152(1).jpg" alt="1551795152(1)"></li></ol><ol><li><p>自动播放功能-无缝滚动</p></li><li><p>注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p></li><li><p>此时需要添加检测过渡完成事件  transitionend </p></li><li><p>判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p></li><li><p>此时图片，去掉过渡效果，然后移动</p></li><li><p>如果索引号小于0， 说明是倒着走， 索引号等于2 </p></li><li><p>此时图片，去掉过渡效果，然后移动</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551795483(1).jpg" alt="1551795483(1)"></p></li></ol><h2 id="1-2-3-classList-属性"><a href="#1-2-3-classList-属性" class="headerlink" title="1.2.3 classList 属性"></a>1.2.3 classList 属性</h2><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p><p><strong>添加类：</strong></p><p>element.classList.add（’类名’）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focus.classList.add(<span class="hljs-string">&#x27;current&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>移除类：</strong></p><p>element.classList.remove（’类名’）;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focus.classList.remove(<span class="hljs-string">&#x27;current&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>切换类：</strong></p><p>element.classList.toggle（’类名’）;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focus.classList.toggle(<span class="hljs-string">&#x27;current&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>注意:以上方法里面，所有类名都不带点</code></p><h3 id="1-2-4-案例分析"><a href="#1-2-4-案例分析" class="headerlink" title="1.2.4. 案例分析"></a>1.2.4. 案例分析</h3><ol><li><p>小圆点跟随变化效果</p></li><li><p>把ol里面li带有current类名的选出来去掉类名 remove</p></li><li><p>让当前索引号的小li 加上 current   add</p></li><li><p>但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里面</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551796072(1).jpg" alt="1551796072(1)"></p></li></ol><ol><li>手指滑动轮播图</li><li>本质就是ul跟随手指移动，简单说就是移动端拖动元素</li><li>触摸元素touchstart：  获取手指初始坐标</li><li>移动手指touchmove：  计算手指的滑动距离，并且移动盒子</li><li>离开手指touchend:   根据滑动的距离分不同的情况</li><li>如果移动距离小于某个像素  就回弹原来位置</li><li>如果移动距离大于某个像素就上一张下一张滑动。</li><li>滑动也分为左滑动和右滑动判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑 </li><li>如果是左滑就播放下一张 （index++）</li><li>如果是右滑就播放上一张  (index–)</li></ol><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551796363(1).jpg" alt="1551796363(1)"></p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551796502(1).jpg" alt="1551796502(1)"></p><h3 id="1-3-1-案例：返回顶部"><a href="#1-3-1-案例：返回顶部" class="headerlink" title="1.3.1. 案例：返回顶部"></a>1.3.1. 案例：返回顶部</h3><p>当页面滚动某个地方，就显示，否则隐藏</p><p>点击可以返回顶部</p><h3 id="1-3-2-案例分析"><a href="#1-3-2-案例分析" class="headerlink" title="1.3.2.案例分析"></a>1.3.2.案例分析</h3><ol><li>滚动某个地方显示</li><li>事件：scroll页面滚动事件  </li><li>如果被卷去的头部（window.pageYOffset ）大于某个数值</li><li>点击，window.scroll(0,0) 返回顶部</li></ol><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551797003(1).jpg" alt="1551797003(1)"></p><h2 id="1-4-click-延时解决方案"><a href="#1-4-click-延时解决方案" class="headerlink" title="1.4. click 延时解决方案"></a>1.4. click 延时解决方案</h2><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><p>​    1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;user-scalable=no&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    2.利用touch事件自己封装这个事件解决300ms 延迟。 </p><p>​    原理就是：</p><ol><li> 当我们手指触摸屏幕，记录当前触摸时间</li><li> 当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li> 如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li></ol><p>代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//封装tap，解决click 300ms 延时</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tap</span> (<span class="hljs-params">obj, callback</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> isMove = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">var</span> startTime = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录触摸时候的时间变量</span><br>        obj.addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            startTime = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 记录触摸时间</span><br>        &#125;);<br>        obj.addEventListener(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            isMove = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span><br>        &#125;);<br>        obj.addEventListener(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (!isMove &amp;&amp; (<span class="hljs-built_in">Date</span>.now() - startTime) &lt; <span class="hljs-number">150</span>) &#123;  <span class="hljs-comment">// 如果手指触摸和离开时间小于150ms 算点击</span><br>                callback &amp;&amp; callback(); <span class="hljs-comment">// 执行回调函数</span><br>            &#125;<br>            isMove = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//  取反 重置</span><br>            startTime = <span class="hljs-number">0</span>;<br>        &#125;);<br>&#125;<br><span class="hljs-comment">//调用  </span><br>  tap(div, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">// 执行代码  &#125;);</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>使用插件。fastclick 插件解决300ms 延迟。 </p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551797533(1).jpg" alt="1551797533(1)"></p></li></ol><h2 id="1-5-移动端常用开发插件"><a href="#1-5-移动端常用开发插件" class="headerlink" title="1.5. 移动端常用开发插件"></a>1.5. 移动端常用开发插件</h2><h3 id="1-5-1-什么是插件"><a href="#1-5-1-什么是插件" class="headerlink" title="1.5.1. 什么是插件"></a>1.5.1. 什么是插件</h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p><p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>我们以前写的animate.js 也算一个最简单的插件</p><p>fastclick 插件解决 300ms 延迟。 使用延时</p><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://</a><a href="https://github.com/ftlabs/fastclick">github.com/ftlabs/fastclick</a></p><h3 id="1-5-2-插件的使用"><a href="#1-5-2-插件的使用" class="headerlink" title="1.5.2. 插件的使用"></a>1.5.2. 插件的使用</h3><ol><li><p> 引入 js 插件文件。</p></li><li><p> 按照规定语法使用。</p></li><li><p> fastclick 插件解决 300ms 延迟。 使用延时</p></li><li><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">document</span>) &#123;<br>            <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                       FastClick.attach(<span class="hljs-built_in">document</span>.body);<br>            &#125;, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-3-Swiper-插件的使用"><a href="#1-5-3-Swiper-插件的使用" class="headerlink" title="1.5.3. Swiper 插件的使用"></a>1.5.3. Swiper 插件的使用</h3></li></ol><p>中文官网地址： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p><ol><li> 引入插件相关文件。</li><li> 按照规定语法使用</li></ol><h3 id="1-5-4-其他移动端常见插件"><a href="#1-5-4-其他移动端常见插件" class="headerlink" title="1.5.4. 其他移动端常见插件"></a>1.5.4. 其他移动端常见插件</h3><p>lsuperslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></p><p>l iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></p><h3 id="1-5-5-插件的使用总结"><a href="#1-5-5-插件的使用总结" class="headerlink" title="1.5.5. 插件的使用总结"></a>1.5.5. 插件的使用总结</h3><p>1.确认插件实现的功能</p><p>2.去官网查看使用说明</p><p>3.下载插件</p><p>4.打开demo实例文件，查看需要引入的相关文件，并且引入</p><p>5.复制demo实例文件中的结构html，样式css以及js代码</p><h3 id="1-5-6-移动端视频插件-zy-media-js"><a href="#1-5-6-移动端视频插件-zy-media-js" class="headerlink" title="1.5.6. 移动端视频插件 zy.media.js"></a>1.5.6. 移动端视频插件 zy.media.js</h3><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</p><p>不同的视频格式文件，我们可以通过source解决。</p><p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</p><p>这个时候我们可以使用插件方式来制作。</p><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><h2 id="1-6-移动端常用开发框架"><a href="#1-6-移动端常用开发框架" class="headerlink" title="1.6. 移动端常用开发框架"></a>1.6. 移动端常用开发框架</h2><h3 id="1-6-1-移动端视频插件-zy-media-js"><a href="#1-6-1-移动端视频插件-zy-media-js" class="headerlink" title="1.6.1. 移动端视频插件 zy.media.js"></a>1.6.1. 移动端视频插件 zy.media.js</h3><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p><p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p><p>框架： 大而全，一整套解决方案</p><p>插件： 小而专一，某个功能的解决方案</p><h3 id="1-6-2-Bootstrap"><a href="#1-6-2-Bootstrap" class="headerlink" title="1.6.2. Bootstrap"></a>1.6.2. Bootstrap</h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p><p>它能开发PC端，也能开发移动端 </p><p>Bootstrap JS插件使用步骤：</p><p>1.引入相关js 文件</p><p>2.复制HTML 结构</p><p>3.修改对应样式</p><p>4.修改相应JS 参数</p><h2 id="1-7-本地存储"><a href="#1-7-本地存储" class="headerlink" title="1.7. 本地存储"></a>1.7. 本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h3 id="1-7-1-本地存储特性"><a href="#1-7-1-本地存储特性" class="headerlink" title="1.7.1.本地存储特性"></a>1.7.1.本地存储特性</h3><p>1、数据存储在用户浏览器中</p><p>2、设置、读取方便、甚至页面刷新不丢失数据</p><p>3、容量较大，sessionStorage约5M、localStorage约20M</p><p>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p><h3 id="1-7-2-window-sessionStorage"><a href="#1-7-2-window-sessionStorage" class="headerlink" title="1.7.2.window.sessionStorage"></a>1.7.2.window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.setItem(key, value)<br></code></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.getItem(key)<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.removeItem(key)<br></code></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.clear()<br></code></pre></td></tr></table></figure><h3 id="1-7-3-window-localStorage"><a href="#1-7-3-window-localStorage" class="headerlink" title="1.7.3.window.localStorage"></a>1.7.3.window.localStorage</h3><p>1、声明周期永久生效，除非手动删除 否则关闭页面也会存在</p><p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p><p>3.  以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.setItem(key, value)<br></code></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.getItem(key)<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.removeItem(key)<br></code></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.clear()<br></code></pre></td></tr></table></figure><h3 id="1-7-4-案例：记住用户名"><a href="#1-7-4-案例：记住用户名" class="headerlink" title="1.7.4.案例：记住用户名"></a>1.7.4.案例：记住用户名</h3><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li><p>把数据存起来，用到本地存储</p></li><li><p>关闭页面，也可以显示用户名，所以用到localStorage</p></li><li><p>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</p></li><li><p>当复选框发生改变的时候change事件</p></li><li><p>如果勾选，就存储，否则就移除</p><p><img src="/2021/02/09/Web%20API/Web%20API%E7%AC%AC07%E5%A4%A9/images%5C1551800263(1).jpg" alt="1551800263(1)"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery第一天</title>
    <link href="/2021/02/09/jQuery/jQuery%E7%AC%AC01%E5%A4%A9/"/>
    <url>/2021/02/09/jQuery/jQuery%E7%AC%AC01%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day01-jQuery"><a href="#day01-jQuery" class="headerlink" title="day01 - jQuery"></a>day01 - jQuery</h1><h2 id="1-1-jQuery-介绍"><a href="#1-1-jQuery-介绍" class="headerlink" title="1.1. jQuery 介绍"></a>1.1. jQuery 介绍</h2><h3 id="1-1-1-JavaScript-库"><a href="#1-1-1-JavaScript-库" class="headerlink" title="1.1.1 JavaScript 库"></a>1.1.1 JavaScript 库</h3><p> 为了解决一些通用的功能需求，把相关的方法封装在一个 js 文件中，我们称为 js 库</p><p>   例如：fastClick；flexiable.js; zy.media.js; swiper.js…</p><h3 id="1-1-2-jQuery的概念"><a href="#1-1-2-jQuery的概念" class="headerlink" title="1.1.2 jQuery的概念"></a>1.1.2 jQuery的概念</h3><p>​    封装了一系列操作原生 dom 元素的功能库，比如获取元素，给元素做动画等</p><h3 id="1-1-3-jQuery的优点"><a href="#1-1-3-jQuery的优点" class="headerlink" title="1.1.3 jQuery的优点"></a>1.1.3 jQuery的优点</h3><ol><li>轻量级。核心文件才几十kb，不会影响页面加载速度。</li><li>跨浏览器兼容。</li><li>链式编程、隐式迭代。</li><li>对事件、样式、动画支持，大大简化了DOM操作。</li><li>丰富的插件生态圈，例如：树形菜单、日期控件、轮播图等。</li><li>免费、开源。</li></ol><h3 id="1-1-4-jQuery的入口函数"><a href="#1-1-4-jQuery的入口函数" class="headerlink" title="1.1.4 jQuery的入口函数"></a>1.1.4 jQuery的入口函数</h3><p>​    jQuery的入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;   <br>    ...  <span class="hljs-comment">// 此处是页面 DOM 加载完成的入口</span><br>&#125;) ; <br></code></pre></td></tr></table></figure><p>​    总结：</p><ol><li>操作元素的js 可以写在页面的任意位置 </li><li>提供了局部作用域，入口函数中写的变量不会冲突</li><li>相当于原生 js 中的 DOMContentLoaded。</li></ol><h3 id="1-1-5-jQuery中的顶级对象"><a href="#1-1-5-jQuery中的顶级对象" class="headerlink" title="1.1.5 jQuery中的顶级对象$"></a>1.1.5 jQuery中的顶级对象$</h3><ol><li> $ 符号是 jQuery 的别称，是同一个函数</li><li> $ 是 jq 中的顶级对象，它可以把原生 DOM 对象转成 jquery 对象, 从而使用 jquery 相关方法</li></ol><h3 id="1-1-6-jQuery-对象和-DOM-对象"><a href="#1-1-6-jQuery-对象和-DOM-对象" class="headerlink" title="1.1.6  jQuery 对象和 DOM 对象"></a>1.1.6  jQuery 对象和 DOM 对象</h3><ol><li>使用原生 WebApi 方法获取的元素就是 原生DOM 对象</li><li>使用 $(参数) 方法获取的就是 jquery 对象, 本质上是把原生对象做了一层包装 <b style="color:red">伪数组</b>的形式存储的<ul><li>所以jQ对象支持索引 支持遍历 不支持push等原生方法</li></ul></li><li>只有 jquery 对象才能使用相关快捷地操作方法；原生 DOM 对象不可以</li></ol><h3 id="1-2-6-jQuery-对象和-DOM-对象转换"><a href="#1-2-6-jQuery-对象和-DOM-对象转换" class="headerlink" title="1.2.6.  jQuery 对象和 DOM 对象转换"></a>1.2.6.  jQuery 对象和 DOM 对象转换</h3><ol><li>把 <b style="color:red">单个</b> jq 对象转成原生的 DOM 对象: jq对象[0] 或 jq对象.get(0)<ul><li>拓展：多个jq对象转成原生DOM对象需要遍历</li></ul></li><li>把原生的 DOM 对象转成 jq 对象:  $(dom对象)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.把单个jq对象转成原生的 DOM 对象: jq对象[0] 或 jq对象.get(0)</span><br><span class="hljs-comment">//1.1jQuery对象[索引值]</span><br><span class="hljs-keyword">var</span> domObject1 = $(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">//1.2 jQuery对象.get(索引值)</span><br><span class="hljs-keyword">var</span> domObject2 = $(<span class="hljs-string">&#x27;div&#x27;</span>).get(<span class="hljs-number">0</span>)<br><span class="hljs-comment">//拓展：多个jq对象转成原生DOM对象需要遍历</span><br><span class="hljs-keyword">var</span> lis = $(<span class="hljs-string">&#x27;li&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> lis) &#123;<span class="hljs-comment">//这里用了for of遍历</span><br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;<br><br><span class="hljs-comment">//2. 把原生的 DOM 对象转成 jq 对象:  $(dom对象)</span><br>$(box);  <br><br></code></pre></td></tr></table></figure><h2 id="1-3-jQuery-选择器"><a href="#1-3-jQuery-选择器" class="headerlink" title="1.3. jQuery 选择器"></a>1.3. jQuery 选择器</h2><h3 id="1-3-1-基础选择器"><a href="#1-3-1-基础选择器" class="headerlink" title="1.3.1. 基础选择器"></a>1.3.1. 基础选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;选择器&quot;</span>)   <span class="hljs-comment">//  里面选择器直接写 CSS 选择器即可，但是要加引号 </span><br></code></pre></td></tr></table></figure><p>​    <img src="/images/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="基础选择器"></p><h3 id="1-3-2-层级选择器"><a href="#1-3-2-层级选择器" class="headerlink" title="1.3.2. 层级选择器"></a>1.3.2. 层级选择器</h3><p>​    层级选择器最常用的两个分别为：后代选择器和子代选择器。</p><p>​    <img src="/images/%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="层级选择器"></p><h3 id="1-3-3-筛选选择器"><a href="#1-3-3-筛选选择器" class="headerlink" title="1.3.3. 筛选选择器"></a>1.3.3. 筛选选择器</h3><p>​    筛选选择器，顾名思义就是在所有的选项中选择满足条件的进行筛选选择。常见如下 :</p><p><img src="/images/%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="筛选选择器"></p><h3 id="1-3-4-表单对象属性选择器"><a href="#1-3-4-表单对象属性选择器" class="headerlink" title="1.3.4.表单对象属性选择器"></a>1.3.4.表单对象属性选择器</h3><p>适用于input表单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;btn:disabled&#x27;</span>)匹配所有不可用元素<br>$(<span class="hljs-string">&#x27;check:checked&#x27;</span>)匹配所有选中的被选中元素(复选框、单选框等，select中的option)<br>$(<span class="hljs-string">&#x27;select option:selected&#x27;</span>)匹配所有列表里选中的option元素<br></code></pre></td></tr></table></figure><h3 id="1-3-5-筛选方法"><a href="#1-3-5-筛选方法" class="headerlink" title="1.3.5.筛选方法"></a>1.3.5.筛选方法</h3><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>parent()</td><td>$(‘.box’).parent()</td><td>获取父元素 parent()</td></tr><tr><td>parents()</td><td>$(‘.bar’).parents(‘.foo’)</td><td>获取指定元素的祖先元素parents()</td></tr><tr><td>children()</td><td>($(‘ul’).children()</td><td>获取所有的子元素</td></tr><tr><td>find()</td><td>$(‘.box’).find(‘.bar’)</td><td>查找获取所有的后代元素（包括子孙元素）</td></tr><tr><td>siblings()</td><td>$(‘.bar’).siblings()</td><td>获取所有的兄弟元素（不包括自己）</td></tr><tr><td>prev()</td><td>$(‘.foo’).prev()</td><td>获取上一个元素</td></tr><tr><td>prevAll()</td><td>$(‘.foo’).prevAll()</td><td>获取前面所有的元素</td></tr><tr><td>next()</td><td>$(‘.foo’).next()</td><td>获取下一个元素</td></tr><tr><td>nextAll()</td><td>$(‘.foo’).nextAll()</td><td>获取后面所有的元素</td></tr><tr><td>hasClass()</td><td>$(‘.foo’).hasClass(‘tom’) //true</td><td>判断某个元素是否包含某个特定的类名 返回布尔值</td></tr><tr><td>eq()</td><td>$(‘li’).eq(2)</td><td>获取第 n 个子元素 （元素索引 n 从 0 开始）</td></tr></tbody></table><h3 id="1-3-6-知识铺垫"><a href="#1-3-6-知识铺垫" class="headerlink" title="1.3.6 知识铺垫"></a>1.3.6 知识铺垫</h3><ul><li>jQuery 设置样式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;div&#x27;</span>).css(<span class="hljs-string">&#x27;属性&#x27;</span>, <span class="hljs-string">&#x27;值&#x27;</span>)    <br></code></pre></td></tr></table></figure><ul><li>jQuery 里面的排他思想</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 想要多选一的效果，排他思想：(1)先设置自己的样式 (2)再移除兄弟元素的样式</span><br>$(<span class="hljs-built_in">this</span>).css(“color”,”red”);<br>$(<span class="hljs-built_in">this</span>).siblings(). css(“color”,””);<br>$(<span class="hljs-built_in">this</span>).css(“color”,”red”).siblings(). css(“color”,””);<span class="hljs-comment">//链式编程</span><br></code></pre></td></tr></table></figure><ul><li>隐式迭代</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</span><br><span class="hljs-comment">// 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</span><br>$(<span class="hljs-string">&#x27;div&#x27;</span>).hide();  <span class="hljs-comment">// 页面中所有的div全部隐藏，不用循环操作</span><br></code></pre></td></tr></table></figure><ul><li>链式编程</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 链式编程是为了节省代码量，看起来更优雅。</span><br>$(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>).sibling().css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>); <br></code></pre></td></tr></table></figure><h2 id="1-4-jQuery-样式操作"><a href="#1-4-jQuery-样式操作" class="headerlink" title="1.4.  jQuery 样式操作"></a>1.4.  jQuery 样式操作</h2><p>​    jQuery中常用的样式操作有两种：css() 和 设置类样式方法</p><h3 id="1-4-1-方法1-操作-css-方法"><a href="#1-4-1-方法1-操作-css-方法" class="headerlink" title="1.4.1. 方法1: 操作 css 方法"></a>1.4.1. 方法1: 操作 css 方法</h3><p>​    jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p><p>​    常用以下三种形式 : </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.获取 css 样式属性值: css(&#x27;属性名&#x27;)</span><br><span class="hljs-keyword">var</span> strColor = $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&#x27;color&#x27;</span>);<br><br><span class="hljs-comment">// 2.  修改 css 单个样式属性: css(&#x27;属性名&#x27;, &#x27;属性值&#x27;)</span><br><span class="hljs-comment">//注意：（1） 属性名一定要加 引号 （2）数字型的属性值可以省略单位 px和引号</span><br>$(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&#x27;&#x27;</span>color<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>red<span class="hljs-string">&#x27;&#x27;</span>);<br><br><span class="hljs-comment">// 3. 修改 css 多个样式属性:参数是对象形式。属性名和属性值用冒号隔开， 属性名可以不用加引号，数字型的属性值可以省略单位 px和引号</span><br>$(<span class="hljs-built_in">this</span>).css(&#123; <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>,font-size:<span class="hljs-string">&quot;20px&quot;</span>&#125;);<br><br></code></pre></td></tr></table></figure><p>​    注意：css() 多用于样式少时操作，多了则不太方便。</p><h3 id="1-4-2-方法2-设置类样式方法"><a href="#1-4-2-方法2-设置类样式方法" class="headerlink" title="1.4.2. 方法2: 设置类样式方法"></a>1.4.2. 方法2: 设置类样式方法</h3><p>​    作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><p>​    常用的三种设置类样式方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.添加类 addClass()</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).addClass(<span class="hljs-string">&quot;current&quot;</span>);<br><br><span class="hljs-comment">// 2.删除类 removeClass()</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).removeClass(<span class="hljs-string">&quot;current&quot;</span>);<br><br><span class="hljs-comment">// 3.切换类 toggleClass()</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).toggleClass(<span class="hljs-string">&quot;current&quot;</span>);<br><br><span class="hljs-comment">// 4.判断是否有某个类名  hasClass 返回的是布尔值</span><br>$(<span class="hljs-string">&#x27;.box&#x27;</span>).hasClass(<span class="hljs-string">&#x27;red&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​    注意：</p><ol><li>设置类样式方法比较适合样式多时操作，可以弥补css()的不足。</li><li>原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</li></ol><h2 id="1-5-jQuery-效果"><a href="#1-5-jQuery-效果" class="headerlink" title="1.5. jQuery 效果"></a>1.5. jQuery 效果</h2><p>​    jQuery 给我们封装了很多动画效果，最为常见的如下：</p><ul><li>显示隐藏：show() / hide() / toggle() ;</li><li>划入画出：slideDown() / slideUp() / slideToggle() ; </li><li>淡入淡出：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </li><li>自定义动画：animate() ;</li></ul><blockquote><p>注意：</p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>jQuery为我们提供另一个方法，可以停止动画排队：stop() ;</p></blockquote><h3 id="1-5-1-显示隐藏"><a href="#1-5-1-显示隐藏" class="headerlink" title="1.5.1. 显示隐藏"></a>1.5.1. 显示隐藏</h3><p>​    显示隐藏动画，常见有三个方法：show() / hide() / toggle() ;        </p><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  jq 动画效果</span><br>        <span class="hljs-comment">//  1. 显示某个元素 show([speed], [easing], [callback])</span><br>        <span class="hljs-comment">//  参数说明： 下面三个参数都可以省略</span><br>        <span class="hljs-comment">//  (1) speed: 动画执行速度  &#x27;fast&#x27; || &#x27;slow&#x27; || &#x27;normal&#x27; || 毫秒数 默认为400</span><br>        <span class="hljs-comment">//  (2) easing: [默认]动画效果 swing(缓动效果) || linear(匀速效果)</span><br>        <span class="hljs-comment">//  (3) callback: 回调函数 动画结束时执行</span><br><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).show()<br>        &#125;);<br><br>        <span class="hljs-comment">// 2. 隐藏某个元素 hide()</span><br><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).hide(<span class="hljs-number">2000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;隐藏完成&#x27;</span>);<br>            &#125;)<br>        &#125;);<br>        <span class="hljs-comment">// 3. 切换显示和隐藏某个元素 toggle()</span><br><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).toggle(<span class="hljs-number">1000</span>)<br>        &#125;);<br></code></pre></td></tr></table></figure><h3 id="1-5-2-滑入滑出"><a href="#1-5-2-滑入滑出" class="headerlink" title="1.5.2. 滑入滑出"></a>1.5.2. 滑入滑出</h3><p>​    滑入滑出动画，常见有三个方法：slideDown() / slideUp() / slideToggle() ; </p><p>​    <strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 下拉显示某个元素 slideDown()  下拉显示！！！</span><br>       $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           $(<span class="hljs-string">&#x27;.box&#x27;</span>).slideDown(<span class="hljs-string">&#x27;fast&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>);<br>           &#125;)<br>       &#125;);<br><br>       <span class="hljs-comment">// 2. 上拉隐藏某个元素 slideUp()   上拉隐藏！！！</span><br>       $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           $(<span class="hljs-string">&#x27;.box&#x27;</span>).slideUp(<span class="hljs-string">&#x27;slow&#x27;</span>)<br>       &#125;);<br><br>       <span class="hljs-comment">// 3. 切换上拉显示和下拉隐藏元素 slideToggle()</span><br>       $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           $(<span class="hljs-string">&#x27;.box&#x27;</span>).slideToggle()<br>       &#125;);<br><br>       <span class="hljs-comment">// 4. 鼠标经过和离开的切换事件 hover([overFn], [outFn])</span><br>       <span class="hljs-comment">// 注意：只写一个 function ，鼠标经过和鼠标离开都会调用这个处理函数&lt;body&gt;</span><br>   <br></code></pre></td></tr></table></figure><h3 id="1-5-3-淡入淡出"><a href="#1-5-3-淡入淡出" class="headerlink" title="1.5.3 淡入淡出"></a>1.5.3 淡入淡出</h3><p>​    淡入淡出动画，常见有四个方法：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </p><p>​    语法规范如下:</p><p><img src="/images/fadeIn.png" alt="fadeIn"></p><p><img src="/images/fadeOut.png" alt="fadeOut"></p><p><img src="/images/fadeToggle.png" alt="fadeToggle"></p><p><img src="/images/fadeTo.png" alt="fadeTo"></p><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;button&gt;淡入效果&lt;/button&gt;<br>    &lt;button&gt;淡出效果&lt;/button&gt;<br>    &lt;button&gt;淡入淡出切换&lt;/button&gt;<br>    &lt;button&gt;修改透明度&lt;/button&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;button&quot;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// 淡入 fadeIn()</span><br>                $(<span class="hljs-string">&quot;div&quot;</span>).fadeIn(<span class="hljs-number">1000</span>);<br>            &#125;)<br>            $(<span class="hljs-string">&quot;button&quot;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// 淡出 fadeOut()</span><br>                $(<span class="hljs-string">&quot;div&quot;</span>).fadeOut(<span class="hljs-number">1000</span>);<br>            &#125;)<br>            $(<span class="hljs-string">&quot;button&quot;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// 淡入淡出切换 fadeToggle()</span><br>                $(<span class="hljs-string">&quot;div&quot;</span>).fadeToggle(<span class="hljs-number">1000</span>);<br>            &#125;);<br>            $(<span class="hljs-string">&quot;button&quot;</span>).eq(<span class="hljs-number">3</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span><br>                $(<span class="hljs-string">&quot;div&quot;</span>).fadeTo(<span class="hljs-number">1000</span>, <span class="hljs-number">0.5</span>);<br>            &#125;);<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-4-自定义动画"><a href="#1-5-4-自定义动画" class="headerlink" title="1.5.4 自定义动画"></a>1.5.4 自定义动画</h3><p>​    自定义动画非常强大，通过参数的传递可以模拟以上所有动画，方法为：animate() ;</p><p>​    语法规范如下:</p><p><img src="/images/animate.png"></p><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;button&gt;动起来&lt;/button&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;button&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                $(<span class="hljs-string">&quot;div&quot;</span>).animate(&#123;<br>                    left: <span class="hljs-number">500</span>,<br>                    top: <span class="hljs-number">300</span>,<br>                    opacity: <span class="hljs-number">.4</span>,<br>                    width: <span class="hljs-number">500</span><br>                &#125;, <span class="hljs-number">500</span>);<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-5-停止动画排队"><a href="#1-5-5-停止动画排队" class="headerlink" title="1.5.5 停止动画排队"></a>1.5.5 停止动画排队</h3><p>​    动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>​    停止动画排队的方法为：stop() ; </p><ul><li>stop() 方法用于停止动画或效果。</li><li>stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li></ul><p>​        总结: 每次使用动画之前，先调用 stop() ,在调用动画。</p><h3 id="1-5-6-事件切换"><a href="#1-5-6-事件切换" class="headerlink" title="1.5.6. 事件切换"></a>1.5.6. 事件切换</h3><p>​    jQuery中为我们添加了一个新事件 hover() ; 功能类似 css 中的伪类 :hover 。介绍如下</p><p><strong>语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hover([over,]out)     <span class="hljs-comment">// 其中over和out为两个函数</span><br></code></pre></td></tr></table></figure><ul><li>over:鼠标移到元素上要触发的函数（相当于mouseenter）</li><li>out:鼠标移出元素要触发的函数（相当于mouseleave）</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><p><strong>hover事件和停止动画排列案例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;<br>        &lt;li&gt;<br>            &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;微博&lt;/a&gt;<br>            &lt;ul&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>&lt;/ul&gt;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>            &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;微博&lt;/a&gt;<br>            &lt;ul&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>&lt;/ul&gt;<br>        &lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 鼠标经过</span><br>            <span class="hljs-comment">// $(&quot;.nav&gt;li&quot;).mouseover(function() &#123;</span><br>            <span class="hljs-comment">//     // $(this) jQuery 当前元素  this不要加引号</span><br>            <span class="hljs-comment">//     // show() 显示元素  hide() 隐藏元素</span><br>            <span class="hljs-comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span><br>            <span class="hljs-comment">// &#125;);</span><br>            <span class="hljs-comment">// // 鼠标离开</span><br>            <span class="hljs-comment">// $(&quot;.nav&gt;li&quot;).mouseout(function() &#123;</span><br>            <span class="hljs-comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span><br>            <span class="hljs-comment">// &#125;);</span><br>            <span class="hljs-comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span><br>            <span class="hljs-comment">// $(&quot;.nav&gt;li&quot;).hover(function() &#123;</span><br>            <span class="hljs-comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span><br>            <span class="hljs-comment">// &#125;, function() &#123;</span><br>            <span class="hljs-comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span><br>            <span class="hljs-comment">// &#125;);</span><br>            <span class="hljs-comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span><br>            $(<span class="hljs-string">&quot;.nav&gt;li&quot;</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// stop 方法必须写到动画的前面</span><br>                $(<span class="hljs-built_in">this</span>).children(<span class="hljs-string">&quot;ul&quot;</span>).stop().slideToggle();<br>            &#125;);<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-7-案例：王者荣耀手风琴效果"><a href="#1-5-7-案例：王者荣耀手风琴效果" class="headerlink" title="1.5.7. 案例：王者荣耀手风琴效果"></a>1.5.7. 案例：王者荣耀手风琴效果</h3><blockquote><p>思路分析:<br>1.鼠标经过某个小li 有两步操作：<br>2.当前小li 宽度变为 224px， 同时里面的小图片淡出，大图片淡入<br>3.其余兄弟小li宽度变为69px， 小图片淡入， 大图片淡出</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="1-6-今日总结"><a href="#1-6-今日总结" class="headerlink" title="1.6. 今日总结"></a>1.6. 今日总结</h2><p><img src="/images/%E6%80%BB%E7%BB%93.png" alt="总结"></p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery第二天</title>
    <link href="/2021/02/09/jQuery/jQuery%E7%AC%AC02%E5%A4%A9/"/>
    <url>/2021/02/09/jQuery/jQuery%E7%AC%AC02%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day02-jQuery"><a href="#day02-jQuery" class="headerlink" title="day02 - jQuery"></a>day02 - jQuery</h1><h2 id="1-1-jQuery-属性操作"><a href="#1-1-jQuery-属性操作" class="headerlink" title="1.1. jQuery 属性操作"></a>1.1. jQuery 属性操作</h2><p>​    jQuery 常用属性操作有三种：prop() / attr() / data() ;</p><h3 id="1-1-1-元素固有属性值-prop"><a href="#1-1-1-元素固有属性值-prop" class="headerlink" title="1.1.1 元素固有属性值 prop()"></a>1.1.1 元素固有属性值 prop()</h3><p>​    所谓元素固有属性就是元素本身自带的属性，比如 <a> 元素里面的 href ，比如 <input> 元素里面的 type。 </a></p><p><strong>语法</strong></p><p><img src="/images/prop.png" alt="prop"></p><p>​    注意：prop() 除了普通属性操作，更适合操作表单属性：disabled / checked / selected 等。</p><h3 id="1-1-2-元素自定义属性值-attr"><a href="#1-1-2-元素自定义属性值-attr" class="headerlink" title="1.1.2 元素自定义属性值 attr()"></a>1.1.2 元素自定义属性值 attr()</h3><p>​    用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =“1”。 </p><p><strong>语法</strong></p><p><img src="/images/attr.png" alt="attr"></p><p>​    注意：attr() 除了普通属性操作，更适合操作自定义属性。（该方法也可以获取 H5 自定义属性）</p><h3 id="1-1-3-数据缓存-data"><a href="#1-1-3-数据缓存-data" class="headerlink" title="1.1.3 数据缓存 data()"></a>1.1.3 数据缓存 data()</h3><p>​    data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 </p><p><strong>语法</strong></p><p><img src="/images/data.png" alt="data"></p><p>​    注意：同时，还可以读取 HTML5 自定义属性  data-index ，得到的是数字型。</p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;a href=<span class="hljs-string">&quot;http://www.itcast.cn&quot;</span> title=<span class="hljs-string">&quot;都挺好&quot;</span>&gt;都挺好&lt;/a&gt;<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;&quot;</span> checked&gt;<br>    &lt;div index=<span class="hljs-string">&quot;1&quot;</span> data-index=<span class="hljs-string">&quot;2&quot;</span>&gt;我是div&lt;/div&gt;<br>    &lt;span&gt;<span class="hljs-number">123</span>&lt;/span&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//1. element.prop(&quot;属性名&quot;) 获取元素固有的属性值</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;a&quot;</span>).prop(<span class="hljs-string">&quot;href&quot;</span>));<br>            $(<span class="hljs-string">&quot;a&quot;</span>).prop(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;我们都挺好&quot;</span>);<br>            $(<span class="hljs-string">&quot;input&quot;</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">this</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>));<br>            &#125;);<br>            <span class="hljs-comment">// console.log($(&quot;div&quot;).prop(&quot;index&quot;));</span><br>            <span class="hljs-comment">// 2. 元素的自定义属性 我们通过 attr()</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).attr(<span class="hljs-string">&quot;index&quot;</span>));<br>            $(<span class="hljs-string">&quot;div&quot;</span>).attr(<span class="hljs-string">&quot;index&quot;</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).attr(<span class="hljs-string">&quot;data-index&quot;</span>));<br>            <span class="hljs-comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span><br>            $(<span class="hljs-string">&quot;span&quot;</span>).data(<span class="hljs-string">&quot;uname&quot;</span>, <span class="hljs-string">&quot;andy&quot;</span>);<br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;span&quot;</span>).data(<span class="hljs-string">&quot;uname&quot;</span>));<br>            <span class="hljs-comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).data(<span class="hljs-string">&quot;index&quot;</span>));<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：购物车案例模块-全选"><a href="#1-1-4-案例：购物车案例模块-全选" class="headerlink" title="1.1.4 案例：购物车案例模块-全选"></a>1.1.4 案例：购物车案例模块-全选</h3><blockquote><p>1.全选思路：里面3个小的复选框按钮（j-checkbox）选中状态（checked）跟着全选按钮（checkall）走。<br>2.因为checked 是复选框的固有属性，此时我们需要利用prop()方法获取和设置该属性。<br>3.把全选按钮状态赋值给3小复选框就可以了。<br>4.当我们每次点击小的复选框按钮，就来判断：<br>5.如果小复选框被选中的个数等于3 就应该把全选按钮选上，否则全选按钮不选。<br>6.:checked 选择器      :checked 查找被选中的表单元素。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="1-2-jQuery-文本属性值"><a href="#1-2-jQuery-文本属性值" class="headerlink" title="1.2. jQuery 文本属性值"></a>1.2. jQuery 文本属性值</h2><p>​    jQuery的文本属性值常见操作有三种：html() / text() / val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性。</p><h3 id="1-2-1-jQuery内容文本值"><a href="#1-2-1-jQuery内容文本值" class="headerlink" title="1.2.1 jQuery内容文本值"></a>1.2.1 jQuery内容文本值</h3><p>​    常见操作有三种：html() / text() / val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性，主要针对元素的内容还有表单的值操作。</p><p><strong>语法</strong></p><p><img src="/images/html.png" alt="html"></p><p>​    注意：html() 可识别标签，text() 不识别标签。</p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;<br>        &lt;span&gt;我是内容&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 获取设置元素内容 html()</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).html());<br>        <span class="hljs-comment">// $(&quot;div&quot;).html(&quot;123&quot;);</span><br>        <span class="hljs-comment">// 2. 获取设置元素文本内容 text()</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).text());<br>        $(<span class="hljs-string">&quot;div&quot;</span>).text(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-comment">// 3. 获取设置表单值 val()</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;input&quot;</span>).val());<br>        $(<span class="hljs-string">&quot;input&quot;</span>).val(<span class="hljs-string">&quot;123&quot;</span>);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-2-案例：购物车案例模块-增减商品数量"><a href="#1-2-2-案例：购物车案例模块-增减商品数量" class="headerlink" title="1.2.2. 案例：购物车案例模块-增减商品数量"></a>1.2.2. 案例：购物车案例模块-增减商品数量</h3><blockquote><p>1.核心思路：首先声明一个变量，当我们点击+号（increment），就让这个值++，然后赋值给文本框。<br>2.注意1： 只能增加本商品的数量， 就是当前+号的兄弟文本框（itxt）的值。<br>3.修改表单的值是val() 方法<br>4.注意2： 这个变量初始值应该是这个文本框的值，在这个值的基础上++。要获取表单的值<br>5.减号（decrement）思路同理，但是如果文本框的值是1，就不能再减了。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="1-2-3-案例：购物车案例模块-修改商品小计"><a href="#1-2-3-案例：购物车案例模块-修改商品小计" class="headerlink" title="1.2.3. 案例：购物车案例模块-修改商品小计"></a>1.2.3. 案例：购物车案例模块-修改商品小计</h3><blockquote><p>1.核心思路：每次点击+号或者-号，根据文本框的值 乘以 当前商品的价格  就是 商品的小计<br>2.注意1： 只能增加本商品的小计， 就是当前商品的小计模块（p-sum）<br>3.修改普通元素的内容是text() 方法<br>4.注意2： 当前商品的价格，要把￥符号去掉再相乘 截取字符串 substr(1)<br>5.parents(‘选择器’) 可以返回指定祖先元素<br>6.最后计算的结果如果想要保留2位小数 通过 toFixed(2)  方法<br>7.用户也可以直接修改表单里面的值，同样要计算小计。 用表单change事件<br>8.用最新的表单内的值 乘以 单价即可  但是还是当前商品小计</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="1-3-jQuery-元素操作"><a href="#1-3-jQuery-元素操作" class="headerlink" title="1.3. jQuery 元素操作"></a>1.3. jQuery 元素操作</h2><p>​    jQuery 元素操作主要讲的是用jQuery方法，操作标签的遍历、创建、添加、删除等操作。</p><h3 id="1-3-1-遍历元素"><a href="#1-3-1-遍历元素" class="headerlink" title="1.3.1. 遍历元素"></a>1.3.1. 遍历元素</h3><p>​    jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p><p><strong>语法1</strong></p><p><img src="/images/each1.png" alt="each1"></p><p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p><p><strong>语法2</strong></p><p><img src="/images/each2.png" alt="each2"></p><p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>    &lt;div&gt;<span class="hljs-number">2</span>&lt;/div&gt;<br>    &lt;div&gt;<span class="hljs-number">3</span>&lt;/div&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span><br>            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>];<br>            <span class="hljs-comment">// 1. each() 方法遍历元素 </span><br>            $(<span class="hljs-string">&quot;div&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, domEle</span>) </span>&#123;<br>                <span class="hljs-comment">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span><br>                <span class="hljs-comment">// console.log(i);</span><br>                <span class="hljs-comment">// 回调函数第二个参数一定是 dom 元素对象，也是自己命名</span><br>                <span class="hljs-comment">// console.log(domEle);  // 使用jQuery方法需要转换 $(domEle)</span><br>                $(domEle).css(<span class="hljs-string">&quot;color&quot;</span>, arr[i]);<br>                sum += <span class="hljs-built_in">parseInt</span>($(domEle).text());<br>            &#125;)<br>            <span class="hljs-built_in">console</span>.log(sum);<br>            <span class="hljs-comment">// 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span><br>            <span class="hljs-comment">// $.each($(&quot;div&quot;), function(i, ele) &#123;</span><br>            <span class="hljs-comment">//     console.log(i);</span><br>            <span class="hljs-comment">//     console.log(ele);</span><br>            <span class="hljs-comment">// &#125;);</span><br>            <span class="hljs-comment">// $.each(arr, function(i, ele) &#123;</span><br>            <span class="hljs-comment">//     console.log(i);</span><br>            <span class="hljs-comment">//     console.log(ele);</span><br>            <span class="hljs-comment">// &#125;)</span><br>            $.each(&#123;<br>                name: <span class="hljs-string">&quot;andy&quot;</span>,<br>                age: <span class="hljs-number">18</span><br>            &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, ele</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// 输出的是 name age 属性名</span><br>                <span class="hljs-built_in">console</span>.log(ele); <span class="hljs-comment">// 输出的是 andy  18 属性值</span><br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-2-案例：购物车案例模块-计算总计和总额"><a href="#1-3-2-案例：购物车案例模块-计算总计和总额" class="headerlink" title="1.3.2. 案例：购物车案例模块-计算总计和总额"></a>1.3.2. 案例：购物车案例模块-计算总计和总额</h3><blockquote><p>1.把所有文本框中的值相加就是总额数量，总计同理。<br>2.文本框里面的值不同，如果想要相加需要用 each() 遍历，声明一个变量做计数器，累加即可。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="1-3-3-创建、添加、删除"><a href="#1-3-3-创建、添加、删除" class="headerlink" title="1.3.3. 创建、添加、删除"></a>1.3.3. 创建、添加、删除</h3><p>​    jQuery方法操作元素的创建、添加、删除方法很多，则重点使用部分，如下：</p><p><strong>语法总和</strong></p><p><img src="/images/create.png" alt="create"></p><p><img src="/images/append1.png" alt="append1"></p><p><img src="/images/append2.png" alt="append2"></p><p><img src="/images/remove.png" alt="remove"></p><p>​    注意：以上只是元素的创建、添加、删除方法的常用方法，其他方法请参详API。</p><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;ul&gt;<br>        &lt;li&gt;原先的li&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;test&quot;</span>&gt;我是原先的div&lt;/div&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. 创建元素</span><br>            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);<br>      <br>            <span class="hljs-comment">// 2. 添加元素</span><br>            <span class="hljs-comment">// 2.1 内部添加</span><br>            <span class="hljs-comment">// $(&quot;ul&quot;).append(li);  内部添加并且放到内容的最后面 </span><br>            $(<span class="hljs-string">&quot;ul&quot;</span>).prepend(li); <span class="hljs-comment">// 内部添加并且放到内容的最前面</span><br>            <span class="hljs-comment">//  2.2 外部添加</span><br>            <span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;</span>);<br>            <span class="hljs-comment">// $(&quot;.test&quot;).after(div);</span><br>            $(<span class="hljs-string">&quot;.test&quot;</span>).before(div);<br>      <br>            <span class="hljs-comment">// 3. 删除元素</span><br>            <span class="hljs-comment">// $(&quot;ul&quot;).remove(); 可以删除匹配的元素 自杀</span><br>            <span class="hljs-comment">// $(&quot;ul&quot;).empty(); // 可以删除匹配的元素里面的子节点 孩子</span><br>            $(<span class="hljs-string">&quot;ul&quot;</span>).html(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 可以删除匹配的元素里面的子节点 孩子</span><br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-4-案例：购物车案例模块-删除商品模块"><a href="#1-3-4-案例：购物车案例模块-删除商品模块" class="headerlink" title="1.3.4 案例：购物车案例模块-删除商品模块"></a>1.3.4 案例：购物车案例模块-删除商品模块</h3><blockquote><p>1.核心思路：把商品remove() 删除元素即可<br>2.有三个地方需要删除： 1. 商品后面的删除按钮 2. 删除选中的商品 3. 清理购物车<br>3.商品后面的删除按钮： 一定是删除当前的商品，所以从 $(this) 出发<br>4.删除选中的商品： 先判断小的复选框按钮是否选中状态，如果是选中，则删除对应的商品<br>5.清理购物车： 则是把所有的商品全部删掉</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="1-3-5-案例：购物车案例模块-选中商品添加背景"><a href="#1-3-5-案例：购物车案例模块-选中商品添加背景" class="headerlink" title="1.3.5 案例：购物车案例模块-选中商品添加背景"></a>1.3.5 案例：购物车案例模块-选中商品添加背景</h3><blockquote><p>1.核心思路：选中的商品添加背景，不选中移除背景即可<br>2.全选按钮点击：如果全选是选中的，则所有的商品添加背景，否则移除背景<br>3.小的复选框点击： 如果是选中状态，则当前商品添加背景，否则移除背景<br>4.这个背景，可以通过类名修改，添加类和删除类</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="1-4-jQuery-尺寸、位置操作"><a href="#1-4-jQuery-尺寸、位置操作" class="headerlink" title="1.4.  jQuery 尺寸、位置操作"></a>1.4.  jQuery 尺寸、位置操作</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><h3 id="1-4-1-jQuery-尺寸操作"><a href="#1-4-1-jQuery-尺寸操作" class="headerlink" title="1.4.1.  jQuery 尺寸操作"></a>1.4.1.  jQuery 尺寸操作</h3><p>​     jQuery 尺寸操作包括元素宽高的获取和设置，且不一样的API对应不一样的盒子模型。</p><p><strong>语法</strong></p><p><img src="/images/size.png" alt="size"></p><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. width() / height() 获取设置元素 width和height大小 </span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).width());<br>            <span class="hljs-comment">// $(&quot;div&quot;).width(300);</span><br><br>            <span class="hljs-comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).innerWidth());<br><br>            <span class="hljs-comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).outerWidth());<br><br>            <span class="hljs-comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;div&quot;</span>).outerWidth(<span class="hljs-literal">true</span>));<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>​    注意：有了这套 API 我们将可以快速获取和子的宽高，至于其他属性想要获取和设置，还要使用 css() 等方法配合。</p><h3 id="1-4-2-jQuery-位置操作"><a href="#1-4-2-jQuery-位置操作" class="headerlink" title="1.4.2. jQuery 位置操作"></a>1.4.2. jQuery 位置操作</h3><p>​    jQuery的位置操作主要有三个： offset()、position()、scrollTop()/scrollLeft() , 具体介绍如下: </p><p><strong>语法</strong></p><p><img src="/images/offset.png" alt="offset"></p><p><img src="/images/position.png" alt="position"></p><p><img src="/images/scroll.png" alt="scroll"></p><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>        <br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;back&quot;</span>&gt;返回顶部&lt;/div&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;&lt;/div&gt;<br>   <br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. 获取设置距离文档的位置（偏移） offset</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.son&quot;</span>).offset());<br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.son&quot;</span>).offset().top);<br>            <span class="hljs-comment">// $(&quot;.son&quot;).offset(&#123;</span><br>            <span class="hljs-comment">//     top: 200,</span><br>            <span class="hljs-comment">//     left: 200</span><br>            <span class="hljs-comment">// &#125;);</span><br>      <br>            <span class="hljs-comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span><br>            <span class="hljs-comment">// 这个方法只能获取不能设置偏移</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&quot;.son&quot;</span>).position());<br>            <span class="hljs-comment">// $(&quot;.son&quot;).position(&#123;</span><br>            <span class="hljs-comment">//     top: 200,</span><br>            <span class="hljs-comment">//     left: 200</span><br>            <span class="hljs-comment">// &#125;);</span><br>      <br>      <span class="hljs-comment">// 3. 被卷去的头部</span><br>      $(<span class="hljs-built_in">document</span>).scrollTop(<span class="hljs-number">100</span>);<br>            <span class="hljs-comment">// 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span><br>            <span class="hljs-comment">// 页面滚动事件</span><br>            <span class="hljs-keyword">var</span> boxTop = $(<span class="hljs-string">&quot;.container&quot;</span>).offset().top;<br>            $(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// console.log(11);</span><br>                <span class="hljs-built_in">console</span>.log($(<span class="hljs-built_in">document</span>).scrollTop());<br>                <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">document</span>).scrollTop() &gt;= boxTop) &#123;<br>                    $(<span class="hljs-string">&quot;.back&quot;</span>).fadeIn();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    $(<span class="hljs-string">&quot;.back&quot;</span>).fadeOut();<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 返回顶部</span><br>            $(<span class="hljs-string">&quot;.back&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// $(document).scrollTop(0);</span><br>                $(<span class="hljs-string">&quot;body, html&quot;</span>).stop().animate(&#123;<br>                    scrollTop: <span class="hljs-number">0</span><br>                &#125;);<br>                <span class="hljs-comment">// $(document).stop().animate(&#123;</span><br>                <span class="hljs-comment">//     scrollTop: 0</span><br>                <span class="hljs-comment">// &#125;); 不能是文档而是 html和body元素做动画</span><br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-3-案例：带有动画的返回顶部"><a href="#1-4-3-案例：带有动画的返回顶部" class="headerlink" title="1.4.3. 案例：带有动画的返回顶部"></a>1.4.3. 案例：带有动画的返回顶部</h3><blockquote><p>1.核心原理： 使用animate动画返回顶部。<br>2.animate动画函数里面有个scrollTop 属性，可以设置位置<br>3.但是是元素做动画，因此 $(“body,html”).animate({scrollTop: 0})</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="1-4-4-案例：-品优购电梯导航（上）"><a href="#1-4-4-案例：-品优购电梯导航（上）" class="headerlink" title="1.4.4. 案例： 品优购电梯导航（上）"></a>1.4.4. 案例： 品优购电梯导航（上）</h3><blockquote><p>1.当我们滚动到 今日推荐 模块，就让电梯导航显示出来<br>2.点击电梯导航页面可以滚动到相应内容区域<br>3.核心算法：因为电梯导航模块和内容区模块一一对应的<br>4.当我们点击电梯导航某个小模块，就可以拿到当前小模块的索引号<br>5.就可以把animate要移动的距离求出来：当前索引号内容区模块它的offset().top<br>6.然后执行动画即可</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="1-4-5-案例：品优购电梯导航（下）"><a href="#1-4-5-案例：品优购电梯导航（下）" class="headerlink" title="1.4.5. 案例：品优购电梯导航（下）"></a>1.4.5. 案例：品优购电梯导航（下）</h3><blockquote><p>1.当我们点击电梯导航某个小li， 当前小li 添加current类，兄弟移除类名<br>2.当我们页面滚动到内容区域某个模块， 左侧电梯导航，相对应的小li模块，也会添加current类， 兄弟移除current类。<br>3.触发的事件是页面滚动，因此这个功能要写到页面滚动事件里面。<br>4.需要用到each，遍历内容区域大模块。 each里面能拿到内容区域每一个模块元素和索引号<br>5.判断的条件：  被卷去的头部 大于等于 内容区域里面每个模块的offset().top<br>6.就利用这个索引号找到相应的电梯导航小li添加类。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="1-5-今日总结"><a href="#1-5-今日总结" class="headerlink" title="1.5. 今日总结"></a>1.5. 今日总结</h2><p><img src="/images/%E6%80%BB%E7%BB%93.png" alt="总结"></p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 高级第三天</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC03%E5%A4%A9/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC03%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级第三天"><a href="#JS高级第三天" class="headerlink" title="JS高级第三天"></a>JS高级第三天</h1><h2 id="一、函数的定义和调用"><a href="#一、函数的定义和调用" class="headerlink" title="一、函数的定义和调用"></a>一、函数的定义和调用</h2><h3 id="1-函数的定义"><a href="#1-函数的定义" class="headerlink" title="1.函数的定义"></a>1.函数的定义</h3><ul><li>函数声明  (命名函数)</li><li>函数表达式 (匿名函数)</li><li>利用 Function 构造函数   (了解)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 函数声明</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>);<br>      &#125;<br>      foo()<br><span class="hljs-comment">// 2.函数表达式</span><br>      <span class="hljs-keyword">var</span> bar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>);<br>      &#125;<br>      bar()<br> <span class="hljs-comment">// 3.new Function 使用构造函数  了解</span><br>      <span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;console.log(a+b)&#x27;</span>);<br>      fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><h3 id="2-函数的调用"><a href="#2-函数的调用" class="headerlink" title="2.函数的调用"></a>2.函数的调用</h3><p>函数的多种调用方式:</p><ul><li>普通函数</li><li>对象中的函数调用</li><li>构造函数的调用</li><li>绑定事件的处理函数</li><li>定时器的处理函数 </li><li>立即执行函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.普通函数调用</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>        &#125;;<br>        fn1();<br>        <span class="hljs-comment">// 2.对象中的函数调用</span><br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            uname: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">15</span>,<br>            say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;唱歌&#x27;</span>);<br>            &#125;<br>        &#125;<br>        obj.say()<br><br>        <span class="hljs-comment">// 3.构造函数的调用  new函数名()</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.uname = uname<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br>        <span class="hljs-keyword">var</span> res = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-built_in">console</span>.log(res);<br><br>        <span class="hljs-comment">// 4.绑定事件的处理函数</span><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;点击了&#x27;</span>);<br>        &#125;)<br><br>        <span class="hljs-comment">// 5.定时器的处理函数</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;两秒后显示&#x27;</span>);<br>        &#125;, <span class="hljs-number">2000</span>)<br><br><br>        <span class="hljs-comment">// 6.立即执行函数  !()()</span><br>        <span class="hljs-comment">// var num = 20;</span><br>        <span class="hljs-comment">// !()()</span><br>        !(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 提供一个局部作用域  与外界的变量名不冲突</span><br>            <span class="hljs-comment">// var num = 10;</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>        &#125;)()<br></code></pre></td></tr></table></figure><h2 id="二、this"><a href="#二、this" class="headerlink" title="二、this"></a>二、this</h2><h3 id="1-this指向-大的分为三种"><a href="#1-this指向-大的分为三种" class="headerlink" title="1.this指向 大的分为三种"></a>1.this指向 大的分为三种</h3><ul><li>非全局作用域 指向 window</li><li>函数作用域 指向调用者</li><li>call,apply,bind 这三种方法手动修改this指向</li></ul><h3 id="2-函数作用域-指向调用者-分为以下情况"><a href="#2-函数作用域-指向调用者-分为以下情况" class="headerlink" title="2.函数作用域 指向调用者 分为以下情况"></a>2.函数作用域 指向调用者 分为以下情况</h3><h4 id="2-1-普通函数调用-this指向window"><a href="#2-1-普通函数调用-this指向window" class="headerlink" title="2.1 普通函数调用      this指向window"></a>2.1 普通函数调用      this指向window</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>        &#125;;<br>        fn1();<br></code></pre></td></tr></table></figure><h4 id="2-2-对象中的函数调用-this指向调用者obj"><a href="#2-2-对象中的函数调用-this指向调用者obj" class="headerlink" title="2.2 对象中的函数调用   this指向调用者obj"></a>2.2 对象中的函数调用   this指向调用者obj</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125;<br>        obj.say() <span class="hljs-comment">//this指向obj  调用者</span><br>            <span class="hljs-comment">// 如果</span><br>        <span class="hljs-keyword">var</span> foo = obj.say;<br>        foo(); <span class="hljs-comment">//this指向window</span><br></code></pre></td></tr></table></figure><h4 id="2-3-构造函数的调用-new函数名-this指向创造的实例对象"><a href="#2-3-构造函数的调用-new函数名-this指向创造的实例对象" class="headerlink" title="2.3 构造函数的调用 new函数名()       this指向创造的实例对象"></a>2.3 构造函数的调用 new函数名()       this指向创造的实例对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> that<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            that = <span class="hljs-built_in">this</span><br>            <span class="hljs-built_in">this</span>.uname = uname<br>            <span class="hljs-built_in">this</span>.age = age<br>        &#125;<br>        <span class="hljs-keyword">var</span> res = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-built_in">console</span>.log(that);<br></code></pre></td></tr></table></figure><h4 id="2-4-绑定事件的处理函数-this指向事件的绑定者"><a href="#2-4-绑定事件的处理函数-this指向事件的绑定者" class="headerlink" title="2.4 绑定事件的处理函数         this指向事件的绑定者"></a>2.4 绑定事件的处理函数         this指向事件的绑定者</h4><h4 id="2-5-定时器的处理函数-this指向-window"><a href="#2-5-定时器的处理函数-this指向-window" class="headerlink" title="2.5 定时器的处理函数       this指向 window"></a>2.5 定时器的处理函数       this指向 window</h4><h4 id="2-6-立即执行函数-this指向window"><a href="#2-6-立即执行函数-this指向window" class="headerlink" title="2.6 立即执行函数 !()()    this指向window"></a>2.6 立即执行函数 !()()    this指向window</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 提供一个局部作用域  与外界的变量名不冲突</span><br>            <span class="hljs-comment">// var num = 10;</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this&#x27;</span>);<br>        &#125;)()<br></code></pre></td></tr></table></figure><h3 id="3-改变函数内部this指向"><a href="#3-改变函数内部this指向" class="headerlink" title="3.改变函数内部this指向"></a>3.改变函数内部this指向</h3><h4 id="3-1-call方法"><a href="#3-1-call方法" class="headerlink" title="3.1 call方法"></a>3.1 call方法</h4><ul><li><p>fn.call([thisArg, arg1, arg2…])</p><p> 作用：<b>调用一个函数</b>并指定调用时 this 的值</p><p> 参数: thisArg 函数中 this 的指定值； arg1, arg2…可选的参数列表</p><p> 返回值：函数调用的结果</p><p> 应用场景:  经常做继承. </p></li><li><p>注意： 第一个参数 thisArg 如果不传或是 null、undefined，默认函数内 this 指向 window </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// call 方法应用构造函数的属性继承</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>           <span class="hljs-built_in">this</span>.x = x,<br>               <span class="hljs-built_in">this</span>.y = y<br>           <span class="hljs-built_in">this</span>.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(x + y);<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>           Father.call(<span class="hljs-built_in">this</span>, x, y)<br>       &#125;<br>       <span class="hljs-keyword">var</span> aaa = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>       aaa.sum()<br></code></pre></td></tr></table></figure><h4 id="3-2-apply方法"><a href="#3-2-apply方法" class="headerlink" title="3.2 apply方法"></a>3.2 apply方法</h4><ul><li><p>fn.apply(thisArg[, argsArray])</p><p>作用：<b>调用一个函数</b>，并指定调用时 this 的值</p><p>参数: thisArg 函数中 this 的指定值； argsArray 可选的参数数组(!!)</p><p>返回值：函数调用的结果</p><p>应用场景:  经常跟数组有关系</p></li><li><p>由于可以接受一个参数数组，所以对于数组元素的遍历操作可以使用 apply;</p><p>   在可以使用 call 的情况下， 都可以使用 apply 替代 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-built_in">console</span>.log(a + b);<br>        &#125;<br>        fn.apply(&#123;&#125;, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">//一定要用[]  即使只有一个值 也需要用[]</span><br><br>        <span class="hljs-comment">// 1.用apply求一组数的最大值</span><br>        <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">90</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>];<br>        <span class="hljs-comment">//使用null作为第一个参数 表示不关心this的指向  默认为window</span><br>        <span class="hljs-comment">//apply 可以把第二个参数数组 转换成用,号分割的参数进行传递</span><br>        <span class="hljs-comment">//因此才可以使用Math.max()方法 来求这串数字的最大值</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, arr));<br></code></pre></td></tr></table></figure><h4 id="3-3-bind方法"><a href="#3-3-bind方法" class="headerlink" title="3.3 bind方法"></a>3.3 bind方法</h4></li><li><p>var newFn = fn.bind(thisArg[, arg1, arg2, …])</p></li></ul><p>​       作用：<b>不会调用函数</b>，基于原函数创建一个新函数,这个新函数的 this 被指定为第一个参数， 其余参数作为实参传递给新函数</p><p>​       参数：thisArg 是新函数内 this 的预设值; arg1, arg2 是新函数预设传入的参数</p><p>​       返回值: 新函数</p><p>​       应用场景:不调用函数,但是还想改变this指向</p><ul><li><p>bind方法的作用</p><p> (1) 创建一个函数，不论怎么调用，这个函数都有同样的 this 值</p><p> (2) 使一个函数拥有预设的初始参数 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>           <span class="hljs-built_in">console</span>.log(a + b);<br>       &#125;<br>       <span class="hljs-comment">// bind是用来创建形函数的，并且可以为新函数预先指定传入的实参 这里为4,5</span><br>       <span class="hljs-keyword">var</span> newFn = fn.bind(&#123;&#125;, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>           <span class="hljs-comment">// bind只创建 不调用 </span><br>       newFn() <span class="hljs-comment">//&#123;&#125;    9     新函数的this被改成&#123;&#125;了</span><br>       fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//window  3  因为bind是创建了新的函数 所以原函数的this指向还是window</span><br></code></pre></td></tr></table></figure><p>​      (3)改变定时器内部的this指向</p><pre><code> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 为定时器中的函数修改 this 指向：点击按钮后禁用这个按钮，3s后再开启 </span><br>       <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-comment">// 禁用按钮</span><br>           <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span><br>               <span class="hljs-comment">// setTimeout(function() &#123;</span><br>               <span class="hljs-comment">//     this.disabled = false</span><br>               <span class="hljs-comment">// &#125;.bind(btn), 2000)</span><br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">false</span> <span class="hljs-comment">//这里定时器内部的this指向window</span><br>               &#125;.bind(<span class="hljs-built_in">this</span>), <span class="hljs-number">2000</span>) <span class="hljs-comment">//这里定时器的处理函数.band(this)</span><br>               <span class="hljs-comment">// 传递给bind方法中的this 在函数外面 所以这个this是由  this.disabled = true  来的  所以仍然指向btn按钮</span><br>       &#125;)<br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="3-4-call、apply、bind三者的异同"><a href="#3-4-call、apply、bind三者的异同" class="headerlink" title="3.4 call、apply、bind三者的异同"></a>3.4 call、apply、bind三者的异同</h4><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li></ol></li></ul><h3 id="4-严格模式-了解"><a href="#4-严格模式-了解" class="headerlink" title="4.严格模式     了解"></a>4.严格模式     了解</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tex">一、什么是严格模式 （了解）<br>     采用具有限制性JavaScript变体的一种方式，摆脱了以前的松散模式<br>     1. 消除了 js 代码的不合理和不严谨地方，减少怪异行为<br>     2. 消除了代码的不安全地方，保证代码安全运行<br>     3. 提高编译器的效率，增加运行的速度<br>     4. 禁用 ECMAScript 未来版本中可能会定义的一些语法 class extends super 等<br>   二、严格模式的应用<br>     1. 为整个 js 文件开启严格模式, 即在代码开头添加 &#39;use strict&#39;;<br>     2. 为某个函数开启严格模式, 即函数体代码开头添加 &#39;use strict&#39;; <br>   三、严格模式中的变化<br>     1. 变量未声明不能直接赋值<br>     2. 变量必须先声明再使用<br>     3. 函数内的 this 默认指向 undefined<br>     4. 非函数内的 this 默认指向 undefined<br>     5. 构造函数和类只能加 new 进行使用<br>     6. 函数中的参数名不能重名 <br>     7. 不允许在非函数的代码块内声明函数 (chrome 浏览器没有实现)        <br></code></pre></td></tr></table></figure><h3 id="5-高阶函数"><a href="#5-高阶函数" class="headerlink" title="5.高阶函数"></a>5.高阶函数</h3><p>高阶函数是对其他函数进行操作的函数，主要有两种类型的高阶函数：</p><ol><li><p>把函数作为参数的函数</p></li><li><p>把函数作为返回值的函数 </p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1. 把函数作为参数的函数</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">callback</span>) </span>&#123; <span class="hljs-comment">//callback 回调函数</span><br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               callback()<br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;<br>       <span class="hljs-comment">// 调用animate函数 传入的实参是一个函数</span><br>       animate(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>           &#125;)<br>           <span class="hljs-comment">// 2. 把函数作为返回值的函数</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">var</span> res = fn() <span class="hljs-comment">//这里的fn()调用后得到的结果是整个匿名函数</span><br>       <span class="hljs-built_in">console</span>.log(res);<br>       res() <span class="hljs-comment">//调用返回的函数</span><br></code></pre></td></tr></table></figure><h3 id="6-闭包"><a href="#6-闭包" class="headerlink" title="6.闭包"></a>6.闭包</h3><h4 id="6-1变量的作用域复习"><a href="#6-1变量的作用域复习" class="headerlink" title="6.1变量的作用域复习"></a>6.1变量的作用域复习</h4><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><ol><li>函数内部可以使用全局变量。</li><li>函数外部不可以使用局部变量。</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h4 id="6-2-闭包的概念"><a href="#6-2-闭包的概念" class="headerlink" title="6.2 闭包的概念"></a>6.2 闭包的概念</h4><p>内部函数访问外部函数声明的变量，这种组合方式就是闭包</p><h4 id="6-3-JS-中的垃圾回收机制-GC"><a href="#6-3-JS-中的垃圾回收机制-GC" class="headerlink" title="6.3 JS 中的垃圾回收机制(GC)"></a>6.3 JS 中的垃圾回收机制(GC)</h4><p>垃圾回收机制会定期（周期性）找出那些不再引用到的内存（变量），然后释放其内存</p><h4 id="6-4-闭包产生的原因"><a href="#6-4-闭包产生的原因" class="headerlink" title="6.4 闭包产生的原因"></a>6.4 闭包产生的原因</h4><ol><li><p>当一个函数内的声明的变量没有被其他函数引用时，那么调用完这个函数后，</p><p>所有的局部变量就会被垃圾回收机制清除；</p></li><li><p>一旦这个变量被另外一个函数所引用，这个变量的值会始终保存在内存中，</p><p>不会被垃圾回收机制回收，从而形成了闭包 </p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//外部函数</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span><br>              <span class="hljs-comment">//内部函数</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(++num);<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> res = foo();<br>      <span class="hljs-built_in">console</span>.log(res);<br>      res(); <span class="hljs-comment">//11</span><br>      res(); <span class="hljs-comment">//这里的值是12</span><br>      <span class="hljs-comment">// 原因是：返回的bar这个函数被全局的res所引用，所以bar 不会被删除</span><br>      <span class="hljs-comment">// 由于bar函数中引用了num这个变量，所以num这个变量在foo调用完成后也不会被删除</span><br></code></pre></td></tr></table></figure><h4 id="6-5-闭包的作用"><a href="#6-5-闭包的作用" class="headerlink" title="6.5 闭包的作用"></a>6.5 闭包的作用</h4><p>好处:(1)延伸了变量的使用范围(变量一直保存在内存中)</p><p>​         (2)实现了数据的封装</p><p>​         (3)实现了数据的缓存（函数的柯里化）</p><p>缺点(了解就行): (1)闭包会使得函数中的变量都被保存在内存中，加大了内存消耗 (空间换时间)</p><p>​                            (2)容器引发内存泄漏 (内存没有及时清理)</p><h4 id="6-6-闭包的案例"><a href="#6-6-闭包的案例" class="headerlink" title="6.6 闭包的案例"></a>6.6 闭包的案例</h4><p><strong>一般和立即执行函数!()()一起使用 用立即执行函数创建闭包称为小闭包</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//在异步任务中使用同步任务下的变量 </span></span><br><span class="javascript">    <span class="hljs-comment">// 需求: 点击每个按钮弹出当前按钮的索引</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 2.闭包</span></span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 每次循环都会创建一个立即执行函数 用立即执行函数创建闭包称为小闭包</span></span><br><span class="javascript">        <span class="hljs-comment">// 一共创建了五个立即执行函数 每个执行函数保存的j的值为 0 1 2 3 4</span></span><br><span class="javascript">        !(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) </span>&#123;</span><br><span class="javascript">            btns[j].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(j);</span><br>            &#125;)<br><span class="javascript">        &#125;)(i) <span class="hljs-comment">//把for循环的实参i传给形参j</span></span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>hello1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>hello2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>hello3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 需求: 3s 之后打印每个 li 中的内容</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="javascript">        !(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(lis[j].innerText);</span><br>            &#125;, 3000)<br>        &#125;)(i)<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 闭包的应用：计算打车的价格 </span><br>       <span class="hljs-comment">/* 打车起步价 8（3公里内），之后每多一公里增加 5 块钱，用户输入公里数就可以得出打车价格</span><br><span class="hljs-comment">       如果有拥堵的情况，在之前价格的基础上再多收取 10 块钱拥堵费 */</span><br><br>       <span class="hljs-comment">// 封装一个求正常时打车价格 和 拥挤时打车价格的对象, 并全局中不能访问到起步价和总价 </span><br>       <span class="hljs-keyword">var</span> obj = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>; <span class="hljs-comment">//总价</span><br>           <span class="hljs-keyword">var</span> start = <span class="hljs-number">8</span>; <span class="hljs-comment">//起步价</span><br><br>           <span class="hljs-comment">// return的是我们需要的对象</span><br>           <span class="hljs-keyword">return</span> &#123;<br>               <span class="hljs-comment">//正常的价格</span><br>               price: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">km</span>) </span>&#123;<br>                   total = km &lt;= <span class="hljs-number">3</span> ? start : (km - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span> + <span class="hljs-number">8</span><br>                   <span class="hljs-keyword">return</span> total<br>               &#125;,<br>               <span class="hljs-comment">// 拥堵的价格</span><br>               busPrice: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">isBus</span>) </span>&#123;<br>                   <span class="hljs-keyword">return</span> isBus ? total + <span class="hljs-number">10</span> : total<br>               &#125;<br>           &#125;<br>       &#125;)()<br>       <span class="hljs-built_in">console</span>.log(obj.price(<span class="hljs-number">5</span>));<br>       <span class="hljs-built_in">console</span>.log(obj.busPrice(<span class="hljs-literal">true</span>));<br>       <span class="hljs-built_in">console</span>.log(obj.price(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h3 id="7-递归函数"><a href="#7-递归函数" class="headerlink" title="7.递归函数"></a>7.递归函数</h3><h4 id="7-1-什么是递归函数"><a href="#7-1-什么是递归函数" class="headerlink" title="7.1 什么是递归函数"></a>7.1 什么是递归函数</h4><ol><li>递归：函数内部自己调用自己，作用和循环效果类似 </li><li>注意事项：递归很容易发生 “栈溢出” 错误，所以和 while 循环类似必须要添加中断条件return</li></ol><h4 id="7-2递归函数的案例"><a href="#7-2递归函数的案例" class="headerlink" title="7.2递归函数的案例"></a>7.2递归函数的案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 需求：利用递归求数学题 （找规律） </span><br>        <span class="hljs-comment">// 1. 求 1 * 2 * 3 * 4 * ... * n 阶乘（乘积）</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> n * fn(n - <span class="hljs-number">1</span>)<br>        &#125;<br>        <span class="hljs-keyword">var</span> res = fn(<span class="hljs-number">4</span>)<br>        <span class="hljs-built_in">console</span>.log(res);<br>        <span class="hljs-comment">// 2. 求 n 到 m 两个数之间的阶乘  5, 10 ===&gt; 5 * 6 * ... * 10</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (y == x) &#123;<br>                <span class="hljs-keyword">return</span> x<br>            &#125;<br>            <span class="hljs-keyword">return</span> y * fn1(x, y - <span class="hljs-number">1</span>)<br>        &#125;<br>        <span class="hljs-keyword">var</span> res1 = fn1(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">console</span>.log(res1);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2. 利用递归函数求斐波那契数列（兔子序列）0, 1, 1, 2, 3, 5, 8, 13, 21...</span><br><span class="hljs-comment">// 用户输入一个数字 n 就可以求出这个数字对应的斐波那契数列值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-comment">// 终止条件</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//第0项</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//第1项</span><br>    <span class="hljs-comment">//通用的规律 第n个数 是由第n-1个数和第n-2个数相加得到的</span><br>    <span class="hljs-keyword">return</span> fn(n - <span class="hljs-number">1</span>) + fn(n - <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(fn(<span class="hljs-number">5</span>)); <span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><p><img src="/2021/02/09/JS%E9%AB%98%E7%BA%A7/JS%E9%AB%98%E7%BA%A7%E7%AC%AC03%E5%A4%A9/Users\ytt5023\Desktop\笔记\JS高级\第3天\images\递归函数案例.png"></p><h3 id="8-拷贝"><a href="#8-拷贝" class="headerlink" title="8.拷贝"></a>8.拷贝</h3><h4 id="8-1-浅拷贝"><a href="#8-1-浅拷贝" class="headerlink" title="8.1 浅拷贝"></a>8.1 浅拷贝</h4><p>只拷贝对象一层的数据，复杂数据类型只拷贝内存地址值（引用同一个对象） </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            id: <span class="hljs-number">1</span>,<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            data: &#123;<br>                id: <span class="hljs-number">2</span>,<br>                age: <span class="hljs-number">19</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> obj2 = &#123;&#125;<br>            <span class="hljs-comment">// 1.遍历对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-comment">// 因为key是变量所以要用[] 不能用.</span><br>            <span class="hljs-comment">// 在obj2中添加 属性名key 值为obj[key]</span><br>            obj2[key] = obj[key]<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(obj2);<br>        <span class="hljs-built_in">console</span>.log(obj2.data.age); <span class="hljs-comment">//19</span><br>        obj.data.age = <span class="hljs-number">25</span>;<br>        <span class="hljs-built_in">console</span>.log(obj2.data.age); <span class="hljs-comment">//25</span><br>        <span class="hljs-comment">// 因为是浅拷贝  只拷贝对象一层的数据，复杂数据类型只拷贝内存地址值</span><br>        <span class="hljs-comment">// 所以修改obj里面的复杂数据类型data里面的值  obj2也会被修改  因为obj和obj2 里面的data的内存地址是一样的</span><br></code></pre></td></tr></table></figure><h4 id="8-2-深拷贝"><a href="#8-2-深拷贝" class="headerlink" title="8.2 深拷贝"></a>8.2 深拷贝</h4><p>拷贝对象多层的数据，遇到复杂数据类型会继续新建一个空间，拷贝里面每一层的属性和值 二、和浅拷贝的区别 深拷贝后的对象和原对象是完全隔离的，各自互不影响， 而浅拷贝中所有复杂数据类型的值，都是共同引用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>            id: <span class="hljs-number">1</span>,<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            data: &#123;<br>                id: <span class="hljs-number">2</span>,<br>                age: <span class="hljs-number">19</span>,<br>            &#125;,<br>            arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>        &#125;<br>        <span class="hljs-keyword">var</span> obj2 = &#123;&#125;<br>            <span class="hljs-comment">// 深拷贝函数  把obj1这个原对象所有属性和值 完整的拷贝到obj2中</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj1, obj2</span>) </span>&#123;<br>            <span class="hljs-comment">// 1.遍历原对象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj1) &#123; <span class="hljs-comment">//数组也支持for in的遍历 属性名是索引值  属性值是数组元素</span><br>                <span class="hljs-keyword">var</span> temp = obj1[key];<br>                <span class="hljs-comment">// 2.分情况讨论三种 对象 数组  简单数据类型  数组也是对象 所以要先判断数组</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(temp)) &#123; <span class="hljs-comment">//数组</span><br>                    obj2[key] = []<br>                        <span class="hljs-comment">// 当 当前的temp也就是obj1[key]的值是数组时,在新对象里也建立一个属性 属性名和原对象的一样 属性值为空数组  </span><br>                        <span class="hljs-comment">// 然后再次调动函数  拷贝两个数组</span><br>                    deepClone(temp, obj2[key])<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123; <span class="hljs-comment">//对象</span><br>                    obj2[key] = &#123;&#125;<br>                    deepClone(temp, obj2[key])<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//简单数据类型  直接拷贝</span><br>                    obj2[key] = temp<br>                &#125;<br>            &#125;<br>        &#125;<br>        deepClone(obj1, obj2);<br>        obj1.data.id = <span class="hljs-number">5</span><br>        <span class="hljs-built_in">console</span>.log(obj1); <span class="hljs-comment">//5</span><br>        <span class="hljs-built_in">console</span>.log(obj2); <span class="hljs-comment">//2  深拷贝 深拷贝后的对象和原对象是完全隔离的，各自互不影响</span><br></code></pre></td></tr></table></figure><h4 id="8-3-快速拷贝"><a href="#8-3-快速拷贝" class="headerlink" title="8.3 快速拷贝"></a>8.3 快速拷贝</h4><ol><li><pre><code class="js"> // 浅拷贝快速实现        var obj = &#123;            a: 1,            b: 1,            c: &#123;                d: 4            &#125;        &#125;;        console.log(&#123;...obj        &#125;);<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-number">2.</span> ```<span class="javascript">js</span><br><span class="javascript">    <span class="hljs-comment">// 深拷贝快速实现</span></span><br><span class="javascript">           <span class="hljs-comment">// JSON.stringify() 可以把复杂数据类型转成字符串</span></span><br><span class="javascript">           <span class="hljs-comment">// JSON.parse()可以把字符串再转成对象</span></span><br><span class="javascript">           <span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj));</span><br><span class="javascript">           <span class="hljs-built_in">console</span>.log(obj2);</span><br></code></pre></td></tr></table></figure></code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第二天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC02%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC02%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day02-Web-APIs"><a href="#day02-Web-APIs" class="headerlink" title="day02 - Web APIs"></a>day02 - Web APIs</h1><h2 id="1-1-排他操作"><a href="#1-1-排他操作" class="headerlink" title="1.1. 排他操作"></a>1.1. 排他操作</h2><h3 id="1-1-1-排他思想"><a href="#1-1-1-排他思想" class="headerlink" title="1.1.1 排他思想"></a>1.1.1 排他思想</h3><p>![](Web API第02天/web api01_1.png)</p><p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p><ol><li><p>所有元素全部清除样式（干掉其他人）</p></li><li><p>给当前元素设置样式 （留下我自己）</p></li><li><p>注意顺序不能颠倒，首先干掉其他人，再设置自己</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;按钮<span class="hljs-number">1</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">2</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">3</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">4</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">5</span>&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取所有按钮元素</span><br>    <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>        btns[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>                btns[i].style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span><br>            <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br><br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-案例：百度换肤"><a href="#1-2-案例：百度换肤" class="headerlink" title="1.2 案例：百度换肤"></a>1.2 案例：百度换肤</h2><p><img src="/images/1550914640677.png" alt="1550914640677"></p><p><img src="/images/1550914663042.png" alt="1550914663042"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;baidu&quot;</span>&gt;<br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/1.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/2.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/3.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/4.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 获取元素 </span><br>        <span class="hljs-keyword">var</span> imgs = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.baidu&#x27;</span>).querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>);<br>        <span class="hljs-comment">// console.log(imgs);</span><br>        <span class="hljs-comment">// 2. 循环注册事件 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imgs.length; i++) &#123;<br>            imgs[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// this.src 就是我们点击图片的路径   images/2.jpg</span><br>                <span class="hljs-comment">// console.log(this.src);</span><br>                <span class="hljs-comment">// 把这个路径 this.src 给body 就可以了</span><br>                <span class="hljs-built_in">document</span>.body.style.backgroundImage = <span class="hljs-string">&#x27;url(&#x27;</span> + <span class="hljs-built_in">this</span>.src + <span class="hljs-string">&#x27;)&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="1-3-案例：表格隔行变色"><a href="#1-3-案例：表格隔行变色" class="headerlink" title="1.3 案例：表格隔行变色"></a>1.3 案例：表格隔行变色</h2><p><img src="/images/1550914791881.png" alt="1550914791881"></p><p><img src="/images/1550914812202.png" alt="1550914812202"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1.获取元素 获取的是 tbody 里面所有的行</span><br>    <span class="hljs-keyword">var</span> trs = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>).querySelectorAll(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>    <span class="hljs-comment">// 2. 利用循环绑定注册事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; trs.length; i++) &#123;<br>        <span class="hljs-comment">// 3. 鼠标经过事件 onmouseover</span><br>        trs[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// console.log(11);</span><br>                <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;bg&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 4. 鼠标离开事件 onmouseout</span><br>        trs[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-4-案例：全选"><a href="#1-4-案例：全选" class="headerlink" title="1.4 案例：全选"></a>1.4 案例：全选</h2><p><img src="/images/1550914980274.png" alt="1550914980274"></p><p><img src="/images/1550915005393.png" alt="1550915005393"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1. 全选和取消全选做法：  让下面所有复选框的checked属性（选中状态） 跟随 全选按钮即可</span><br>    <span class="hljs-comment">// 获取元素</span><br>    <br>    <span class="hljs-keyword">var</span> j_cbAll = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;j_cbAll&#x27;</span>); <br>    <span class="hljs-keyword">var</span> j_tbs = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;j_tb&#x27;</span>).getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>); <br>    <span class="hljs-comment">// 全选按钮注册事件</span><br>    j_cbAll.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// this.checked 当前复选框的选中状态</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.checked);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;<br>                j_tbs[i].checked = <span class="hljs-built_in">this</span>.checked;<br>            &#125;<br>     &#125;<br>     <span class="hljs-comment">// 给所有的子复选框注册单击事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;<br>        j_tbs[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// flag 控制全选按钮是否选中</span><br>            <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (!j_tbs[i].checked) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>; <br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 设置全选按钮的状态</span><br>            j_cbAll.checked = flag;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-5-自定义属性操作"><a href="#1-5-自定义属性操作" class="headerlink" title="1.5. 自定义属性操作"></a>1.5. 自定义属性操作</h2><h3 id="1-5-1-获取属性值"><a href="#1-5-1-获取属性值" class="headerlink" title="1.5.1 获取属性值"></a>1.5.1 获取属性值</h3><p><img src="/images/1550915376339.png" alt="1550915376339"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">   &lt;div id=<span class="hljs-string">&quot;demo&quot;</span> index=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;&lt;/div&gt;<br>   &lt;script&gt;<br>       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>       <span class="hljs-comment">// 1. 获取元素的属性值</span><br>       <span class="hljs-comment">// (1) element.属性</span><br>       <span class="hljs-built_in">console</span>.log(div.id);<br>       <span class="hljs-comment">//(2) element.getAttribute(&#x27;属性&#x27;)  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</span><br>       <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;id&#x27;</span>));<br>       <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-2-设置属性值"><a href="#1-5-2-设置属性值" class="headerlink" title="1.5.2. 设置属性值"></a>1.5.2. 设置属性值</h3><p><img src="/images/1550915445026.png" alt="1550915445026"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2. 设置元素属性值</span><br><span class="hljs-comment">// (1) element.属性= &#x27;值&#x27;</span><br>div.id = <span class="hljs-string">&#x27;test&#x27;</span>;<br>div.className = <span class="hljs-string">&#x27;navs&#x27;</span>;<br><span class="hljs-comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span><br>div.setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-number">2</span>);<br>div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>); <span class="hljs-comment">// class 特殊  这里面写的就是</span><br></code></pre></td></tr></table></figure><h3 id="1-5-3-移出属性"><a href="#1-5-3-移出属性" class="headerlink" title="1.5.3. 移出属性"></a>1.5.3. 移出属性</h3><p><img src="/images/1550915513137.png" alt="1550915513137"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// class 不是className</span><br>      <span class="hljs-comment">// 3 移除属性 removeAttribute(属性)    </span><br>      div.removeAttribute(<span class="hljs-string">&#x27;index&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-5-4-案例：tab栏"><a href="#1-5-4-案例：tab栏" class="headerlink" title="1.5.4. 案例：tab栏"></a>1.5.4. 案例：tab栏</h3><p><img src="/images/1550915567627.png" alt="1550915567627"></p><p><img src="/images/1550915590707.png" alt="1550915590707"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 获取元素</span><br>    <span class="hljs-keyword">var</span> tab_list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.tab_list&#x27;</span>);<br>    <span class="hljs-keyword">var</span> lis = tab_list.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-keyword">var</span> items = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;.item&#x27;</span>);<br>    <span class="hljs-comment">// for循环，给选项卡绑定点击事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>        <span class="hljs-comment">// 开始给5个小li 设置索引号 </span><br>        lis[i].setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>, i);<br>        lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. 上的模块选项卡，当前这一个底色会是红色，其余不变（排他思想）</span><br>            <span class="hljs-comment">// 干掉所有人 其余的li清除 class 这个类</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>                lis[i].className = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 留下我自己 </span><br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>            <span class="hljs-comment">// 2. 下面的显示内容模块</span><br>            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(index);<br>            <span class="hljs-comment">// 干掉所有人 让其余的item 这些div 隐藏</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>                items[i].style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 留下我自己 让对应的item 显示出来</span><br>            items[index].style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-5-H5自定义属性"><a href="#1-5-5-H5自定义属性" class="headerlink" title="1.5.5. H5自定义属性"></a>1.5.5. H5自定义属性</h3><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p><p>自定义属性获取是通过getAttribute(‘属性’) 获取。</p><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p><p>H5给我们新增了自定义属性：</p><p><img src="/images/1550915798516.png" alt="1550915798516"></p><p><img src="/images/1550915815571.png" alt="1550915815571"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div getTime=<span class="hljs-string">&quot;20&quot;</span> data-index=<span class="hljs-string">&quot;2&quot;</span> data-list-name=<span class="hljs-string">&quot;andy&quot;</span>&gt;&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// console.log(div.getTime);</span><br>    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;getTime&#x27;</span>));<br>    div.setAttribute(<span class="hljs-string">&#x27;data-time&#x27;</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;data-index&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;data-list-name&#x27;</span>));<br>    <span class="hljs-comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span><br>    <span class="hljs-comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span><br>    <span class="hljs-built_in">console</span>.log(div.dataset);<br>    <span class="hljs-built_in">console</span>.log(div.dataset.index);<br>    <span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">&#x27;index&#x27;</span>]);<br>    <span class="hljs-comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span><br>    <span class="hljs-built_in">console</span>.log(div.dataset.listName);<br>    <span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">&#x27;listName&#x27;</span>]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-6-节点操作"><a href="#1-6-节点操作" class="headerlink" title="1.6. 节点操作"></a>1.6. 节点操作</h2><h3 id="1-6-1-节点概述"><a href="#1-6-1-节点概述" class="headerlink" title="1.6.1. 节点概述"></a>1.6.1. 节点概述</h3><p>​    网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>​    HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><p><img src="/images/1550970944363.png" alt="1550970944363"></p><p>​    一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><p><img src="/images/1550970986988.png" alt="1550970986988"></p><h3 id="1-6-2-节点层级"><a href="#1-6-2-节点层级" class="headerlink" title="1.6.2. 节点层级"></a>1.6.2. 节点层级</h3><p>​    利用 DOM 树可以把节点划分为不同的层级关系，常见的是<strong>父子兄层级关系</strong>。</p><p>​    <img src="/images/1550971058781.png" alt="1550971058781"></p><h3 id="1-6-3-父级节点"><a href="#1-6-3-父级节点" class="headerlink" title="1.6.3. 父级节点"></a>1.6.3. 父级节点</h3><p><img src="/images/1550971196686.png" alt="1550971196686"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;×&lt;/span&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 父节点 parentNode</span><br>    <span class="hljs-keyword">var</span> erweima = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.erweima&#x27;</span>);<br>    <span class="hljs-comment">// var box = document.querySelector(&#x27;.box&#x27;);</span><br>    <span class="hljs-comment">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span><br>    <span class="hljs-built_in">console</span>.log(erweima.parentNode);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-4-子节点"><a href="#1-6-4-子节点" class="headerlink" title="1.6.4. 子节点"></a>1.6.4. 子节点</h3><p><strong>所有子节点</strong></p><p><img src="/images/1550971263925.png" alt="1550971263925"></p><p><strong>子元素节点</strong></p><p><img src="/images/1550971325828.png" alt="1550971325828"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// DOM 提供的方法（API）获取</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">var</span> lis = ul.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span><br>    <span class="hljs-built_in">console</span>.log(ul.childNodes);<br>    <span class="hljs-built_in">console</span>.log(ul.childNodes[<span class="hljs-number">0</span>].nodeType);<br>    <span class="hljs-built_in">console</span>.log(ul.childNodes[<span class="hljs-number">1</span>].nodeType);<br>    <span class="hljs-comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span><br>    <span class="hljs-built_in">console</span>.log(ul.children);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>第1个子节点</strong></p><p><img src="/images/1550971774758.png" alt="1550971774758"></p><p><strong>最后1个子节点</strong></p><p><img src="/images/1550971825493.png" alt="1550971825493"></p><p><strong>第1个子元素节点</strong></p><p><img src="/images/1550972014509.png" alt="1550972014509"></p><p><strong>最后1个子元素节点</strong></p><p><img src="/images/1550972106485.png" alt="1550972106485"></p><p>​    实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p><p><img src="/images/1550972648014.png" alt="1550972648014"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ol&gt;<br>    &lt;li&gt;我是li1&lt;/li&gt;<br>    &lt;li&gt;我是li2&lt;/li&gt;<br>    &lt;li&gt;我是li3&lt;/li&gt;<br>    &lt;li&gt;我是li4&lt;/li&gt;<br>    &lt;li&gt;我是li5&lt;/li&gt;<br>&lt;/ol&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> ol = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ol&#x27;</span>);<br>    <span class="hljs-comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span><br>    <span class="hljs-built_in">console</span>.log(ol.firstChild);<br>    <span class="hljs-built_in">console</span>.log(ol.lastChild);<br>    <span class="hljs-comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span><br>    <span class="hljs-built_in">console</span>.log(ol.firstElementChild);<br>    <span class="hljs-built_in">console</span>.log(ol.lastElementChild);<br>    <span class="hljs-comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span><br>    <span class="hljs-built_in">console</span>.log(ol.children[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">console</span>.log(ol.children[ol.children.length - <span class="hljs-number">1</span>]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-5-案例：新浪下拉菜单"><a href="#1-6-5-案例：新浪下拉菜单" class="headerlink" title="1.6.5. 案例：新浪下拉菜单"></a>1.6.5. 案例：新浪下拉菜单</h3><p><img src="/images/1550974934894.png" alt="1550974934894"></p><p><img src="/images/1550975025608.png" alt="1550975025608"></p><p><img src="/images/1550975049176.png" alt="1550975049176"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取元素</span><br>    <span class="hljs-keyword">var</span> nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.nav&#x27;</span>);<br>    <span class="hljs-keyword">var</span> lis = nav.children; <span class="hljs-comment">// 得到4个小li</span><br>    <span class="hljs-comment">// 2.循环注册事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>        lis[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.children[<span class="hljs-number">1</span>].style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        &#125;<br>        lis[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.children[<span class="hljs-number">1</span>].style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-6-兄弟节点"><a href="#1-6-6-兄弟节点" class="headerlink" title="1.6.6. 兄弟节点"></a>1.6.6. 兄弟节点</h3><p><strong>下一个兄弟节点</strong></p><p><img src="/../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973538696.png" alt="1550973538696"></p><p><strong>上一个兄弟节点</strong></p><p><img src="/../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973558511.png" alt="1550973558511"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;我是div&lt;/div&gt;<br>&lt;span&gt;我是span&lt;/span&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span><br>    <span class="hljs-built_in">console</span>.log(div.nextSibling);<br>    <span class="hljs-built_in">console</span>.log(div.previousSibling);<br>    <span class="hljs-comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span><br>    <span class="hljs-built_in">console</span>.log(div.nextElementSibling);<br>    <span class="hljs-built_in">console</span>.log(div.previousElementSibling);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>下一个兄弟元素节点（有兼容性问题）</strong></p><p><img src="/../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973610223.png" alt="1550973610223"></p><p><strong>上一个兄弟元素节点（有兼容性问题）</strong></p><p><img src="/../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973630150.png" alt="1550973630150"></p><p><img src="/../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973722805.png" alt="1550973722805"></p><p><img src="/../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973799759.png" alt="1550973799759"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNextElementSibling</span>(<span class="hljs-params">element</span>) </span>&#123;<br>   <span class="hljs-keyword">var</span> el = element;<br>   <span class="hljs-keyword">while</span> (el = el.nextSibling) &#123;<br>     <span class="hljs-keyword">if</span> (el.nodeType === <span class="hljs-number">1</span>) &#123;<br>         <span class="hljs-keyword">return</span> el;<br>     &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br> &#125;  <br></code></pre></td></tr></table></figure><h3 id="1-6-7-创建节点"><a href="#1-6-7-创建节点" class="headerlink" title="1.6.7. 创建节点"></a>1.6.7. 创建节点</h3><p><img src="/images/1550975514321.png" alt="1550975514321"></p><h3 id="1-6-8-添加节点"><a href="#1-6-8-添加节点" class="headerlink" title="1.6.8. 添加节点"></a>1.6.8. 添加节点</h3><p><img src="/images/1550975640170.png" alt="1550975640170"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;<span class="hljs-number">123</span>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 创建节点元素节点</span><br>    <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    ul.appendChild(li);<br>    <span class="hljs-comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span><br>    <span class="hljs-keyword">var</span> lili = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    ul.insertBefore(lili, ul.children[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-9-案例：简单版发布留言"><a href="#1-6-9-案例：简单版发布留言" class="headerlink" title="1.6.9. 案例：简单版发布留言"></a>1.6.9. 案例：简单版发布留言</h3><p><img src="/images/1550975849302.png" alt="1550975849302"></p><p><img src="/images/1550975887017.png" alt="1550975887017"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;textarea name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/textarea&gt;<br>    &lt;button&gt;发布&lt;/button&gt;<br>    &lt;ul&gt;<br><br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 获取元素</span><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>        <span class="hljs-comment">// 2. 注册事件</span><br>        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (text.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                alert(<span class="hljs-string">&#x27;您没有输入内容&#x27;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// console.log(text.value);</span><br>                <span class="hljs-comment">// (1) 创建元素</span><br>                <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>                <span class="hljs-comment">// 先有li 才能赋值</span><br>                li.innerHTML = text.value;<br>                <span class="hljs-comment">// (2) 添加元素</span><br>                <span class="hljs-comment">// ul.appendChild(li);</span><br>                ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第三天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC03%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC03%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day03-Web-APIs"><a href="#day03-Web-APIs" class="headerlink" title="day03 - Web APIs"></a>day03 - Web APIs</h1><h2 id="1-1-节点操作"><a href="#1-1-节点操作" class="headerlink" title="1.1. 节点操作"></a>1.1. 节点操作</h2><h3 id="1-1-1-删除节点"><a href="#1-1-1-删除节点" class="headerlink" title="1.1.1 删除节点"></a>1.1.1 删除节点</h3><p><img src="/images/1551163384254.png" alt="1551163384254"></p><p>node.removeChild() 方法从 node节点中删除一个子节点，返回删除的节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;删除&lt;/button&gt;<br>&lt;ul&gt;<br>    &lt;li&gt;熊大&lt;/li&gt;<br>    &lt;li&gt;熊二&lt;/li&gt;<br>    &lt;li&gt;光头强&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1.获取元素</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// 2. 删除元素  node.removeChild(child)</span><br>    <span class="hljs-comment">// ul.removeChild(ul.children[0]);</span><br>    <span class="hljs-comment">// 3. 点击按钮依次删除里面的孩子</span><br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (ul.children.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ul.removeChild(ul.children[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-2-案例：删除留言"><a href="#1-1-2-案例：删除留言" class="headerlink" title="1.1.2 案例：删除留言"></a>1.1.2 案例：删除留言</h3><p><img src="/images/1551163586475.png" alt="1551163586475"></p><p><img src="/images/1551163635501.png" alt="1551163635501"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;textarea name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/textarea&gt;<br>&lt;button&gt;发布&lt;/button&gt;<br>&lt;ul&gt;<br><br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取元素</span><br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-comment">// 2. 注册事件</span><br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (text.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            alert(<span class="hljs-string">&#x27;您没有输入内容&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// console.log(text.value);</span><br>            <span class="hljs-comment">// (1) 创建元素</span><br>            <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>            <span class="hljs-comment">// 先有li 才能赋值</span><br>            li.innerHTML = text.value + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>            <span class="hljs-comment">// (2) 添加元素</span><br>            <span class="hljs-comment">// ul.appendChild(li);</span><br>            ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>            <span class="hljs-comment">// (3) 删除元素 删除的是当前链接的li  它的父亲</span><br>            <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>                <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-comment">// 删除的是 li 当前a所在的li  this.parentNode;</span><br>                    ul.removeChild(<span class="hljs-built_in">this</span>.parentNode);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-3-复制（克隆）节点"><a href="#1-1-3-复制（克隆）节点" class="headerlink" title="1.1.3 复制（克隆）节点"></a>1.1.3 复制（克隆）节点</h3><p><img src="/images/1551163763825.png" alt="1551163763825"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;<span class="hljs-number">1111</span>&lt;/li&gt;<br>    &lt;li&gt;<span class="hljs-number">2</span>&lt;/li&gt;<br>    &lt;li&gt;<span class="hljs-number">3</span>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span><br>    <span class="hljs-comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span><br>    <span class="hljs-keyword">var</span> lili = ul.children[<span class="hljs-number">0</span>].cloneNode(<span class="hljs-literal">true</span>);<br>    ul.appendChild(lili);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：动态生成表格"><a href="#1-1-4-案例：动态生成表格" class="headerlink" title="1.1.4 案例：动态生成表格"></a>1.1.4 案例：动态生成表格</h3><p><img src="/images/1551163900675.png" alt="1551163900675"></p><p><img src="/images/1551163924396.png" alt="1551163924396"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;script&gt;<br>      <span class="hljs-comment">// 1.先去准备好学生的数据</span><br>      <span class="hljs-keyword">var</span> datas = [&#123;<br>          name: <span class="hljs-string">&#x27;魏璎珞&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">100</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;弘历&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">98</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;傅恒&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">99</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;明玉&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">88</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;大猪蹄子&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">0</span><br>      &#125;];<br>      <span class="hljs-comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span><br>      <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>);<br><span class="hljs-comment">// 遍历数组</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; datas.length; i++) &#123; <br>          <span class="hljs-comment">// 1. 创建 tr行</span><br>          <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>          tbody.appendChild(tr);<br>          <span class="hljs-comment">// 2. 行里面创建单元格td 单元格的数量取决于每个对象里面的属性个数  </span><br>          <span class="hljs-comment">// 使用for in遍历学生对象</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> datas[i]) &#123; <br>              <span class="hljs-comment">// 创建单元格 </span><br>              <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>);<br>              <span class="hljs-comment">// 把对象里面的属性值 datas[i][k] 给 td  </span><br>              td.innerHTML = datas[i][k];<br>              tr.appendChild(td);<br>          &#125;<br>          <span class="hljs-comment">// 3. 创建有删除2个字的单元格 </span><br>          <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>);<br>          td.innerHTML = <span class="hljs-string">&#x27;&lt;a href=&quot;javascript:;&quot;&gt;删除 &lt;/a&gt;&#x27;</span>;<br>          tr.appendChild(td);<br><br>      &#125;<br>      <span class="hljs-comment">// 4. 删除操作 开始 </span><br>      <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>          <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// 点击a 删除 当前a 所在的行(链接的爸爸的爸爸)  node.removeChild(child)  </span><br>              tbody.removeChild(<span class="hljs-built_in">this</span>.parentNode.parentNode)<br>          &#125;<br>      &#125;<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-5-创建元素的三种方式"><a href="#1-1-5-创建元素的三种方式" class="headerlink" title="1.1.5 创建元素的三种方式"></a>1.1.5 创建元素的三种方式</h3><p><img src="/images/1551164214925.png" alt="1551164214925"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 三种创建元素方式区别 </span><br>    <span class="hljs-comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span><br>     <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>     btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>);<br>     &#125;<br><br>    <span class="hljs-comment">// 2. innerHTML 创建元素</span><br>    <span class="hljs-keyword">var</span> inner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.inner&#x27;</span>);<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>         inner.innerHTML += <span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span><br>     &#125;<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        arr.push(<span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);<br>    &#125;<br>    inner.innerHTML = arr.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-comment">// 3. document.createElement() 创建元素</span><br>    <span class="hljs-keyword">var</span> create = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.create&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        create.appendChild(a);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-6-innerTHML和createElement效率对比"><a href="#1-1-6-innerTHML和createElement效率对比" class="headerlink" title="1.1.6 innerTHML和createElement效率对比"></a>1.1.6 innerTHML和createElement效率对比</h3><p><strong>innerHTML字符串拼接方式（效率低）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-built_in">document</span>.body.innerHTML += <span class="hljs-string">&#x27;&lt;div style=&quot;width:100px; height:2px; border:1px solid blue;&quot;&gt;&lt;/div&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-built_in">console</span>.log(d2 - d1);<br>    &#125;<br>    fn();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>createElement方式（效率一般）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>            div.style.width = <span class="hljs-string">&#x27;100px&#x27;</span>;<br>            div.style.height = <span class="hljs-string">&#x27;2px&#x27;</span>;<br>            div.style.border = <span class="hljs-string">&#x27;1px solid red&#x27;</span>;<br>            <span class="hljs-built_in">document</span>.body.appendChild(div);<br>        &#125;<br>        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-built_in">console</span>.log(d2 - d1);<br>    &#125;<br>    fn();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>innerHTML数组方式（效率高）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-keyword">var</span> array = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            array.push(<span class="hljs-string">&#x27;&lt;div style=&quot;width:100px; height:2px; border:1px solid blue;&quot;&gt;&lt;/div&gt;&#x27;</span>);<br>        &#125;<br>        <span class="hljs-built_in">document</span>.body.innerHTML = array.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-built_in">console</span>.log(d2 - d1);<br>    &#125;<br>    fn();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-DOM的核心总结"><a href="#1-2-DOM的核心总结" class="headerlink" title="1.2. DOM的核心总结"></a>1.2. DOM的核心总结</h2><p><img src="/images/1551164669434.png" alt="1551164669434"></p><p><img src="/images/1551164715018.png" alt="1551164715018"></p><p>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p><h3 id="1-2-1-创建"><a href="#1-2-1-创建" class="headerlink" title="1.2.1. 创建"></a>1.2.1. 创建</h3><p><img src="/images/1551164797164.png" alt="1551164797164"></p><h3 id="1-2-2-增加"><a href="#1-2-2-增加" class="headerlink" title="1.2.2. 增加"></a>1.2.2. 增加</h3><p><img src="/images/1551164829832.png" alt="1551164829832"></p><h3 id="1-2-3-删"><a href="#1-2-3-删" class="headerlink" title="1.2.3. 删"></a>1.2.3. 删</h3><p><img src="/images/1551164872533.png" alt="1551164872533"></p><h3 id="1-2-4-改"><a href="#1-2-4-改" class="headerlink" title="1.2.4. 改"></a>1.2.4. 改</h3><p><img src="/images/1551164907830.png" alt="1551164907830"></p><h3 id="1-2-5-查"><a href="#1-2-5-查" class="headerlink" title="1.2.5. 查"></a>1.2.5. 查</h3><p><img src="/images/1551164936214.png" alt="1551164936214"></p><h3 id="1-2-6-属性操作"><a href="#1-2-6-属性操作" class="headerlink" title="1.2.6. 属性操作"></a>1.2.6. 属性操作</h3><p><img src="/images/1551164985383.png" alt="1551164985383"></p><h3 id="1-2-7-事件操作（重点）"><a href="#1-2-7-事件操作（重点）" class="headerlink" title="1.2.7. 事件操作（重点）"></a>1.2.7. 事件操作（重点）</h3><h2 id="1-3-事件高级"><a href="#1-3-事件高级" class="headerlink" title="1.3. 事件高级"></a>1.3. 事件高级</h2><h3 id="1-3-1-注册事件（2种方式）"><a href="#1-3-1-注册事件（2种方式）" class="headerlink" title="1.3.1. 注册事件（2种方式）"></a>1.3.1. 注册事件（2种方式）</h3><p><img src="/images/1551165252019.png" alt="1551165252019"></p><h3 id="1-3-2-事件监听"><a href="#1-3-2-事件监听" class="headerlink" title="1.3.2 事件监听"></a>1.3.2 事件监听</h3><h4 id="addEventListener-事件监听（IE9以后支持）"><a href="#addEventListener-事件监听（IE9以后支持）" class="headerlink" title="addEventListener()事件监听（IE9以后支持）"></a>addEventListener()事件监听（IE9以后支持）</h4><p><img src="/images/1551165364122.png" alt="1551165364122"></p><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p><img src="/images/1551165604792.png" alt="1551165604792"></p><h4 id="attacheEvent-事件监听（IE678支持）"><a href="#attacheEvent-事件监听（IE678支持）" class="headerlink" title="attacheEvent()事件监听（IE678支持）"></a>attacheEvent()事件监听（IE678支持）</h4><p><img src="/images/1551165781836.png" alt="1551165781836"></p><p>​    eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p><img src="/images/1551165843912.png" alt="1551165843912"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;传统注册事件&lt;/button&gt;<br>&lt;button&gt;方法监听注册事件&lt;/button&gt;<br>&lt;button&gt;ie9 attachEvent&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// 1. 传统方式注册事件</span><br>    btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">&#x27;hao a u&#x27;</span>);<br>        &#125;<br>   <span class="hljs-comment">// 2. 事件侦听注册事件 addEventListener </span><br>   <span class="hljs-comment">// (1) 里面的事件类型是字符串 必定加引号 而且不带on</span><br>   <span class="hljs-comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span><br>    btns[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">22</span>);<br>    &#125;)<br>    btns[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-number">33</span>);<br>    &#125;)<br>    <span class="hljs-comment">// 3. attachEvent ie9以前的版本支持</span><br>    btns[<span class="hljs-number">2</span>].attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">11</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="事件监听兼容性解决方案"><a href="#事件监听兼容性解决方案" class="headerlink" title="事件监听兼容性解决方案"></a>事件监听兼容性解决方案</h4><p>封装一个函数，函数中判断浏览器的类型：</p><p><img src="/images/1551166023885.png" alt="1551166023885"></p><h3 id="1-3-3-删除事件（解绑事件）"><a href="#1-3-3-删除事件（解绑事件）" class="headerlink" title="1.3.3. 删除事件（解绑事件）"></a>1.3.3. 删除事件（解绑事件）</h3><p><img src="/images/1551166185410.png" alt="1551166185410"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>&lt;div&gt;<span class="hljs-number">2</span>&lt;/div&gt;<br>&lt;div&gt;<span class="hljs-number">3</span>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    divs[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">11</span>);<br>        <span class="hljs-comment">// 1. 传统方式删除事件</span><br>        divs[<span class="hljs-number">0</span>].onclick = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2. removeEventListener 删除事件</span><br>    divs[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn) <span class="hljs-comment">// 里面的fn 不需要调用加小括号</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">22</span>);<br>        divs[<span class="hljs-number">1</span>].removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn);<br>    &#125;<br>    <span class="hljs-comment">// 3. detachEvent</span><br>    divs[<span class="hljs-number">2</span>].attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, fn1);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">33</span>);<br>        divs[<span class="hljs-number">2</span>].detachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, fn1);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>**删除事件兼容性解决方案 **</p><p><img src="/images/1551166332453.png" alt="1551166332453"></p><h3 id="1-3-4-DOM事件流"><a href="#1-3-4-DOM事件流" class="headerlink" title="1.3.4. DOM事件流"></a>1.3.4. DOM事件流</h3><blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">html中的标签都是相互嵌套的，我们可以将元素想象成一个盒子装一个盒子，document是最外面的大盒子。<br>当你单击一个<span class="hljs-keyword">div</span>时，同时你也单击了<span class="hljs-keyword">div</span>的父元素，甚至整个页面。<br><br>那么是先执行父元素的单击事件，还是先执行<span class="hljs-keyword">div</span>的单击事件 ？？？<br></code></pre></td></tr></table></figure><p><img src="/images/1551166423144.png" alt="1551166423144"></p></blockquote><blockquote><p>比如：我们给页面中的一个div注册了单击事件，当你单击了div时，也就单击了body，单击了html，单击了document。</p></blockquote><p><img src="/images/1551166555833.png" alt="1551166555833"></p><p><img src="/images/1551166581552.png" alt="1551166581552"></p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">当时的<span class="hljs-number">2</span>大浏览器霸主谁也不服谁！<br>IE 提出从目标元素开始，然后一层一层向外接收事件并响应，也就是冒泡型事件流。<br>Netscape（网景公司）提出从最外层开始，然后一层一层向内接收事件并响应，也就是捕获型事件流。<br><br>江湖纷争，武林盟主也脑壳疼！！！<br><br>最终，w3c 采用折中的方式，平息了战火，制定了统一的标准 —<span class="hljs-comment">--— 先捕获再冒泡。</span><br>现代浏览器都遵循了此标准，所以当事件发生时，会经历<span class="hljs-number">3</span>个阶段。<br></code></pre></td></tr></table></figure><p>DOM 事件流会经历3个阶段： </p></blockquote><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段 </p></li></ol><p>​    我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。 </p><p><img src="/images/1551169007768.png" alt="1551169007768"></p><p><img src="/images/1551169042295.png" alt="1551169042295"></p><p><strong>事件冒泡</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;son盒子&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// onclick 和 attachEvent（ie） 在冒泡阶段触发</span><br>      <span class="hljs-comment">// 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 </span><br>      <span class="hljs-comment">// son -&gt; father -&gt;body -&gt; html -&gt; document</span><br>      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>);<br><span class="hljs-comment">// 给son注册单击事件</span><br>      son.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;son&#x27;</span>);<br>      &#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 给father注册单击事件</span><br>      <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.father&#x27;</span>);<br>      father.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;father&#x27;</span>);<br>      &#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 给document注册单击事件，省略第3个参数</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;document&#x27;</span>);<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>事件捕获</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;son盒子&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// 如果addEventListener() 第三个参数是 true 那么在捕获阶段触发</span><br>      <span class="hljs-comment">// document -&gt; html -&gt; body -&gt; father -&gt; son</span><br>       <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>);<br><span class="hljs-comment">// 给son注册单击事件，第3个参数为true</span><br>       son.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           alert(<span class="hljs-string">&#x27;son&#x27;</span>);<br>       &#125;, <span class="hljs-literal">true</span>);<br>       <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.father&#x27;</span>);<br><span class="hljs-comment">// 给father注册单击事件，第3个参数为true</span><br>       father.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           alert(<span class="hljs-string">&#x27;father&#x27;</span>);<br>       &#125;, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 给document注册单击事件，第3个参数为true</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;document&#x27;</span>);<br>      &#125;, <span class="hljs-literal">true</span>)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-5-事件对象"><a href="#1-3-5-事件对象" class="headerlink" title="1.3.5. 事件对象"></a>1.3.5. 事件对象</h3><h4 id="什么是事件对象"><a href="#什么是事件对象" class="headerlink" title="什么是事件对象"></a>什么是事件对象</h4><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p><p>比如：  </p><ol><li><p>谁绑定了这个事件。</p></li><li><p>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</p></li><li><p>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</p></li></ol><h4 id="事件对象的使用"><a href="#事件对象的使用" class="headerlink" title="事件对象的使用"></a>事件对象的使用</h4><p>事件触发发生时就会产生事件对象，并且系统会以实参的形式传给事件处理函数。</p><p>所以，在事件处理函数中声明1个形参用来接收事件对象。</p><p><img src="/images/1551169537789.png" alt="1551169537789"></p><h4 id="事件对象的兼容性处理"><a href="#事件对象的兼容性处理" class="headerlink" title="事件对象的兼容性处理"></a>事件对象的兼容性处理</h4><p>事件对象本身的获取存在兼容问题：</p><ol><li><p>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</p></li><li><p>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p></li></ol><p><img src="/images/1551169680823.png" alt="1551169680823"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">只要“||”前面为<span class="hljs-literal">false</span>, 不管“||”后面是<span class="hljs-literal">true</span> 还是 <span class="hljs-literal">false</span>，都返回 “||” 后面的值。<br>只要“||”前面为<span class="hljs-literal">true</span>, 不管“||”后面是<span class="hljs-literal">true</span> 还是 <span class="hljs-literal">false</span>，都返回 “||” 前面的值。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// 事件对象</span><br>            e = e || <span class="hljs-built_in">window</span>.event;<br>            <span class="hljs-built_in">console</span>.log(e);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h4><p><img src="/images/1551169931778.png" alt="1551169931778"></p><h4 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h4><ul><li><p> this 是事件绑定的元素（绑定这个事件处理函数的元素） 。</p></li><li><p> e.target 是事件触发的元素。</p></li></ul><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">常情况下terget 和 <span class="hljs-keyword">this</span>是一致的，<br>但有一种情况不同，那就是在事件冒泡时（父子元素有相同事件，单击子元素，父元素的事件处理函数也会被触发执行），<br>这时候<span class="hljs-keyword">this</span>指向的是父元素，因为它是绑定事件的元素对象，<br>而target指向的是子元素，因为他是触发事件的那个具体元素对象。<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// e.target 和 this指向的都是div</span><br>        <span class="hljs-built_in">console</span>.log(e.target);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>事件冒泡下的e.target和this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;abc&lt;/li&gt;<br>    &lt;li&gt;abc&lt;/li&gt;<br>    &lt;li&gt;abc&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>          <span class="hljs-comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// ul</span><br><br>          <span class="hljs-comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span><br>          <span class="hljs-built_in">console</span>.log(e.target); <span class="hljs-comment">// li</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-6-阻止默认行为"><a href="#1-3-6-阻止默认行为" class="headerlink" title="1.3.6 阻止默认行为"></a>1.3.6 阻止默认行为</h3><blockquote><p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;百度&lt;/a&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 2. 阻止默认行为 让链接不跳转 </span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>         e.preventDefault(); <span class="hljs-comment">//  dom 标准写法</span><br>    &#125;);<br>    <span class="hljs-comment">// 3. 传统的注册方式</span><br>    a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// 普通浏览器 e.preventDefault();  方法</span><br>        e.preventDefault();<br>        <span class="hljs-comment">// 低版本浏览器 ie678  returnValue  属性</span><br>        e.returnValue = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-7-阻止事件冒泡"><a href="#1-3-7-阻止事件冒泡" class="headerlink" title="1.3.7 阻止事件冒泡"></a>1.3.7 阻止事件冒泡</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p><p><img src="/images/1551171467194.png" alt="1551171467194"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;son儿子&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>);<br><span class="hljs-comment">// 给son注册单击事件</span><br>      son.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;son&#x27;</span>);<br>          e.stopPropagation(); <span class="hljs-comment">// stop 停止  Propagation 传播</span><br>          <span class="hljs-built_in">window</span>.event.cancelBubble = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 非标准 cancel 取消 bubble 泡泡</span><br>      &#125;, <span class="hljs-literal">false</span>);<br><br>      <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.father&#x27;</span>);<br><span class="hljs-comment">// 给father注册单击事件</span><br>      father.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;father&#x27;</span>);<br>      &#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 给document注册单击事件</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;document&#x27;</span>);<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>阻止事件冒泡的兼容性处理</strong></p><p><img src="/images/1551171657513.png" alt="1551171657513"></p><h3 id="1-3-8-事件委托"><a href="#1-3-8-事件委托" class="headerlink" title="1.3.8 事件委托"></a>1.3.8 事件委托</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p><h4 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">把事情委托给别人，代为处理。<br></code></pre></td></tr></table></figure><p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p><blockquote><p>说白了就是，不给子元素注册事件，给父元素注册事件，把处理代码在父元素的事件中执行。</p></blockquote><p><strong>生活中的代理：</strong></p><p><img src="/images/1551172082624.png" alt="1551172082624"></p><p><strong>js事件中的代理：</strong></p><p><img src="/images/1551172159273.png" alt="1551172159273"></p><h4 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h4><p>​    给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p><h4 id="事件委托的作用"><a href="#事件委托的作用" class="headerlink" title="事件委托的作用"></a>事件委托的作用</h4><ul><li><p>我们只操作了一次 DOM ，提高了程序的性能。</p></li><li><p>动态新创建的子元素，也拥有事件。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span><br>        e.target.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-4-常用鼠标事件"><a href="#1-4-常用鼠标事件" class="headerlink" title="1.4. 常用鼠标事件"></a>1.4. 常用鼠标事件</h2><p><img src="/images/1551172699854.png" alt="1551172699854"></p><h3 id="1-4-1-案例：禁止选中文字和禁止右键菜单"><a href="#1-4-1-案例：禁止选中文字和禁止右键菜单" class="headerlink" title="1.4.1 案例：禁止选中文字和禁止右键菜单"></a>1.4.1 案例：禁止选中文字和禁止右键菜单</h3><p><img src="/images/1551172755484.png" alt="1551172755484"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    我是一段不愿意分享的文字<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                e.preventDefault();<br>        &#125;)<br>        <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            e.preventDefault();<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-2-鼠标事件对象"><a href="#1-4-2-鼠标事件对象" class="headerlink" title="1.4.2 鼠标事件对象"></a>1.4.2 鼠标事件对象</h3><p><img src="/images/1551173103741.png" alt="1551173103741"></p><h3 id="1-4-3-获取鼠标在页面的坐标"><a href="#1-4-3-获取鼠标在页面的坐标" class="headerlink" title="1.4.3 获取鼠标在页面的坐标"></a>1.4.3 获取鼠标在页面的坐标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 鼠标事件对象 MouseEvent</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// 1. client 鼠标在可视区的x和y坐标</span><br>        <span class="hljs-built_in">console</span>.log(e.clientX);<br>        <span class="hljs-built_in">console</span>.log(e.clientY);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>        <span class="hljs-comment">// 2. page 鼠标在页面文档的x和y坐标</span><br>        <span class="hljs-built_in">console</span>.log(e.pageX);<br>        <span class="hljs-built_in">console</span>.log(e.pageY);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>        <span class="hljs-comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span><br>        <span class="hljs-built_in">console</span>.log(e.screenX);<br>        <span class="hljs-built_in">console</span>.log(e.screenY);<br><br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-4-案例：跟随鼠标的天使"><a href="#1-4-4-案例：跟随鼠标的天使" class="headerlink" title="1.4.4 案例：跟随鼠标的天使"></a>1.4.4 案例：跟随鼠标的天使</h3><p><img src="/images/1551173172613.png" alt="1551173172613"></p><p><img src="/images/1551173186812.png" alt="1551173186812"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;images/angel.gif&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> pic = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span><br>    <span class="hljs-comment">// 2.核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， </span><br>        <span class="hljs-comment">// 把这个x和y坐标做为图片的top和left 值就可以移动图片</span><br>    <span class="hljs-keyword">var</span> x = e.pageX;<br>    <span class="hljs-keyword">var</span> y = e.pageY;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;x坐标是&#x27;</span> + x, <span class="hljs-string">&#x27;y坐标是&#x27;</span> + y);<br>    <span class="hljs-comment">//3 . 千万不要忘记给left 和top 添加px 单位</span><br>    pic.style.left = x - <span class="hljs-number">50</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    pic.style.top = y - <span class="hljs-number">40</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第四天</title>
    <link href="/2021/02/09/Web%20API/Web%20API%E7%AC%AC04%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API/Web%20API%E7%AC%AC04%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day04-Web-APIs"><a href="#day04-Web-APIs" class="headerlink" title="day04 - Web APIs"></a>day04 - Web APIs</h1><h2 id="1-1-常用的键盘事件"><a href="#1-1-常用的键盘事件" class="headerlink" title="1.1. 常用的键盘事件"></a>1.1. 常用的键盘事件</h2><h3 id="1-1-1-键盘事件"><a href="#1-1-1-键盘事件" class="headerlink" title="1.1.1 键盘事件"></a>1.1.1 键盘事件</h3><p><img src="/images/1551318122855.png" alt="1551318122855"></p><p><img src="/images/1551318160371.png" alt="1551318160371"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 常用的键盘事件</span><br>    <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我弹起了&#x27;</span>);<br>    &#125;)<br><br>    <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了press&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了down&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-2-键盘事件对象"><a href="#1-1-2-键盘事件对象" class="headerlink" title="1.1.2 键盘事件对象"></a>1.1.2 键盘事件对象</h3><p><img src="/images/1551318355505.png" alt="1551318355505"></p><p><img src="/images/1551318404238.png" alt="1551318404238"></p><p><strong>使用keyCode属性判断用户按下哪个键</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;up:&#x27;</span> + e.keyCode);<br>        <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span><br>        <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;<br>            alert(<span class="hljs-string">&#x27;您按下的a键&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            alert(<span class="hljs-string">&#x27;您没有按下a键&#x27;</span>)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(e);</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;press:&#x27;</span> + e.keyCode);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-3-案例：模拟京东按键输入内容"><a href="#1-1-3-案例：模拟京东按键输入内容" class="headerlink" title="1.1.3 案例：模拟京东按键输入内容"></a>1.1.3 案例：模拟京东按键输入内容</h3><p>当我们按下 s 键， 光标就定位到搜索框（文本框获得焦点）。</p><p><img src="/images/1551318669520.png" alt="1551318669520"></p><blockquote><p>注意：触发获得焦点事件，可以使用 元素对象.focus()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// 获取输入框</span><br>      <span class="hljs-keyword">var</span> search = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-comment">// 给document注册keyup事件</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>          <span class="hljs-comment">// 判断keyCode的值</span><br>          <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">83</span>) &#123;<br>              <span class="hljs-comment">// 触发输入框的获得焦点事件</span><br>              search.focus();<br>          &#125;<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：模拟京东快递单号查询"><a href="#1-1-4-案例：模拟京东快递单号查询" class="headerlink" title="1.1.4 案例：模拟京东快递单号查询"></a>1.1.4 案例：模拟京东快递单号查询</h3><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p><p><img src="/images/1551318882189.png" alt="1551318882189"></p><p><img src="/images/1551318909264.png" alt="1551318909264"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;con&quot;</span>&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br>      &lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入您的快递单号&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jd&quot;</span>&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// 获取要操作的元素</span><br>      <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.con&#x27;</span>);<br>      <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.jd&#x27;</span>);<br><span class="hljs-comment">// 给输入框注册keyup事件</span><br>      jd_input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">// 判断输入框内容是否为空</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                  <span class="hljs-comment">// 为空，隐藏放大提示盒子</span><br>                  con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  <span class="hljs-comment">// 不为空，显示放大提示盒子，设置盒子的内容</span><br>                  con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>                  con.innerText = <span class="hljs-built_in">this</span>.value;<br>              &#125;<br>          &#125;)<br>      <span class="hljs-comment">// 给输入框注册失去焦点事件，隐藏放大提示盒子</span><br>      jd_input.addEventListener(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>          &#125;)<br>      <span class="hljs-comment">// 给输入框注册获得焦点事件</span><br>      jd_input.addEventListener(<span class="hljs-string">&#x27;focus&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 判断输入框内容是否为空</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>              <span class="hljs-comment">// 不为空则显示提示盒子</span><br>              con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>          &#125;<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-BOM"><a href="#1-2-BOM" class="headerlink" title="1.2. BOM"></a>1.2. BOM</h2><h3 id="1-2-1-什么是BOM"><a href="#1-2-1-什么是BOM" class="headerlink" title="1.2.1. 什么是BOM"></a>1.2.1. 什么是BOM</h3><p>​    BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。</p><p>​    BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><p>​    BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p><p><img src="/images/1551319264407.png" alt="1551319264407"></p><h3 id="1-2-2-BOM的构成"><a href="#1-2-2-BOM的构成" class="headerlink" title="1.2.2. BOM的构成"></a>1.2.2. BOM的构成</h3><p>BOM 比 DOM 更大，它包含 DOM。</p><p><img src="/images/1551319344183.png" alt="1551319344183"></p><h3 id="1-2-3-顶级对象window"><a href="#1-2-3-顶级对象window" class="headerlink" title="1.2.3. 顶级对象window"></a>1.2.3. 顶级对象window</h3><p><img src="/images/1551319372909.png" alt="1551319372909"></p><h3 id="1-2-4-window对象的常见事件"><a href="#1-2-4-window对象的常见事件" class="headerlink" title="1.2.4. window对象的常见事件"></a>1.2.4. window对象的常见事件</h3><h4 id="页面（窗口）加载事件（2种）"><a href="#页面（窗口）加载事件（2种）" class="headerlink" title="页面（窗口）加载事件（2种）"></a>页面（窗口）加载事件（2种）</h4><p><strong>第1种</strong></p><p><img src="/images/1551319525109.png" alt="1551319525109"></p><p>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p><p><img src="/images/1551319600263.png" alt="1551319600263"></p><p><strong>第2种</strong></p><p><img src="/images/1551319620299.png" alt="1551319620299"></p><p>​    DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p><p>​    IE9以上才支持！！！</p><p>​    如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">&#x27;点击我&#x27;</span>);<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">22</span>);<br>    &#125;)<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">33</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><p><img src="/images/1551319803117.png" alt="1551319803117"></p><p>​    window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p><p>注意：</p><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件。</p></li><li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 注册页面加载事件</span><br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 注册调整窗口大小事件</span><br>        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// window.innerWidth 获取窗口大小</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;变化了&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.innerWidth &lt;= <span class="hljs-number">800</span>) &#123;<br>                div.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                div.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br>&lt;div&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-5-定时器（两种）"><a href="#1-2-5-定时器（两种）" class="headerlink" title="1.2.5. 定时器（两种）"></a>1.2.5. 定时器（两种）</h3><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p><ul><li><p>setTimeout() </p></li><li><p>setInterval()  </p></li></ul><h4 id="setTimeout-炸弹定时器"><a href="#setTimeout-炸弹定时器" class="headerlink" title="setTimeout() 炸弹定时器"></a>setTimeout() 炸弹定时器</h4><h5 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/images/1551320279307.png" alt="1551320279307"></p><p><img src="/images/1551320408854.png" alt="1551320408854"></p><p><img src="/images/1551320298981.png" alt="1551320298981"></p><blockquote><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs zephir">普通函数是按照代码顺序直接调用。<br><br>简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。<br>例如：定时器中的调用函数，事件处理函数，也是回调函数。<br><br>以前我们讲的   element.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;   或者  element.addEventListener(“click”, <span class="hljs-function"><span class="hljs-keyword">fn</span>)</span>;   里面的 函数也是回调函数。<br><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;script&gt;<br>      <span class="hljs-comment">// 回调函数是一个匿名函数</span><br>       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;时间到了&#x27;</span>);<br><br>       &#125;, <span class="hljs-number">2000</span>);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);<br>      &#125;<br><span class="hljs-comment">// 回调函数是一个有名函数</span><br>      <span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">3000</span>);<br>      <span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">5000</span>);<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="案例：5秒后关闭广告"><a href="#案例：5秒后关闭广告" class="headerlink" title="案例：5秒后关闭广告"></a>案例：5秒后关闭广告</h5><p><img src="/images/1551320924828.png" alt="1551320924828"></p><p><img src="/images/1551320959756.png" alt="1551320959756"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;img src=<span class="hljs-string">&quot;images/ad.jpg&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ad&quot;</span>&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 获取要操作的元素</span><br>        <span class="hljs-keyword">var</span> ad = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.ad&#x27;</span>);<br><span class="hljs-comment">// 开启定时器</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            ad.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        &#125;, <span class="hljs-number">5000</span>);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/images/1551321051001.png" alt="1551321051001"></p><p><img src="/images/1551321064154.png" alt="1551321064154"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;button&gt;点击停止定时器&lt;/button&gt;<br>  &lt;script&gt;<br>      <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-comment">// 开启定时器</span><br>      <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);<br>      &#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-comment">// 给按钮注册单击事件</span><br>      btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 停止定时器</span><br>          <span class="hljs-built_in">clearTimeout</span>(timer);<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="setInterval-闹钟定时器"><a href="#setInterval-闹钟定时器" class="headerlink" title="setInterval() 闹钟定时器"></a>setInterval() 闹钟定时器</h4><h5 id="开启定时器-1"><a href="#开启定时器-1" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/images/1551321162158.png" alt="1551321162158"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1. setInterval </span><br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;继续输出&#x27;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h5><p><img src="/images/1551321298787.png" alt="1551321298787"></p><p><img src="/images/1551321322188.png" alt="1551321322188"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<br>    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hour&quot;</span>&gt;<span class="hljs-number">1</span>&lt;/span&gt;<br>    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;minute&quot;</span>&gt;<span class="hljs-number">2</span>&lt;/span&gt;<br>    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;second&quot;</span>&gt;<span class="hljs-number">3</span>&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取元素（时分秒盒子） </span><br>    <span class="hljs-keyword">var</span> hour = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.hour&#x27;</span>); <span class="hljs-comment">// 小时的黑色盒子</span><br>    <span class="hljs-keyword">var</span> minute = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.minute&#x27;</span>); <span class="hljs-comment">// 分钟的黑色盒子</span><br>    <span class="hljs-keyword">var</span> second = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.second&#x27;</span>); <span class="hljs-comment">// 秒数的黑色盒子</span><br>    <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2019-5-1 18:00:00&#x27;</span>); <span class="hljs-comment">// 返回的是用户输入时间总的毫秒数</span><br><br>    countDown(); <span class="hljs-comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span><br><br>    <span class="hljs-comment">// 2. 开启定时器</span><br>    <span class="hljs-built_in">setInterval</span>(countDown, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 返回的是当前时间总的毫秒数</span><br>        <span class="hljs-keyword">var</span> times = (inputTime - nowTime) / <span class="hljs-number">1000</span>; <span class="hljs-comment">// times是剩余时间总的秒数 </span><br>        <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>); <span class="hljs-comment">//时</span><br>        h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + h : h;<br>        hour.innerHTML = h; <span class="hljs-comment">// 把剩余的小时给 小时黑色盒子</span><br>        <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>); <span class="hljs-comment">// 分</span><br>        m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m;<br>        minute.innerHTML = m;<br>        <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>); <span class="hljs-comment">// 当前的秒</span><br>        s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + s : s;<br>        second.innerHTML = s;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="停止定时器-1"><a href="#停止定时器-1" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/images/1551321444559.png" alt="1551321444559"></p><h4 id="案例：发送短信倒计时"><a href="#案例：发送短信倒计时" class="headerlink" title="案例：发送短信倒计时"></a>案例：发送短信倒计时</h4><p>​    点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信。</p><p><img src="/images/1551321540676.png" alt="1551321540676"></p><p><img src="/images/1551321564247.png" alt="1551321564247"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">  手机号码： &lt;input type=<span class="hljs-string">&quot;number&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;script&gt;<br>      <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-comment">// 全局变量，定义剩下的秒数</span><br>      <span class="hljs-keyword">var</span> time = <span class="hljs-number">3</span>; <br><span class="hljs-comment">// 注册单击事件</span><br>      btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 禁用按钮</span><br>          btn.disabled = <span class="hljs-literal">true</span>;<br>          <span class="hljs-comment">// 开启定时器</span><br>          <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// 判断剩余秒数</span><br>              <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>) &#123;<br>                  <span class="hljs-comment">// 清除定时器和复原按钮</span><br>                  <span class="hljs-built_in">clearInterval</span>(timer);<br>                  btn.disabled = <span class="hljs-literal">false</span>;<br>                  btn.innerHTML = <span class="hljs-string">&#x27;发送&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  btn.innerHTML = <span class="hljs-string">&#x27;还剩下&#x27;</span> + time + <span class="hljs-string">&#x27;秒&#x27;</span>;<br>                  time--;<br>              &#125;<br>          &#125;, <span class="hljs-number">1000</span>);<br>      &#125;);<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-6-this指向问题"><a href="#1-2-6-this指向问题" class="headerlink" title="1.2.6. this指向问题"></a>1.2.6. this指向问题</h3><p>​    this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象。</p><p>现阶段，我们先了解一下几个this指向</p><ol><li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p></li><li><p>方法调用中谁调用this指向谁</p></li><li><p>构造函数中this指向构造函数的实例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;点击&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span><br>    <span class="hljs-comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-built_in">window</span>.fn();<br>    <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 2. 方法调用中谁调用this指向谁</span><br>    <span class="hljs-keyword">var</span> o = &#123;<br>        sayHi: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this指向的是 o 这个对象</span><br>        &#125;<br>    &#125;<br>    o.sayHi();<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 事件处理函数中的this指向的是btn这个按钮对象</span><br>        &#125;)<br>    <span class="hljs-comment">// 3. 构造函数中this指向构造函数的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this 指向的是fun 实例对象</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> Fun();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-7-location对象"><a href="#1-2-7-location对象" class="headerlink" title="1.2.7. location对象"></a>1.2.7. location对象</h3><h4 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h4><p><img src="/images/1551322091638.png" alt="1551322091638"></p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><img src="/images/1551322373704.png" alt="1551322373704"></p><p><img src="/images/1551322387201.png" alt="1551322387201"></p><h4 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h4><p><img src="/images/1551322416716.png" alt="1551322416716"></p><p><img src="/images/1551322438200.png" alt="1551322438200"></p><h4 id="案例：5分钟自动跳转页面"><a href="#案例：5分钟自动跳转页面" class="headerlink" title="案例：5分钟自动跳转页面"></a>案例：5分钟自动跳转页面</h4><p><img src="/images/1551322496871.png" alt="1551322496871"></p><p><img src="/images/1551322517605.png" alt="1551322517605"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;点击&lt;/button&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(location.href);</span><br>        location.href = <span class="hljs-string">&#x27;http://www.itcast.cn&#x27;</span>;<br>    &#125;)<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer == <span class="hljs-number">0</span>) &#123;<br>            location.href = <span class="hljs-string">&#x27;http://www.itcast.cn&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            div.innerHTML = <span class="hljs-string">&#x27;您将在&#x27;</span> + timer + <span class="hljs-string">&#x27;秒钟之后跳转到首页&#x27;</span>;<br>            timer--;<br>        &#125;<br>    &#125;, <span class="hljs-number">1000</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="案例：获取URL参数"><a href="#案例：获取URL参数" class="headerlink" title="案例：获取URL参数"></a>案例：获取URL参数</h4><p><img src="/images/1551322622640.png" alt="1551322622640"></p><p><img src="/images/1551322639241.png" alt="1551322639241"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">   &lt;div&gt;&lt;/div&gt;<br>&lt;script&gt;<br>       <span class="hljs-built_in">console</span>.log(location.search); <span class="hljs-comment">// ?uname=andy</span><br>       <span class="hljs-comment">// 1.先去掉？  substr(&#x27;起始的位置&#x27;，截取几个字符);</span><br>       <span class="hljs-keyword">var</span> params = location.search.substr(<span class="hljs-number">1</span>); <span class="hljs-comment">// uname=andy</span><br>       <span class="hljs-built_in">console</span>.log(params);<br>       <span class="hljs-comment">// 2. 利用=把字符串分割为数组 split(&#x27;=&#x27;);</span><br>       <span class="hljs-keyword">var</span> arr = params.split(<span class="hljs-string">&#x27;=&#x27;</span>);<br>       <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;uname&quot;, &quot;ANDY&quot;]</span><br>       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>       <span class="hljs-comment">// 3.把数据写入div中</span><br>       div.innerHTML = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;欢迎您&#x27;</span>;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="location对象的常见方法"><a href="#location对象的常见方法" class="headerlink" title="location对象的常见方法"></a>location对象的常见方法</h4><p><img src="/images/1551322750241.png" alt="1551322750241"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;点击&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 记录浏览历史，所以可以实现后退功能</span><br>        <span class="hljs-comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span><br>        <span class="hljs-comment">// 不记录浏览历史，所以不可以实现后退功能</span><br>        <span class="hljs-comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span><br>        location.reload(<span class="hljs-literal">true</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-8-navigator对象"><a href="#1-2-8-navigator对象" class="headerlink" title="1.2.8. navigator对象"></a>1.2.8. navigator对象</h3><p>​    navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p><p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>((navigator.userAgent.match(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;&quot;</span>;     <span class="hljs-comment">//手机</span><br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;&quot;</span>;     <span class="hljs-comment">//电脑</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-9-history对象"><a href="#1-2-9-history对象" class="headerlink" title="1.2.9 history对象"></a>1.2.9 history对象</h3><p>​    window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><p><img src="/images/1551322885216.png" alt="1551322885216"></p><p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p><p><img src="/images/1551322959148.png" alt="1551322959148"></p><h2 id="1-3-JS执行机制"><a href="#1-3-JS执行机制" class="headerlink" title="1.3. JS执行机制"></a>1.3. JS执行机制</h2><p>以下代码执行的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>以下代码执行的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="1-3-1-JS-是单线程"><a href="#1-3-1-JS-是单线程" class="headerlink" title="1.3.1 JS 是单线程"></a>1.3.1 JS 是单线程</h3><p><img src="/images/1551415019322.png" alt="1551415019322"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。<br></code></pre></td></tr></table></figure><h3 id="1-3-2-同步任务和异步任务"><a href="#1-3-2-同步任务和异步任务" class="headerlink" title="1.3.2 同步任务和异步任务"></a>1.3.2 同步任务和异步任务</h3><p>​    单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p><p>​    为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​    你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p><img src="/images/1551434295074.png" alt="1551434295074"></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">JS中所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。<br><br>同步任务指的是：<br>在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br>异步任务指的是：<br>不进入主线程、而进入”任务队列”的任务，当主线程中的任务运行完了，才会从”任务队列”取出异步任务放入主线程执行。<br></code></pre></td></tr></table></figure><p><img src="/images/1551434972778.png" alt="1551434972778"></p></blockquote><h3 id="1-3-3-JS执行机制（事件循环）"><a href="#1-3-3-JS执行机制（事件循环）" class="headerlink" title="1.3.3 JS执行机制（事件循环）"></a>1.3.3 JS执行机制（事件循环）</h3><p><img src="/images/1551435335464.png" alt="1551435335464"></p><p><img src="/images/1551435398306.png" alt="1551435398306"></p><p><img src="/images/1551435449634.png" alt="1551435449634"></p><h3 id="1-3-4-代码思考题"><a href="#1-3-4-代码思考题" class="headerlink" title="1.3.4 代码思考题"></a>1.3.4 代码思考题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);<br>&#125;<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-number">3000</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery第三天</title>
    <link href="/2021/02/09/jQuery/jQuery%E7%AC%AC03%E5%A4%A9/"/>
    <url>/2021/02/09/jQuery/jQuery%E7%AC%AC03%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day03-jQuery"><a href="#day03-jQuery" class="headerlink" title="day03 - jQuery"></a>day03 - jQuery</h1><h2 id="1-1-jQuery-事件注册"><a href="#1-1-jQuery-事件注册" class="headerlink" title="1.1. jQuery 事件注册"></a>1.1. jQuery 事件注册</h2><p>​    jQuery 为我们提供了方便的事件注册机制，是开发人员抑郁操作优缺点如下：</p><ul><li>优点: 操作简单，且不用担心事件覆盖等问题。</li><li>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</li></ul><p><strong>语法</strong></p><p><img src="/images/register.png" alt="register"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. 单个事件注册</span><br>            $(<span class="hljs-string">&quot;div&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;purple&quot;</span>);<br>            &#125;);<br>            $(<span class="hljs-string">&quot;div&quot;</span>).mouseenter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;skyblue&quot;</span>);<br>            &#125;);<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-jQuery-事件处理"><a href="#1-2-jQuery-事件处理" class="headerlink" title="1.2. jQuery 事件处理"></a>1.2. jQuery 事件处理</h2><p>​    因为普通注册事件方法的不足，jQuery又开发了多个处理方法，重点讲解如下：</p><ul><li>on(): 用于事件绑定，目前最好用的事件绑定方法</li><li>off(): 事件解绑</li><li>trigger() / triggerHandler(): 事件触发</li></ul><h3 id="1-2-1-事件处理-on-绑定事件"><a href="#1-2-1-事件处理-on-绑定事件" class="headerlink" title="1.2.1 事件处理 on() 绑定事件"></a>1.2.1 事件处理 on() 绑定事件</h3><p>​    因为普通注册事件方法的不足，jQuery又创建了多个新的事件绑定方法bind() / live() / delegate() / on()等，其中最好用的是: on()</p><p><strong>语法</strong></p><p><img src="/images/on1.png" alt="on1"></p><p><img src="/images/on2.png" alt="on2"></p><p><img src="/images/on3.png" alt="on3"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;ul&gt;<br>        &lt;li&gt;我们都是好孩子&lt;/li&gt;<br>        &lt;li&gt;我们都是好孩子&lt;/li&gt;<br>        &lt;li&gt;我们都是好孩子&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;ol&gt;&lt;/ol&gt;<br><br>    &lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// (1) on可以绑定1个或者多个事件处理程序</span><br>            <span class="hljs-comment">// $(&quot;div&quot;).on(&#123;</span><br>            <span class="hljs-comment">//     mouseenter: function() &#123;</span><br>            <span class="hljs-comment">//         $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span><br>            <span class="hljs-comment">//     &#125;,</span><br>            <span class="hljs-comment">//     click: function() &#123;</span><br>            <span class="hljs-comment">//         $(this).css(&quot;background&quot;, &quot;purple&quot;);</span><br>            <span class="hljs-comment">//     &#125;</span><br>            <span class="hljs-comment">// &#125;);</span><br>            $(<span class="hljs-string">&quot;div&quot;</span>).on(<span class="hljs-string">&quot;mouseenter mouseleave&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                $(<span class="hljs-built_in">this</span>).toggleClass(<span class="hljs-string">&quot;current&quot;</span>);<br>            &#125;);<br>  <br>            <span class="hljs-comment">// (2) on可以实现事件委托（委派）</span><br>            <span class="hljs-comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span><br>            <span class="hljs-comment">// $(&quot;ul li&quot;).click();</span><br>            $(<span class="hljs-string">&quot;ul&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                alert(<span class="hljs-number">11</span>);<br>            &#125;);<br><br>            <span class="hljs-comment">// (3) on可以给未来动态创建的元素绑定事件</span><br>            $(<span class="hljs-string">&quot;ol&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                alert(<span class="hljs-number">11</span>);<br>            &#125;)<br>            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);<br>            $(<span class="hljs-string">&quot;ol&quot;</span>).append(li);<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><h3 id="1-2-2-案例：发布微博案例"><a href="#1-2-2-案例：发布微博案例" class="headerlink" title="1.2.2. 案例：发布微博案例"></a>1.2.2. 案例：发布微博案例</h3><blockquote><p>1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中。<br>2.点击的删除按钮，可以删除当前的微博留言。</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h3 id="1-2-3-事件处理-off-解绑事件"><a href="#1-2-3-事件处理-off-解绑事件" class="headerlink" title="1.2.3. 事件处理 off() 解绑事件"></a>1.2.3. 事件处理 off() 解绑事件</h3><p>​    当某个事件上面的逻辑，在特定需求下不需要的时候，可以把该事件上的逻辑移除，这个过程我们称为事件解绑。jQuery 为我们提供 了多种事件解绑方法：die() / undelegate() / off() 等，甚至还有只触发一次的事件绑定方法 one()，在这里我们重点讲解一下 off() ;</p><p><strong>语法</strong></p><p><img src="/images/off.png" alt="off"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;ul&gt;<br>        &lt;li&gt;我们都是好孩子&lt;/li&gt;<br>        &lt;li&gt;我们都是好孩子&lt;/li&gt;<br>        &lt;li&gt;我们都是好孩子&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;p&gt;我是一个P标签&lt;/p&gt;<br>&lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 事件绑定</span><br>            $(<span class="hljs-string">&quot;div&quot;</span>).on(&#123;<br>                click: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我点击了&quot;</span>);<br>                &#125;,<br>                mouseover: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我鼠标经过了&#x27;</span>);<br>                &#125;<br>            &#125;);<br>            $(<span class="hljs-string">&quot;ul&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                alert(<span class="hljs-number">11</span>);<br>            &#125;);<br>  <br>            <span class="hljs-comment">// 1. 事件解绑 off </span><br>            <span class="hljs-comment">// $(&quot;div&quot;).off();  // 这个是解除了div身上的所有事件</span><br>            $(<span class="hljs-string">&quot;div&quot;</span>).off(<span class="hljs-string">&quot;click&quot;</span>); <span class="hljs-comment">// 这个是解除了div身上的点击事件</span><br>            $(<span class="hljs-string">&quot;ul&quot;</span>).off(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;li&quot;</span>);<br>  <br>            <span class="hljs-comment">// 2. one() 但是它只能触发事件一次</span><br>            $(<span class="hljs-string">&quot;p&quot;</span>).one(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                alert(<span class="hljs-number">11</span>);<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-4-事件处理-trigger-自动触发事件"><a href="#1-2-4-事件处理-trigger-自动触发事件" class="headerlink" title="1.2.4. 事件处理 trigger() 自动触发事件"></a>1.2.4. 事件处理 trigger() 自动触发事件</h3><p>​    有些时候，在某些特定的条件下，我们希望某些事件能够自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。由此 jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler() ; </p><p><strong>语法</strong></p><p><img src="/images/t1.png" alt="t1"></p><p><img src="/images/t2.png" alt="t2"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;<br>      <br>    &lt;script&gt;<br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// 绑定事件</span><br>      $(<span class="hljs-string">&quot;div&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">11</span>);<br>      &#125;);<br><br>      <span class="hljs-comment">// 自动触发事件</span><br>      <span class="hljs-comment">// 1. 元素.事件()</span><br>      <span class="hljs-comment">// $(&quot;div&quot;).click();会触发元素的默认行为</span><br>      <br>      <span class="hljs-comment">// 2. 元素.trigger(&quot;事件&quot;)</span><br>      <span class="hljs-comment">// $(&quot;div&quot;).trigger(&quot;click&quot;);会触发元素的默认行为</span><br>      $(<span class="hljs-string">&quot;input&quot;</span>).trigger(<span class="hljs-string">&quot;focus&quot;</span>);<br>      <br>      <span class="hljs-comment">// 3. 元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素的默认行为</span><br>      $(<span class="hljs-string">&quot;input&quot;</span>).on(<span class="hljs-string">&quot;focus&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-built_in">this</span>).val(<span class="hljs-string">&quot;你好吗&quot;</span>);<br>      &#125;);<br>      <span class="hljs-comment">// 一个会获取焦点，一个不会</span><br>      $(<span class="hljs-string">&quot;div&quot;</span>).triggerHandler(<span class="hljs-string">&quot;click&quot;</span>);<br>      <span class="hljs-comment">// $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);</span><br>    &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="1-3-jQuery-事件对象"><a href="#1-3-jQuery-事件对象" class="headerlink" title="1.3. jQuery 事件对象"></a>1.3. jQuery 事件对象</h2><p>​    jQuery 对DOM中的事件对象 event 进行了封装，兼容性更好，获取更方便，使用变化不大。事件被触发，就会有事件对象的产生。</p><p><strong>语法</strong></p><p><img src="/images/event.png" alt="event"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br><br>&lt;script&gt;<br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击了document&quot;</span>);<br>            &#125;)<br>            $(<span class="hljs-string">&quot;div&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>                <span class="hljs-comment">// console.log(event);</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击了div&quot;</span>);<br>                event.stopPropagation();<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>注意：jQuery中的 event 对象使用，可以借鉴 API 和 DOM 中的 event 。</p><h2 id="1-4-jQuery-拷贝对象"><a href="#1-4-jQuery-拷贝对象" class="headerlink" title="1.4.  jQuery 拷贝对象"></a>1.4.  jQuery 拷贝对象</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p><p><strong>语法</strong></p><p><img src="/images/extend.png" alt="extend"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 1.合并数据</span><br>           <span class="hljs-keyword">var</span> targetObj = &#123;&#125;;<br>           <span class="hljs-keyword">var</span> obj = &#123;<br>               id: <span class="hljs-number">1</span>,<br>               name: <span class="hljs-string">&quot;andy&quot;</span><br>           &#125;;<br>           <span class="hljs-comment">// $.extend(target, obj);</span><br>           $.extend(targetObj, obj);<br>           <span class="hljs-built_in">console</span>.log(targetObj);<br>  <br>  <span class="hljs-comment">// 2. 会覆盖 targetObj 里面原来的数据</span><br>           <span class="hljs-keyword">var</span> targetObj = &#123;<br>               id: <span class="hljs-number">0</span><br>           &#125;;<br>           <span class="hljs-keyword">var</span> obj = &#123;<br>               id: <span class="hljs-number">1</span>,<br>               name: <span class="hljs-string">&quot;andy&quot;</span><br>           &#125;;<br>           <span class="hljs-comment">// $.extend(target, obj);</span><br>           $.extend(targetObj, obj);<br>           <span class="hljs-built_in">console</span>.log(targetObj); <br>       &#125;)<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-5-jQuery-多库共存"><a href="#1-5-jQuery-多库共存" class="headerlink" title="1.5.  jQuery 多库共存"></a>1.5.  jQuery 多库共存</h2><p>​    实际开发中，很多项目连续开发十多年，jQuery版本不断更新，最初的 jQuery 版本无法满足需求，这时就需要保证在旧有版本正常运行的情况下，新的功能使用新的jQuery版本实现，这种情况被称为，jQuery 多库共存。</p><p><strong>语法</strong></p><p><img src="/images/noconfig.png" alt="noconfig"></p><p><strong>演示代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 让jquery 释放对$ 控制权 让用自己决定</span><br>  <span class="hljs-keyword">var</span> suibian = jQuery.noConflict();<br>  <span class="hljs-built_in">console</span>.log(suibian(<span class="hljs-string">&quot;span&quot;</span>));<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-6-jQuery-插件"><a href="#1-6-jQuery-插件" class="headerlink" title="1.6.  jQuery 插件"></a>1.6.  jQuery 插件</h2><p>​    jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 这些插件也是依赖于jQuery来完成的，所以必须要先引入</p><p>jQuery文件，因此也称为 jQuery 插件。</p><p>​    jQuery 插件常用的网站：</p><ol><li><p> jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </p></li><li><p>jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </p><p>jQuery 插件使用步骤：</p></li><li><p> 引入相关文件。（jQuery 文件 和 插件文件）    </p></li><li><p> 复制相关html、css、js (调用插件)。</p></li></ol><h3 id="1-4-1-瀑布流插件（重点讲解）"><a href="#1-4-1-瀑布流插件（重点讲解）" class="headerlink" title="1.4.1.  瀑布流插件（重点讲解）"></a>1.4.1.  瀑布流插件（重点讲解）</h3><p>​    我们学习的第一个插件是jQuery之家的开源插件，瀑布流。我们将重点详细讲解，从找到插件所在网页，然后点击下载代码，到插件的使用等，后面的插件使用可参考瀑布流插件的使用。</p><p><strong>下载位置</strong></p><p><img src="/images/water.png" alt="water"></p><p><img src="/images/download.png"></p><p><strong>代码演示</strong></p><p>​    插件的使用三点：   1. 引入css.           2.引入JS            3.引入html。 （有的简单插件只需引入html和js，甚至有的只需引入js）</p><ul><li>1.引入css.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/normalize.css&quot;</span>&gt;<br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&quot;css/default.css&quot;</span>&gt;<br>  <br>&lt;!-- 下面的样式代码为页面布局，可以引入，也可以自己写，自己设计页面样式，一般为直接引入，方便 --&gt;<br>&lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>  #gallery-wrapper &#123;<br>    position: relative;<br>    max-width: <span class="hljs-number">75</span>%;<br>    width: <span class="hljs-number">75</span>%;<br>    margin: 50px auto;<br>  &#125;<br><br>  img.thumb &#123;<br>    width: <span class="hljs-number">100</span>%;<br>    max-width: <span class="hljs-number">100</span>%;<br>    height: auto;<br>  &#125;<br><br>  .white-panel &#123;<br>    position: absolute;<br>    background: white;<br>    border-radius: 5px;<br>    box-shadow: 0px 1px 2px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br>    padding: 10px;<br>  &#125;<br><br>  .white-panel h1 &#123;<br>    font-size: 1em;<br>  &#125;<br><br>  .white-panel h1 a &#123;<br>    color: #A92733;<br>  &#125;<br><br>  .white-panel:hover &#123;<br>    box-shadow: 1px 1px 10px rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>    margin-top: -5px;<br>    -webkit-transition: all <span class="hljs-number">0.</span>3s ease-<span class="hljs-keyword">in</span>-out;<br>    -moz-transition: all <span class="hljs-number">0.</span>3s ease-<span class="hljs-keyword">in</span>-out;<br>    -o-transition: all <span class="hljs-number">0.</span>3s ease-<span class="hljs-keyword">in</span>-out;<br>    transition: all <span class="hljs-number">0.</span>3s ease-<span class="hljs-keyword">in</span>-out;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li>2.引入js.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 前两个必须引入 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;js/jquery-1.11.0.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;js/pinterest_grid.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;!-- 下面的为启动瀑布流代码，参数可调节属性，具体功能可参考readme.html --&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      $(<span class="hljs-string">&quot;#gallery-wrapper&quot;</span>).pinterest_grid(&#123;<br>          no_columns: <span class="hljs-number">5</span>,<br>          padding_x: <span class="hljs-number">15</span>,<br>          padding_y: <span class="hljs-number">10</span>,<br>          margin_bottom: <span class="hljs-number">50</span>,<br>          single_column_breakpoint: <span class="hljs-number">700</span><br>      &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>3.引入html.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- html结构一般为事先写好，很难修改结构，但可以修改内容及图片的多少（article标签） --&gt;<br>&lt;section id=<span class="hljs-string">&quot;gallery-wrapper&quot;</span>&gt;<br>       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;white-panel&quot;</span>&gt;<br>           &lt;img src=<span class="hljs-string">&quot;images/P_000.jpg&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thumb&quot;</span>&gt;<br>           &lt;h1&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/h1&gt;<br>           &lt;p&gt;里面很精彩哦&lt;/p&gt;<br>       &lt;/article&gt;<br>       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;white-panel&quot;</span>&gt;<br>           &lt;img src=<span class="hljs-string">&quot;images/P_005.jpg&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thumb&quot;</span>&gt;<br>           &lt;h1&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/h1&gt;<br>           &lt;p&gt;里面很精彩哦&lt;/p&gt;<br>       &lt;/article&gt;<br>       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;white-panel&quot;</span>&gt;<br>           &lt;img src=<span class="hljs-string">&quot;images/P_006.jpg&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thumb&quot;</span>&gt;<br>           &lt;h1&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/h1&gt;<br>           &lt;p&gt;里面很精彩哦&lt;/p&gt;<br>       &lt;/article&gt;<br>       &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;white-panel&quot;</span>&gt;<br>           &lt;img src=<span class="hljs-string">&quot;images/P_007.jpg&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thumb&quot;</span>&gt;<br>           &lt;h1&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/h1&gt;<br>           &lt;p&gt;里面很精彩哦&lt;/p&gt;<br>       &lt;/article&gt;<br>   &lt;/section&gt;<br></code></pre></td></tr></table></figure><p>总结：jQuery插件就是引入别人写好的：html 、css、js  （有时也可以只引入一部分，读懂后也可以修改部分内容）</p><h3 id="1-4-2-图片懒加载插件"><a href="#1-4-2-图片懒加载插件" class="headerlink" title="1.4.2. 图片懒加载插件"></a>1.4.2. 图片懒加载插件</h3><p>​    图片的懒加载就是：当页面滑动到有图片的位置，图片才进行加载，用以提升页面打开的速度及用户体验。（下载略）</p><p><strong>代码演示</strong></p><p>​    懒加载只需引入html 和 js操作 即可，此插件不涉及css。</p><ul><li>1.引入js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;js/EasyLazyload.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>   lazyLoadInit(&#123;<br>   showTime: <span class="hljs-number">1100</span>,<br>   onLoadBackEnd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;onLoadBackEnd:&quot;</span> + i);<br>   &#125;,<br>   onLoadBackStart: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, e</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;onLoadBackStart:&quot;</span> + i);<br>   &#125;<br> &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>2.引入html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img data-lazy-src=<span class="hljs-string">&quot;upload/floor-1-3.png&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-3-全屏滚动插件"><a href="#1-4-3-全屏滚动插件" class="headerlink" title="1.4.3. 全屏滚动插件"></a>1.4.3. 全屏滚动插件</h3><p>​    全屏滚动插件比较大，所以，一般大型插件都会有帮助文档，或者网站。全屏滚动插件介绍比较详细的网站为：</p><p><a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p><p><strong>代码演示</strong></p><p>​    全屏滚动因为有多重形式，所以不一样的风格html和css也不一样，但是 js 变化不大。所以下面只演示js的引入，html和css引入根据自己实际</p><p>项目需要使用哪种风格引入对应的HTML和CSS。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;js/fullpage.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>  $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&#x27;#dowebok&#x27;</span>).fullpage(&#123;<br>    sectionsColor: [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;#4BBFC3&#x27;</span>, <span class="hljs-string">&#x27;#7BAABE&#x27;</span>, <span class="hljs-string">&#x27;#f90&#x27;</span>],<br>    navigation: <span class="hljs-literal">true</span><br>  &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注意：实际开发，一般复制文件，然后在文件中进行修改和添加功能。</p><h3 id="1-4-4-bootstrap组件"><a href="#1-4-4-bootstrap组件" class="headerlink" title="1.4.4. bootstrap组件"></a>1.4.4. bootstrap组件</h3><p>​    Bootstrap是 Twitter 公司设计的基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，他依靠jQuery实现，且支持响应式</p><p>布局，使得 Web 开发更加方便快捷。</p><p>​    <strong>凡是在软件开发中用到了软件的复用，被复用的部分都可以称为组件，凡是在应用程序中已经预留接口的组件就是插件</strong>。Bootstrap组件使</p><p>用非常方便:  1.引入bootstrap相关css和js        2.去官网复制html</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;<br>&lt;script src=<span class="hljs-string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>       &lt;!-- Single button --&gt;<br>       &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;<br>           &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> data-toggle=<span class="hljs-string">&quot;dropdown&quot;</span> aria-haspopup=<span class="hljs-string">&quot;true&quot;</span> aria-expanded=<span class="hljs-string">&quot;false&quot;</span>&gt;<br>     Action &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;&lt;/span&gt;<br>   &lt;/button&gt;<br>           &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;<br>               &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>               &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>               &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>               &lt;li role=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;&lt;/li&gt;<br>               &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>           &lt;/ul&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-5-bootstrap插件（JS）"><a href="#1-4-5-bootstrap插件（JS）" class="headerlink" title="1.4.5. bootstrap插件（JS）"></a>1.4.5. bootstrap插件（JS）</h3><p>​    bootstrap中的js插件其实也是组件的一部分，只不过是需要js调用功能的组件，所以一般bootstrap的js插件一般会伴随着js代码（有的也可以</p><p>省略js，用属性实现）。</p><p>​    步骤： 1.引入bootstrap相关css和js        2.去官网复制html        3.复制js代码，启动js插件。</p><p><strong>代码演示</strong></p><ol><li>引入bootstrap相关css和js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;<br>&lt;script src=<span class="hljs-string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>去官网复制html的功能模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 模态框 --&gt;<br>&lt;!-- Large modal --&gt;<br>&lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> data-toggle=<span class="hljs-string">&quot;modal&quot;</span> data-target=<span class="hljs-string">&quot;.bs-example-modal-lg&quot;</span>&gt;Large modal&lt;/button&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal fade bs-example-modal-lg&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span> aria-labelledby=<span class="hljs-string">&quot;myLargeModalLabel&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-dialog modal-lg&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            里面就是模态框<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>复制js代码，启动js插件。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-comment">// 当我们点击了自己定义的按钮，就弹出模态框</span><br>$(<span class="hljs-string">&quot;.myBtn&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">// alert(11);</span><br>$(<span class="hljs-string">&#x27;#btn&#x27;</span>).modal()<br>&#125;)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h3 id="1-4-6-bootstrap案例-阿里百秀"><a href="#1-4-6-bootstrap案例-阿里百秀" class="headerlink" title="1.4.6. bootstrap案例-阿里百秀"></a>1.4.6. bootstrap案例-阿里百秀</h3><blockquote><p>1.通过调用组件实现导航栏<br>2.通过调用插件实现登录<br>3.通过调用插件标签页实现 tab 栏</p></blockquote><p>​    代码实现略。(详情参考源代码)</p><h2 id="1-7-综合案例-toDoList案例分析（代码略）"><a href="#1-7-综合案例-toDoList案例分析（代码略）" class="headerlink" title="1.7. 综合案例: toDoList案例分析（代码略）"></a>1.7. 综合案例: toDoList案例分析（代码略）</h2><h3 id="1-7-1-案例：案例介绍"><a href="#1-7-1-案例：案例介绍" class="headerlink" title="1.7.1 案例：案例介绍"></a>1.7.1 案例：案例介绍</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 文本框里面输入内容，按下回车，就可以生成待办事项。</span><br><span class="hljs-comment">// 2. 点击待办事项复选框，就可以把当前数据添加到已完成事项里面。</span><br><span class="hljs-comment">// 3. 点击已完成事项复选框，就可以把当前数据添加到待办事项里面。</span><br><span class="hljs-comment">// 4. 但是本页面内容刷新页面不会丢失。</span><br></code></pre></td></tr></table></figure><h3 id="1-7-2-案例：toDoList-分析"><a href="#1-7-2-案例：toDoList-分析" class="headerlink" title="1.7.2 案例：toDoList 分析"></a>1.7.2 案例：toDoList 分析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 刷新页面不会丢失数据，因此需要用到本地存储 localStorage</span><br><span class="hljs-comment">// 2. 核心思路： 不管按下回车，还是点击复选框，都是把本地存储的数据加载到页面中，这样保证刷新关闭页面不会丢失数据</span><br><span class="hljs-comment">// 3. 存储的数据格式：var todolist =  [&#123; title : ‘xxx’, done: false&#125;]</span><br><span class="hljs-comment">// 4. 注意点1： 本地存储 localStorage 里面只能存储字符串格式 ，因此需要把对象转换为字符串 JSON.stringify(data)。</span><br><span class="hljs-comment">// 5. 注意点2： 获取本地存储数据，需要把里面的字符串转换为对象格式JSON.parse() 我们才能使用里面的数据。</span><br></code></pre></td></tr></table></figure><h3 id="1-7-3-案例：toDoList-按下回车把新数据添加到本地存储里面"><a href="#1-7-3-案例：toDoList-按下回车把新数据添加到本地存储里面" class="headerlink" title="1.7.3 案例：toDoList 按下回车把新数据添加到本地存储里面"></a>1.7.3 案例：toDoList 按下回车把新数据添加到本地存储里面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.切记： 页面中的数据，都要从本地存储里面获取，这样刷新页面不会丢失数据，所以先要把数据保存到本地存储里面。</span><br><span class="hljs-comment">// 2.利用事件对象.keyCode判断用户按下回车键（13）。</span><br><span class="hljs-comment">// 3.声明一个数组，保存数据。</span><br><span class="hljs-comment">// 4.先要读取本地存储原来的数据（声明函数 getData()），放到这个数组里面。</span><br><span class="hljs-comment">// 5.之后把最新从表单获取过来的数据，追加到数组里面。</span><br><span class="hljs-comment">// 6.最后把数组存储给本地存储 (声明函数 savaDate())</span><br></code></pre></td></tr></table></figure><h3 id="1-7-4-案例：toDoList-本地存储数据渲染加载到页面"><a href="#1-7-4-案例：toDoList-本地存储数据渲染加载到页面" class="headerlink" title="1.7.4 案例：toDoList 本地存储数据渲染加载到页面"></a>1.7.4 案例：toDoList 本地存储数据渲染加载到页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.因为后面也会经常渲染加载操作，所以声明一个函数 load，方便后面调用</span><br><span class="hljs-comment">// 2.先要读取本地存储数据。（数据不要忘记转换为对象格式）</span><br><span class="hljs-comment">// 3.之后遍历这个数据（$.each()），有几条数据，就生成几个小li 添加到 ol 里面。</span><br><span class="hljs-comment">// 4.每次渲染之前，先把原先里面 ol 的内容清空，然后渲染加载最新的数据。</span><br></code></pre></td></tr></table></figure><h3 id="1-7-5-案例：toDoList-删除操作"><a href="#1-7-5-案例：toDoList-删除操作" class="headerlink" title="1.7.5 案例：toDoList 删除操作"></a>1.7.5 案例：toDoList 删除操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.点击里面的a链接，不是删除的li，而是删除本地存储对应的数据。</span><br><span class="hljs-comment">// 2.核心原理：先获取本地存储数据，删除对应的数据，保存给本地存储，重新渲染列表li</span><br><span class="hljs-comment">// 3.我们可以给链接自定义属性记录当前的索引号</span><br><span class="hljs-comment">// 4.根据这个索引号删除相关的数据----数组的splice(i, 1)方法</span><br><span class="hljs-comment">// 5.存储修改后的数据，然后存储给本地存储</span><br><span class="hljs-comment">// 6.重新渲染加载数据列表</span><br><span class="hljs-comment">// 7.因为a是动态创建的，我们使用on方法绑定事件</span><br></code></pre></td></tr></table></figure><h3 id="1-7-6-案例：toDoList-正在进行和已完成选项操作"><a href="#1-7-6-案例：toDoList-正在进行和已完成选项操作" class="headerlink" title="1.7.6 案例：toDoList  正在进行和已完成选项操作"></a>1.7.6 案例：toDoList  正在进行和已完成选项操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.当我们点击了小的复选框，修改本地存储数据，再重新渲染数据列表。</span><br><span class="hljs-comment">// 2.点击之后，获取本地存储数据。</span><br><span class="hljs-comment">// 3.修改对应数据属性 done 为当前复选框的checked状态。</span><br><span class="hljs-comment">// 4.之后保存数据到本地存储</span><br><span class="hljs-comment">// 5.重新渲染加载数据列表</span><br><span class="hljs-comment">// 6.load 加载函数里面，新增一个条件,如果当前数据的done为true 就是已经完成的，就把列表渲染加载到 ul 里面</span><br><span class="hljs-comment">// 7.如果当前数据的done 为false， 则是待办事项，就把列表渲染加载到 ol 里面</span><br></code></pre></td></tr></table></figure><h3 id="1-7-7-案例：toDoList-统计正在进行个数和已经完成个数"><a href="#1-7-7-案例：toDoList-统计正在进行个数和已经完成个数" class="headerlink" title="1.7.7 案例：toDoList 统计正在进行个数和已经完成个数"></a>1.7.7 案例：toDoList 统计正在进行个数和已经完成个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.在我们load 函数里面操作</span><br><span class="hljs-comment">// 2.声明2个变量 ：todoCount 待办个数  doneCount 已完成个数   </span><br><span class="hljs-comment">// 3.当进行遍历本地存储数据的时候， 如果 数据done为 false， 则 todoCount++, 否则 doneCount++</span><br><span class="hljs-comment">// 4.最后修改相应的元素 text() </span><br></code></pre></td></tr></table></figure><h2 id="1-8-今日总结"><a href="#1-8-今日总结" class="headerlink" title="1.8. 今日总结"></a>1.8. 今日总结</h2><p><img src="/images/%E6%80%BB%E7%BB%93.png" alt="总结"></p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JS数组的相关方法</title>
    <link href="/2021/01/28/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/01/28/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="JS数组的相关方法"><a href="#JS数组的相关方法" class="headerlink" title="JS数组的相关方法"></a>JS数组的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td><strong><code>★push(n1, n2)</code></strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>unshift(n1, n2)</code></strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>Array.isArray()</code></strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td><strong><code>pop()</code></strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>shift()</code></strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>sort(fn)</code></strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td><strong><code>reverse()</code></strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td><strong><code>★indexOf(元素)</code></strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>lastIndexOf(元素)</code></strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>★join(连接符)</code></strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>toString()</code></strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★splice(m, n)</code></strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td><strong><code>concat(arr1, arr2)</code></strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr><tr><td><strong><code>★forEach(fn)</code></strong></td><td>快速遍历数组</td><td><code>fn(item, index)</code></td><td>undefined</td><td>不会修改</td></tr><tr><td><strong><code>★filter(fn)</code></strong></td><td>从数组中筛选出所有符合条件的元素</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>some(fn)</code></strong></td><td>判断数组中是否有符合条件的某个元素</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>every(fn)</code></strong></td><td>判断数组中是否所有元素都符合条件</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>Array.from(obj[,fn])</code></strong></td><td>把其他类型的数据转成数组</td><td>其他类型数据</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★find(fn)</code></strong></td><td>查找数组中符合条件的第一个元素</td><td><code>fn(item, index)</code></td><td>元素值或undefined</td><td>不会修改</td></tr><tr><td><strong><code>findIndex(fn )</code></strong></td><td>查找数组中符合条件的第一个元素的索引</td><td><code>fn(item, index)</code></td><td>索引号或-1</td><td>不会修改</td></tr><tr><td><strong><code>includes(固定值)</code></strong></td><td>判断数组是否包含给定的值</td><td>固定值</td><td>布尔值</td><td>不会</td></tr><tr><td><strong><code>★map(fn)</code></strong></td><td>基于原数组去创建一个新数组</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会</td></tr><tr><td><strong><code>★JSON.stringify()</code></strong></td><td>把数组、对象转成字符串（序列化）</td><td>需要转化的数组、对象</td><td>字符串</td><td></td></tr></tbody></table><h2 id="JS-字符串的相关方法"><a href="#JS-字符串的相关方法" class="headerlink" title="JS 字符串的相关方法"></a>JS 字符串的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong><code>length</code></strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong><code>★str[i]</code></strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong><code>charAt(i)</code></strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong><code>★indexOf(字符[, n])</code></strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>lastIndexOf(字符)</code></strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★substr(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>substring(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★★★split(分隔符)</code></strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong><code>toUpperCase()</code></strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>toLowerCase()</code></strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>★trim()</code></strong></td><td>去除字符串两端的空格</td><td>无</td><td>去除空格后的字符</td></tr><tr><td><strong><code>startsWidth()</code></strong></td><td>判断字符串是否以某些字符开头</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>endsWidth()</code></strong></td><td>判断字符串是否以某些字符结尾</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>repeat(n)</code></strong></td><td>将某个字符串重复 n 次</td><td>重复的次数</td><td>新字符串</td></tr><tr><td><strong><code>★JSON.parse()</code></strong></td><td>把字符串再解析回原来的数组（反序列化）</td><td>需要转化的字符串</td><td>数组</td></tr></tbody></table><p><strong>备注:</strong><br>字符串中所有的方法都不会修改原本的字符串, 要想修改只能重新赋值;</p><p>重点记忆★的相关方法</p>]]></content>
    
    
    <categories>
      
      <category>相关方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
