<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Web API第一天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-API第一天"><a href="#Web-API第一天" class="headerlink" title="Web API第一天"></a>Web API第一天</h1><h2 id="一、Web-API介绍"><a href="#一、Web-API介绍" class="headerlink" title="一、Web API介绍"></a>一、Web API介绍</h2><h3 id="1-API介绍"><a href="#1-API介绍" class="headerlink" title="1.API介绍"></a>1.API介绍</h3><p>（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，只需直接调用使用即可。</p><h3 id="2、Web-API的概念"><a href="#2、Web-API的概念" class="headerlink" title="2、Web  API的概念"></a>2、Web  API的概念</h3><p>Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p><p>MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><h3 id="3、API-和-Web-API-总结"><a href="#3、API-和-Web-API-总结" class="headerlink" title="3、API 和 Web  API 总结"></a>3、API 和 Web  API 总结</h3><ol><li>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</li><li>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</li><li>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</li><li>学习 Web API 可以结合前面学习内置对象方法的思路学习</li></ol><h3 id="4、JS组成"><a href="#4、JS组成" class="headerlink" title="4、JS组成"></a>4、JS组成</h3><ol><li>ECMAscript 指定的标准语法</li><li>DOM(文档对象模型) 网页</li><li>BOM(浏览器对象模型) 浏览器</li></ol><h2 id="二、DOM数"><a href="#二、DOM数" class="headerlink" title="二、DOM数"></a>二、DOM数</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>文档对象模型（Document Object Model，简称DOM），是 <a href="https://baike.baidu.com/item/W3C">W3C</a> 组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80">可扩展标记语言</a>（html或者xhtml）的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">编程接口</a>。</p><h3 id="2、组成"><a href="#2、组成" class="headerlink" title="2、组成"></a>2、组成</h3><p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p><ul><li>文档：一个页面就是一个文档，DOM中使用document表示</li><li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li><li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li></ul><p><strong>DOM把以上内容都看做是对象</strong></p><h2 id="三、获取元素"><a href="#三、获取元素" class="headerlink" title="三、获取元素"></a>三、获取元素</h2><h3 id="1、根据元素的id名称"><a href="#1、根据元素的id名称" class="headerlink" title="1、根据元素的id名称"></a>1、根据元素的id名称</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementById(&#x27;id名称&#x27;)不需要加#号<br></code></pre></td></tr></table></figure><h3 id="2、-根据元素的标签名"><a href="#2、-根据元素的标签名" class="headerlink" title="2、 根据元素的标签名"></a>2、 根据元素的标签名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementsByTagName(<span class="hljs-string">&#x27;标签名&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、根据元素的类名"><a href="#3、根据元素的类名" class="headerlink" title="3、根据元素的类名"></a>3、根据元素的类名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementsByClassName(<span class="hljs-string">&#x27;类名&#x27;</span>) <span class="hljs-comment">//不需要加.</span><br></code></pre></td></tr></table></figure><h3 id="4、★根据-css-选择器字符串来获取符合条件的第一个元素"><a href="#4、★根据-css-选择器字符串来获取符合条件的第一个元素" class="headerlink" title="4、★根据 css 选择器字符串来获取符合条件的第一个元素"></a>4、★根据 css 选择器字符串来获取符合条件的第一个元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">querySelector(<span class="hljs-string">&#x27;css选择器&#x27;</span>)<span class="hljs-comment">// # . ul&gt;li ul li</span><br></code></pre></td></tr></table></figure><p><strong>返回的是单个元素</strong></p><ul><li>伪类选择器 :checked :disabled</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">querySelector(<span class="hljs-string">&#x27;:checked&#x27;</span>)<span class="hljs-comment">//checked,disabled,selected</span><br></code></pre></td></tr></table></figure><h3 id="5、-根据-css-选择器字符串来获取符合条件的所有元素"><a href="#5、-根据-css-选择器字符串来获取符合条件的所有元素" class="headerlink" title="5、 根据 css 选择器字符串来获取符合条件的所有元素"></a>5、 根据 css 选择器字符串来获取符合条件的所有元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">querySelectorAll(<span class="hljs-string">&#x27;css选择器&#x27;</span>) <span class="hljs-comment">//# . ul&gt;li ul li</span><br></code></pre></td></tr></table></figure><p><strong>返回的结果是元素对象集合，伪数组</strong></p><p><strong>注意: api名称中带有 elements, children, all 返回的都是伪数组</strong></p><h3 id="6、获取特殊元素（body，html）"><a href="#6、获取特殊元素（body，html）" class="headerlink" title="6、获取特殊元素（body，html）"></a>6、获取特殊元素（body，html）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">documents.body<span class="hljs-comment">//返回body元素对象</span><br>documents.documentElement<span class="hljs-comment">//返回html元素对象</span><br></code></pre></td></tr></table></figure><h3 id="7、所有操作元素的方法都必须是单个元素对象"><a href="#7、所有操作元素的方法都必须是单个元素对象" class="headerlink" title="7、所有操作元素的方法都必须是单个元素对象"></a>7、<strong>所有操作元素的方法都必须是单个元素对象</strong></h3><h2 id="四、事件基础"><a href="#四、事件基础" class="headerlink" title="四、事件基础"></a>四、事件基础</h2><h3 id="1、事件概述"><a href="#1、事件概述" class="headerlink" title="1、事件概述"></a>1、事件概述</h3><p><strong>触发— 响应机制</strong>。</p><h3 id="2、事件三要素"><a href="#2、事件三要素" class="headerlink" title="2、事件三要素"></a>2、事件三要素</h3><ul><li>事件源（谁）：触发事件的元素</li><li>事件类型（什么事件）： 例如 click 点击事件<ul><li>onclick</li><li>onfoucs</li><li>onblur</li></ul></li><li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li></ul><p><strong>事件源.事件类型 = 事件处理函数</strong></p><h3 id="3、执行事件的步骤"><a href="#3、执行事件的步骤" class="headerlink" title="3、执行事件的步骤"></a>3、执行事件的步骤</h3><ul><li>获取事件源</li><li>绑定事件</li><li>添加事件处理程序（采取函数值形式）</li></ul><p><strong>注意: 事件不触发, 事件处理函数不执行</strong></p><p><strong>事件处理函数中的this：指向事件源，事件的绑定者</strong></p><h3 id="4、常见的鼠标事件"><a href="#4、常见的鼠标事件" class="headerlink" title="4、常见的鼠标事件"></a>4、常见的鼠标事件</h3><p>![1550734506084](../img/web api/一/1550734506084.png)</p><h2 id="五、操作元素"><a href="#五、操作元素" class="headerlink" title="五、操作元素"></a>五、操作元素</h2><h3 id="1、改变元素内容（获取或设置）"><a href="#1、改变元素内容（获取或设置）" class="headerlink" title="1、改变元素内容（获取或设置）"></a>1、改变元素内容（获取或设置）</h3><p>![1550735016756](../img/web api/一/1550735016756.png)</p><p>区别:</p><ul><li>innerHTML 保留空格和换行, 并支持 html 字符串标签;</li><li> 反之, innerText 只能修改纯文字; 他们都是可读写属性</li></ul><h3 id="2、常见元素的属性操作"><a href="#2、常见元素的属性操作" class="headerlink" title="2、常见元素的属性操作"></a>2、常见元素的属性操作</h3><p>src、href、tilte、alt</p><p>表单元素的属性：</p><p>value、type</p><p>都只能设置为布尔值（true  false）：checked、disabled、selected</p><h2 id="六、操作元素样式"><a href="#六、操作元素样式" class="headerlink" title="六、操作元素样式"></a>六、操作元素样式</h2><h3 id="1、修改元素的内联样式"><a href="#1、修改元素的内联样式" class="headerlink" title="1、修改元素的内联样式"></a>1、修改元素的内联样式</h3><p>元素对象.style.样式属性 = 值;</p><p>属性名必须要遵守驼峰命名 ：font-size ==&gt; fontSize</p><p>值一定是字符串, 带上单位’300px’</p><h3 id="2、-修改元素的类名"><a href="#2、-修改元素的类名" class="headerlink" title="2、 修改元素的类名"></a>2、 修改元素的类名</h3><p>ele.className = 值</p><p>多类名的情况,要加空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;style&gt;<br>        .box &#123;<br>            width: 100px;<br>            height: 100px;<br>            background-color: #ccc;<br>            border: 1px solid;<br>        &#125;<br>        <br>        .big &#123;<br>            height: 200px;<br>            width: 200px;<br>            background-color: pink;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;pre&gt;<br>    操作元素样式的两种方法：<br>    <span class="hljs-number">1.</span> element.style.属性名: 修改元素的样式属性 (内联样式)<br>    <span class="hljs-number">2.</span> element.className: 修改类名的方式<br>  &lt;/pre&gt;<br>    &lt;hr&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;点击盒子&lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>);<br>        box.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(1);</span><br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;box big&#x27;</span>; <span class="hljs-comment">//修改类名</span><br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(box.className);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第七天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E4%B8%83%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day07-Web-APIs"><a href="#day07-Web-APIs" class="headerlink" title="day07 - Web APIs"></a><strong>day07 - Web APIs</strong></h1><h2 id="1-1-触屏事件"><a href="#1-1-触屏事件" class="headerlink" title="1.1. 触屏事件"></a><strong>1.1. 触屏事件</strong></h2><h3 id="1-1-1-触屏事件概述"><a href="#1-1-1-触屏事件概述" class="headerlink" title="1.1.1 触屏事件概述"></a>1.1.1 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h3 id="1-1-2-触摸事件对象（TouchEvent）"><a href="#1-1-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.1.2 触摸事件对象（TouchEvent）"></a>1.1.2 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="images%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="1-1-3-移动端拖动元素"><a href="#1-1-3-移动端拖动元素" class="headerlink" title="1.1.3  移动端拖动元素"></a>1.1.3  移动端拖动元素</h3><ol><li> touchstart、touchmove、touchend 可以实现拖动元素</li><li> 但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li><li> 移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li> 手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</li></ol><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><blockquote><p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p></blockquote><h2 id="1-2-移动端常见特效"><a href="#1-2-移动端常见特效" class="headerlink" title="1.2. 移动端常见特效"></a>1.2. 移动端常见特效</h2><h3 id="1-2-1-案例-移动轮播图"><a href="#1-2-1-案例-移动轮播图" class="headerlink" title="1.2.1 案例: 移动轮播图"></a>1.2.1 案例: 移动轮播图</h3><p><code>移动端轮播图功能和基本PC端一致。</code></p><ol><li>可以自动播放图片</li><li>手指可以拖动播放轮播图</li></ol><h3 id="1-2-2-案例分析"><a href="#1-2-2-案例分析" class="headerlink" title="1.2.2. 案例分析:"></a>1.2.2. 案例分析:</h3><ol><li>自动播放功能</li><li>开启定时器</li><li>移动端移动，可以使用translate 移动</li><li>想要图片优雅的移动，请添加过渡效果<img src="images%5C1551795152(1).jpg" alt="1551795152(1)"></li></ol><ol><li><p>自动播放功能-无缝滚动</p></li><li><p>注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p></li><li><p>此时需要添加检测过渡完成事件  transitionend </p></li><li><p>判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p></li><li><p>此时图片，去掉过渡效果，然后移动</p></li><li><p>如果索引号小于0， 说明是倒着走， 索引号等于2 </p></li><li><p>此时图片，去掉过渡效果，然后移动</p><p><img src="images%5C1551795483(1).jpg" alt="1551795483(1)"></p></li></ol><h2 id="1-2-3-classList-属性"><a href="#1-2-3-classList-属性" class="headerlink" title="1.2.3 classList 属性"></a>1.2.3 classList 属性</h2><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p><p><strong>添加类：</strong></p><p>element.classList.add（’类名’）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focus.classList.add(<span class="hljs-string">&#x27;current&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>移除类：</strong></p><p>element.classList.remove（’类名’）;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focus.classList.remove(<span class="hljs-string">&#x27;current&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>切换类：</strong></p><p>element.classList.toggle（’类名’）;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focus.classList.toggle(<span class="hljs-string">&#x27;current&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>注意:以上方法里面，所有类名都不带点</code></p><h3 id="1-2-4-案例分析"><a href="#1-2-4-案例分析" class="headerlink" title="1.2.4. 案例分析"></a>1.2.4. 案例分析</h3><ol><li><p>小圆点跟随变化效果</p></li><li><p>把ol里面li带有current类名的选出来去掉类名 remove</p></li><li><p>让当前索引号的小li 加上 current   add</p></li><li><p>但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里面</p><p><img src="images%5C1551796072(1).jpg" alt="1551796072(1)"></p></li></ol><ol><li>手指滑动轮播图</li><li>本质就是ul跟随手指移动，简单说就是移动端拖动元素</li><li>触摸元素touchstart：  获取手指初始坐标</li><li>移动手指touchmove：  计算手指的滑动距离，并且移动盒子</li><li>离开手指touchend:   根据滑动的距离分不同的情况</li><li>如果移动距离小于某个像素  就回弹原来位置</li><li>如果移动距离大于某个像素就上一张下一张滑动。</li><li>滑动也分为左滑动和右滑动判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑 </li><li>如果是左滑就播放下一张 （index++）</li><li>如果是右滑就播放上一张  (index–)</li></ol><p><img src="images%5C1551796363(1).jpg" alt="1551796363(1)"></p><p><img src="images%5C1551796502(1).jpg" alt="1551796502(1)"></p><h3 id="1-3-1-案例：返回顶部"><a href="#1-3-1-案例：返回顶部" class="headerlink" title="1.3.1. 案例：返回顶部"></a>1.3.1. 案例：返回顶部</h3><p>当页面滚动某个地方，就显示，否则隐藏</p><p>点击可以返回顶部</p><h3 id="1-3-2-案例分析"><a href="#1-3-2-案例分析" class="headerlink" title="1.3.2.案例分析"></a>1.3.2.案例分析</h3><ol><li>滚动某个地方显示</li><li>事件：scroll页面滚动事件  </li><li>如果被卷去的头部（window.pageYOffset ）大于某个数值</li><li>点击，window.scroll(0,0) 返回顶部</li></ol><p><img src="images%5C1551797003(1).jpg" alt="1551797003(1)"></p><h2 id="1-4-click-延时解决方案"><a href="#1-4-click-延时解决方案" class="headerlink" title="1.4. click 延时解决方案"></a>1.4. click 延时解决方案</h2><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><p>​    1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;user-scalable=no&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    2.利用touch事件自己封装这个事件解决300ms 延迟。 </p><p>​    原理就是：</p><ol><li> 当我们手指触摸屏幕，记录当前触摸时间</li><li> 当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li> 如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li></ol><p>代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//封装tap，解决click 300ms 延时</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tap</span> (<span class="hljs-params">obj, callback</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> isMove = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">var</span> startTime = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录触摸时候的时间变量</span><br>        obj.addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            startTime = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 记录触摸时间</span><br>        &#125;);<br>        obj.addEventListener(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            isMove = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span><br>        &#125;);<br>        obj.addEventListener(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (!isMove &amp;&amp; (<span class="hljs-built_in">Date</span>.now() - startTime) &lt; <span class="hljs-number">150</span>) &#123;  <span class="hljs-comment">// 如果手指触摸和离开时间小于150ms 算点击</span><br>                callback &amp;&amp; callback(); <span class="hljs-comment">// 执行回调函数</span><br>            &#125;<br>            isMove = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//  取反 重置</span><br>            startTime = <span class="hljs-number">0</span>;<br>        &#125;);<br>&#125;<br><span class="hljs-comment">//调用  </span><br>  tap(div, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">// 执行代码  &#125;);</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>使用插件。fastclick 插件解决300ms 延迟。 </p><p><img src="images%5C1551797533(1).jpg" alt="1551797533(1)"></p></li></ol><h2 id="1-5-移动端常用开发插件"><a href="#1-5-移动端常用开发插件" class="headerlink" title="1.5. 移动端常用开发插件"></a>1.5. 移动端常用开发插件</h2><h3 id="1-5-1-什么是插件"><a href="#1-5-1-什么是插件" class="headerlink" title="1.5.1. 什么是插件"></a>1.5.1. 什么是插件</h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p><p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>我们以前写的animate.js 也算一个最简单的插件</p><p>fastclick 插件解决 300ms 延迟。 使用延时</p><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://</a><a href="https://github.com/ftlabs/fastclick">github.com/ftlabs/fastclick</a></p><h3 id="1-5-2-插件的使用"><a href="#1-5-2-插件的使用" class="headerlink" title="1.5.2. 插件的使用"></a>1.5.2. 插件的使用</h3><ol><li><p> 引入 js 插件文件。</p></li><li><p> 按照规定语法使用。</p></li><li><p> fastclick 插件解决 300ms 延迟。 使用延时</p></li><li><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">document</span>) &#123;<br>            <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                       FastClick.attach(<span class="hljs-built_in">document</span>.body);<br>            &#125;, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-3-Swiper-插件的使用"><a href="#1-5-3-Swiper-插件的使用" class="headerlink" title="1.5.3. Swiper 插件的使用"></a>1.5.3. Swiper 插件的使用</h3></li></ol><p>中文官网地址： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p><ol><li> 引入插件相关文件。</li><li> 按照规定语法使用</li></ol><h3 id="1-5-4-其他移动端常见插件"><a href="#1-5-4-其他移动端常见插件" class="headerlink" title="1.5.4. 其他移动端常见插件"></a>1.5.4. 其他移动端常见插件</h3><p>lsuperslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></p><p>l iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></p><h3 id="1-5-5-插件的使用总结"><a href="#1-5-5-插件的使用总结" class="headerlink" title="1.5.5. 插件的使用总结"></a>1.5.5. 插件的使用总结</h3><p>1.确认插件实现的功能</p><p>2.去官网查看使用说明</p><p>3.下载插件</p><p>4.打开demo实例文件，查看需要引入的相关文件，并且引入</p><p>5.复制demo实例文件中的结构html，样式css以及js代码</p><h3 id="1-5-6-移动端视频插件-zy-media-js"><a href="#1-5-6-移动端视频插件-zy-media-js" class="headerlink" title="1.5.6. 移动端视频插件 zy.media.js"></a>1.5.6. 移动端视频插件 zy.media.js</h3><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</p><p>不同的视频格式文件，我们可以通过source解决。</p><p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</p><p>这个时候我们可以使用插件方式来制作。</p><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><h2 id="1-6-移动端常用开发框架"><a href="#1-6-移动端常用开发框架" class="headerlink" title="1.6. 移动端常用开发框架"></a>1.6. 移动端常用开发框架</h2><h3 id="1-6-1-移动端视频插件-zy-media-js"><a href="#1-6-1-移动端视频插件-zy-media-js" class="headerlink" title="1.6.1. 移动端视频插件 zy.media.js"></a>1.6.1. 移动端视频插件 zy.media.js</h3><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><p>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p><p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p><p>框架： 大而全，一整套解决方案</p><p>插件： 小而专一，某个功能的解决方案</p><h3 id="1-6-2-Bootstrap"><a href="#1-6-2-Bootstrap" class="headerlink" title="1.6.2. Bootstrap"></a>1.6.2. Bootstrap</h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p><p>它能开发PC端，也能开发移动端 </p><p>Bootstrap JS插件使用步骤：</p><p>1.引入相关js 文件</p><p>2.复制HTML 结构</p><p>3.修改对应样式</p><p>4.修改相应JS 参数</p><h2 id="1-7-本地存储"><a href="#1-7-本地存储" class="headerlink" title="1.7. 本地存储"></a>1.7. 本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h3 id="1-7-1-本地存储特性"><a href="#1-7-1-本地存储特性" class="headerlink" title="1.7.1.本地存储特性"></a>1.7.1.本地存储特性</h3><p>1、数据存储在用户浏览器中</p><p>2、设置、读取方便、甚至页面刷新不丢失数据</p><p>3、容量较大，sessionStorage约5M、localStorage约20M</p><p>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p><h3 id="1-7-2-window-sessionStorage"><a href="#1-7-2-window-sessionStorage" class="headerlink" title="1.7.2.window.sessionStorage"></a>1.7.2.window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.setItem(key, value)<br></code></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.getItem(key)<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.removeItem(key)<br></code></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.clear()<br></code></pre></td></tr></table></figure><h3 id="1-7-3-window-localStorage"><a href="#1-7-3-window-localStorage" class="headerlink" title="1.7.3.window.localStorage"></a>1.7.3.window.localStorage</h3><p>1、声明周期永久生效，除非手动删除 否则关闭页面也会存在</p><p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p><p>3.  以键值对的形式存储使用</p><p>存储数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.setItem(key, value)<br></code></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.getItem(key)<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.removeItem(key)<br></code></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.clear()<br></code></pre></td></tr></table></figure><h3 id="1-7-4-案例：记住用户名"><a href="#1-7-4-案例：记住用户名" class="headerlink" title="1.7.4.案例：记住用户名"></a>1.7.4.案例：记住用户名</h3><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li><p>把数据存起来，用到本地存储</p></li><li><p>关闭页面，也可以显示用户名，所以用到localStorage</p></li><li><p>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</p></li><li><p>当复选框发生改变的时候change事件</p></li><li><p>如果勾选，就存储，否则就移除</p><p><img src="images%5C1551800263(1).jpg" alt="1551800263(1)"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第五天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day05-Web-APIs"><a href="#day05-Web-APIs" class="headerlink" title="day05 - Web APIs"></a><strong>day05 - Web APIs</strong></h1><h2 id="1-1-元素偏移量-offset-系列"><a href="#1-1-元素偏移量-offset-系列" class="headerlink" title="**1.1. **元素偏移量 offset 系列"></a>**1.1. **元素偏移量 offset 系列</h2><h3 id="1-1-1-offset-概述"><a href="#1-1-1-offset-概述" class="headerlink" title="1.1.1 offset 概述"></a>1.1.1 offset 概述</h3><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ol><li><p>获得元素距离带有定位父元素的位置</p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意：返回的数值都不带单位</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p></li></ol><p>![图片2](F:\Web APIs\Web APIs 第五天\笔记\images\图片2.png)</p><h3 id="1-1-2-offset-与-style-区别"><a href="#1-1-2-offset-与-style-区别" class="headerlink" title="1.1.2 offset 与 style 区别"></a>1.1.2 offset 与 style 区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ul><li><p>offset 可以得到任意样式表中的样式值</p></li><li><p>offset 系列获得的数值是没有单位的</p></li><li><p>offsetWidth 包含padding+border+width</p></li><li><p>offsetWidth 等属性是只读属性，只能获取不能赋值</p></li><li><blockquote><p>所以，我们想要获取元素大小位置，用offset更合适</p></blockquote></li></ul><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><p>style 只能得到行内样式表中的样式值</p></li><li><p>style.width 获得的是带有单位的字符串</p></li><li><p>style.width 获得不包含padding和border 的值</p></li><li><p>style.width 是可读写属性，可以获取也可以赋值</p></li><li><blockquote><p>所以，我们想要给元素更改值，则需要用style改变</p></blockquote></li></ul><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h3 id="1-1-3-案例：获取鼠标在盒子内的坐标"><a href="#1-1-3-案例：获取鼠标在盒子内的坐标" class="headerlink" title="1.1.3  案例：获取鼠标在盒子内的坐标"></a>1.1.3  案例：获取鼠标在盒子内的坐标</h3><ol><li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li><li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li><li>其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)</li><li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标</li><li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>);<br>box.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br><span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-built_in">this</span>.offsetLeft;<br><span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-built_in">this</span>.offsetTop;<br><span class="hljs-built_in">this</span>.innerHTML = <span class="hljs-string">&#x27;x坐标是&#x27;</span> + x + <span class="hljs-string">&#x27; y坐标是&#x27;</span> + y;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：模态框拖拽"><a href="#1-1-4-案例：模态框拖拽" class="headerlink" title="1.1.4  案例：模态框拖拽"></a>1.1.4  案例：模态框拖拽</h3><p>弹出框，我们也称为模态框。</p><p>​    1.点击弹出层，会弹出模态框， 并且显示灰色半透明的遮挡层。</p><p>​    2.点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</p><p>​    3.鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</p><p>​    4.鼠标松开，可以停止拖动模态框移动</p><h3 id="1-1-5-案例分析"><a href="#1-1-5-案例分析" class="headerlink" title="1.1.5. 案例分析:"></a>1.1.5. 案例分析:</h3><ol><li>点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li><li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li><li>在页面中拖拽的原理：鼠标按下并且移动， 之后松开鼠标</li><li>触发事件是鼠标按下mousedown，鼠标移动mousemove 鼠标松开 mouseup</li><li>拖拽过程:  鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li><li>鼠标按下触发的事件源是最上面一行，就是  id 为 title </li><li>鼠标的坐标减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li><li>鼠标按下，我们要得到鼠标在盒子的坐标。</li><li>鼠标移动，就让模态框的坐标  设置为  ：鼠标坐标 减去盒子坐标即可，注意移动事件写到按下事件里面。</li><li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 获取元素</span><br>       <span class="hljs-keyword">var</span> login = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.login&#x27;</span>);<br>       <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.login-bg&#x27;</span>);<br>       <span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#link&#x27;</span>);<br>       <span class="hljs-keyword">var</span> closeBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#closeBtn&#x27;</span>);<br>       <span class="hljs-keyword">var</span> title = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#title&#x27;</span>);<br>       <span class="hljs-comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span><br>       link.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               mask.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>               login.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>           &#125;)<br>           <span class="hljs-comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span><br>       closeBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               mask.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>               login.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>           &#125;)<br>           <span class="hljs-comment">// 4. 开始拖拽</span><br>           <span class="hljs-comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span><br>       title.addEventListener(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> x = e.pageX - login.offsetLeft;<br>           <span class="hljs-keyword">var</span> y = e.pageY - login.offsetTop;<br>           <span class="hljs-comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span><br>           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move)<br><br>           <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params">e</span>) </span>&#123;<br>               login.style.left = e.pageX - x + <span class="hljs-string">&#x27;px&#x27;</span>;<br>               login.style.top = e.pageY - y + <span class="hljs-string">&#x27;px&#x27;</span>;<br>           &#125;<br>           <span class="hljs-comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span><br>           <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move);<br>           &#125;)<br>       &#125;)<br><br></code></pre></td></tr></table></figure><h3 id="1-1-6-案例：仿京东放大镜"><a href="#1-1-6-案例：仿京东放大镜" class="headerlink" title="1.1.6  案例：仿京东放大镜"></a>1.1.6  案例：仿京东放大镜</h3><ol><li>整个案例可以分为三个功能模块</li><li>鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能</li><li>黄色的遮挡层跟随鼠标功能。 </li><li>移动黄色遮挡层，大图片跟随移动功能。</li></ol><h3 id="1-1-7-案例分析"><a href="#1-1-7-案例分析" class="headerlink" title="1.1.7. 案例分析:"></a>1.1.7. 案例分析:</h3><ol><li>黄色的遮挡层跟随鼠标功能。</li><li>把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。</li><li>首先是获得鼠标在盒子的坐标。 </li><li>之后把数值给遮挡层做为left 和top值。</li><li>此时用到鼠标移动事件，但是还是在小图片盒子内移动。</li><li>发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。</li><li>遮挡层不能超出小图片盒子范围。</li><li>如果小于零，就把坐标设置为0</li><li>如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离</li><li>遮挡层的最大移动距离：小图片盒子宽度 减去 遮挡层盒子宽度</li></ol><p><img src="images%5C1551881487(1).png" alt="1551881487(1)"></p><p><img src="images%5C1551881563(1).jpg" alt="1551881563(1)"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> preview_img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.preview_img&#x27;</span>);<br>    <span class="hljs-keyword">var</span> mask = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.mask&#x27;</span>);<br>    <span class="hljs-keyword">var</span> big = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.big&#x27;</span>);<br>    <span class="hljs-comment">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span><br>    preview_img.addEventListener(<span class="hljs-string">&#x27;mouseover&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        mask.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        big.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>    &#125;)<br>    preview_img.addEventListener(<span class="hljs-string">&#x27;mouseout&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            mask.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            big.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        &#125;)<br>        <span class="hljs-comment">// 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span><br>    preview_img.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// (1). 先计算出鼠标在盒子内的坐标</span><br>        <span class="hljs-keyword">var</span> x = e.pageX - <span class="hljs-built_in">this</span>.offsetLeft;<br>        <span class="hljs-keyword">var</span> y = e.pageY - <span class="hljs-built_in">this</span>.offsetTop;<br>        <span class="hljs-comment">// console.log(x, y);</span><br>        <span class="hljs-comment">// (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span><br>        <span class="hljs-comment">// (3) 我们mask 移动的距离</span><br>        <span class="hljs-keyword">var</span> maskX = x - mask.offsetWidth / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">var</span> maskY = y - mask.offsetHeight / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// (4) 如果x 坐标小于了0 就让他停在0 的位置</span><br>        <span class="hljs-comment">// 遮挡层的最大移动距离</span><br>        <span class="hljs-keyword">var</span> maskMax = preview_img.offsetWidth - mask.offsetWidth;<br>        <span class="hljs-keyword">if</span> (maskX &lt;= <span class="hljs-number">0</span>) &#123;<br>            maskX = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskX &gt;= maskMax) &#123;<br>            maskX = maskMax;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (maskY &lt;= <span class="hljs-number">0</span>) &#123;<br>            maskY = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (maskY &gt;= maskMax) &#123;<br>            maskY = maskMax;<br>        &#125;<br>        mask.style.left = maskX + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        mask.style.top = maskY + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        <span class="hljs-comment">// 3. 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span><br>        <span class="hljs-comment">// 大图</span><br>        <span class="hljs-keyword">var</span> bigIMg = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.bigImg&#x27;</span>);<br>        <span class="hljs-comment">// 大图片最大移动距离</span><br>        <span class="hljs-keyword">var</span> bigMax = bigIMg.offsetWidth - big.offsetWidth;<br>        <span class="hljs-comment">// 大图片的移动距离 X Y</span><br>        <span class="hljs-keyword">var</span> bigX = maskX * bigMax / maskMax;<br>        <span class="hljs-keyword">var</span> bigY = maskY * bigMax / maskMax;<br>        bigIMg.style.left = -bigX + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        bigIMg.style.top = -bigY + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>    &#125;)<br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="1-2-元素可视区-client-系列"><a href="#1-2-元素可视区-client-系列" class="headerlink" title="1.2. 元素可视区 client 系列"></a>1.2. 元素可视区 client 系列</h2><h3 id="1-2-1-client概述"><a href="#1-2-1-client概述" class="headerlink" title="1.2.1 client概述"></a>1.2.1 client概述</h3><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p><p><img src="images%5C%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p><img src="images%5C%E5%9B%BE%E7%89%874.png" alt="图片4"></p><h3 id="1-2-2-淘宝-flexible-js-源码分析"><a href="#1-2-2-淘宝-flexible-js-源码分析" class="headerlink" title="1.2.2. 淘宝 flexible.js 源码分析"></a>1.2.2. 淘宝 flexible.js 源码分析</h3><p>立即执行函数 (function(){})()  或者 (function(){}())</p><p>主要作用： 创建一个独立的作用域。 避免了命名冲突问题</p><p>下面三种情况都会刷新页面都会触发 load 事件。</p><p>1.a标签的超链接</p><p>2.F5或者刷新按钮（强制刷新）</p><p>3.前进后退按钮</p><p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。</p><p>所以此时后退按钮不能刷新页面。</p><p>此时可以使用 pageshow事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件</p><p><code>注意这个事件给window添加。</code></p><h2 id="1-3-元素滚动-scroll-系列"><a href="#1-3-元素滚动-scroll-系列" class="headerlink" title="1.3.元素滚动 scroll 系列"></a>1.3.元素滚动 scroll 系列</h2><h3 id="1-3-1-scroll-概述"><a href="#1-3-1-scroll-概述" class="headerlink" title="1.3.1. scroll 概述"></a>1.3.1. scroll 概述</h3><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><p><img src="images%5C%E5%9B%BE%E7%89%875.png" alt="图片5"></p><p><img src="images%5C%E5%9B%BE%E7%89%876.png" alt="图片6"></p><h3 id="1-3-2-页面被卷去的头部"><a href="#1-3-2-页面被卷去的头部" class="headerlink" title="1.3.2. 页面被卷去的头部"></a>1.3.2. 页面被卷去的头部</h3><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件。</p><h3 id="1-3-3-案例：仿淘宝固定右侧侧边栏"><a href="#1-3-3-案例：仿淘宝固定右侧侧边栏" class="headerlink" title="1.3.3.案例：仿淘宝固定右侧侧边栏"></a>1.3.3.案例：仿淘宝固定右侧侧边栏</h3><ol><li>原先侧边栏是绝对定位</li><li>当页面滚动到一定位置，侧边栏改为固定定位</li><li>页面继续滚动，会让 返回顶部显示出来</li></ol><h3 id="1-3-4-案例分析"><a href="#1-3-4-案例分析" class="headerlink" title="1.3.4.案例分析:"></a>1.3.4.案例分析:</h3><ol><li>需要用到页面滚动事件 scroll  因为是页面滚动，所以事件源是document</li><li>滚动到某个位置，就是判断页面被卷去的上部值。</li><li>页面被卷去的头部：可以通过window.pageYOffset 获得  如果是被卷去的左侧window.pageXOffset</li><li>注意，元素被卷去的头部是element.scrollTop  , 如果是页面被卷去的头部 则是 window.pageYOffset</li><li>其实这个值 可以通过盒子的 offsetTop可以得到，如果大于等于这个值，就可以让盒子固定定位了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 获取元素</span><br>      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.slider-bar&#x27;</span>);<br>      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.banner&#x27;</span>);<br>      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span><br>      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop<br>          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span><br>      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;<br>      <span class="hljs-comment">// 获取main 主体元素</span><br>      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.main&#x27;</span>);<br>      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.goBack&#x27;</span>);<br>      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;<br>      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// console.log(11);</span><br>          <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span><br>          <span class="hljs-comment">// console.log(window.pageYOffset);</span><br>          <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;<br>              sliderbar.style.position = <span class="hljs-string">&#x27;fixed&#x27;</span>;<br>              sliderbar.style.top = sliderbarTop + <span class="hljs-string">&#x27;px&#x27;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              sliderbar.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br>              sliderbar.style.top = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>          &#125;<br>          <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;<br>              goBack.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              goBack.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>          &#125;<br><br>      &#125;)<br></code></pre></td></tr></table></figure><h3 id="1-3-5-页面被卷去的头部兼容性解决方案"><a href="#1-3-5-页面被卷去的头部兼容性解决方案" class="headerlink" title="1.3.5.页面被卷去的头部兼容性解决方案"></a>1.3.5.页面被卷去的头部兼容性解决方案</h3><p>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</p><ol><li>声明了 DTD，使用 document.documentElement.scrollTop</li><li>未声明 DTD，使用  document.body.scrollTop</li><li>新方法 window.pageYOffset和 window.pageXOffset，IE9 开始支持</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScroll</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      left: <span class="hljs-built_in">window</span>.pageXOffset || <span class="hljs-built_in">document</span>.documentElement.scrollLeft || <span class="hljs-built_in">document</span>.body.scrollLeft||<span class="hljs-number">0</span>,<br>      top: <span class="hljs-built_in">window</span>.pageYOffset || <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-number">0</span><br>    &#125;;<br> &#125; <br>使用的时候  getScroll().left<br><br></code></pre></td></tr></table></figure><h2 id="1-4-三大系列总结"><a href="#1-4-三大系列总结" class="headerlink" title="1.4. 三大系列总结"></a>1.4. 三大系列总结</h2><p><img src="images%5C%E5%9B%BE%E7%89%877.png" alt="图片7"></p><p>他们主要用法：</p><p>1.offset系列 经常用于获得元素位置    offsetLeft  offsetTop</p><p>2.client经常用于获取元素大小  clientWidth clientHeight</p><p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p><p>4.注意页面滚动的距离通过 window.pageXOffset  获得</p><h2 id="1-5-mouseenter-和mouseover的区别"><a href="#1-5-mouseenter-和mouseover的区别" class="headerlink" title="1.5. mouseenter 和mouseover的区别"></a>1.5. mouseenter 和mouseover的区别</h2><ul><li>当鼠标移动到元素上时就会触发mouseenter 事件</li><li>类似 mouseover，它们两者之间的差别是</li><li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</li><li>之所以这样，就是因为mouseenter不会冒泡</li><li>跟mouseenter搭配鼠标离开 mouseleave  同样不会冒泡</li></ul><h2 id="1-6-动画函数封装"><a href="#1-6-动画函数封装" class="headerlink" title="1.6. 动画函数封装"></a>1.6. 动画函数封装</h2><h3 id="1-6-1-动画实现原理"><a href="#1-6-1-动画实现原理" class="headerlink" title="1.6.1. 动画实现原理"></a>1.6.1. 动画实现原理</h3><blockquote><p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p></blockquote><p>实现步骤：</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h3 id="1-6-2-动画函数给不同元素记录不同定时器"><a href="#1-6-2-动画函数给不同元素记录不同定时器" class="headerlink" title="1.6.2. 动画函数给不同元素记录不同定时器"></a>1.6.2. 动画函数给不同元素记录不同定时器</h3><p>如果多个元素都使用这个动画函数，每次都要var 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><blockquote><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target</span>) </span>&#123;<br>           <span class="hljs-comment">// 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</span><br>           <span class="hljs-comment">// 解决方案就是 让我们元素只有一个定时器执行</span><br>           <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span><br>           <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>           obj.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-keyword">if</span> (obj.offsetLeft &gt;= target) &#123;<br>                   <span class="hljs-comment">// 停止动画 本质是停止定时器</span><br>                   <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>               &#125;<br>               obj.style.left = obj.offsetLeft + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>           &#125;, <span class="hljs-number">30</span>);<br>       &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第六天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day06-Web-APIs"><a href="#day06-Web-APIs" class="headerlink" title="day06 - Web APIs"></a><strong>day06 - Web APIs</strong></h1><h2 id="1-1-动画函数封装"><a href="#1-1-动画函数封装" class="headerlink" title="**1.1. **动画函数封装"></a>**1.1. **动画函数封装</h2><h3 id="1-1-1-缓动效果原理"><a href="#1-1-1-缓动效果原理" class="headerlink" title="1.1.1 缓动效果原理"></a>1.1.1 缓动效果原理</h3><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><p>思路：</p><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li>核心算法： (目标值 - 现在的位置)   /  10    做为每次移动的距离步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器  </li><li>注意步长值需要取整  </li></ol><h3 id="1-1-2-动画函数多个目标值之间移动"><a href="#1-1-2-动画函数多个目标值之间移动" class="headerlink" title="1.1.2 动画函数多个目标值之间移动"></a>1.1.2 动画函数多个目标值之间移动</h3><p>可以让动画函数从 800 移动到 500。</p><p>当我们点击按钮时候，判断步长是正值还是负值</p><p>​    1.如果是正值，则步长往大了取整</p><p>​    2.如果是负值，则步长 向小了取整</p><h3 id="1-1-3-动函数添加回调函数"><a href="#1-1-3-动函数添加回调函数" class="headerlink" title="1.1.3  动函数添加回调函数"></a>1.1.3  动函数添加回调函数</h3><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p><p>回调函数写的位置：定时器结束的位置。</p><h3 id="1-1-4-动画完整版代码"><a href="#1-1-4-动画完整版代码" class="headerlink" title="1.1.4  动画完整版代码:"></a>1.1.4  动画完整版代码:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params">obj, target, callback</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span><br><br>    <span class="hljs-comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span><br>    <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>    obj.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 步长值写到定时器的里面</span><br>        <span class="hljs-comment">// 把我们步长值改为整数 不要出现小数的问题</span><br>        <span class="hljs-comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span><br>        <span class="hljs-keyword">var</span> step = (target - obj.offsetLeft) / <span class="hljs-number">10</span>;<br>        step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.ceil(step) : <span class="hljs-built_in">Math</span>.floor(step);<br>        <span class="hljs-keyword">if</span> (obj.offsetLeft == target) &#123;<br>            <span class="hljs-comment">// 停止动画 本质是停止定时器</span><br>            <span class="hljs-built_in">clearInterval</span>(obj.timer);<br>            <span class="hljs-comment">// 回调函数写到定时器结束里面</span><br>            <span class="hljs-comment">// if (callback) &#123;</span><br>            <span class="hljs-comment">//     // 调用函数</span><br>            <span class="hljs-comment">//     callback();</span><br>            <span class="hljs-comment">// &#125;</span><br>            callback &amp;&amp; callback();<br>        &#125;<br>        <span class="hljs-comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span><br>        obj.style.left = obj.offsetLeft + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>    &#125;, <span class="hljs-number">15</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-常见网页特效案例"><a href="#1-2-常见网页特效案例" class="headerlink" title="1.2. 常见网页特效案例"></a>1.2. 常见网页特效案例</h2><h3 id="1-2-1-案例：网页轮播图"><a href="#1-2-1-案例：网页轮播图" class="headerlink" title="1.2.1 案例：网页轮播图"></a>1.2.1 案例：网页轮播图</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p><p>功能需求：</p><p>​    1.鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</p><p>​    2.点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</p><p>​    3.图片播放的同时，下面小圆圈模块跟随一起变化。</p><p>​    4.点击小圆圈，可以播放相应图片。</p><p>​    5.鼠标不经过轮播图，轮播图也会自动播放图片。</p><p>​    6.鼠标经过，轮播图模块， 自动播放停止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 1. 获取元素</span><br>    <span class="hljs-keyword">var</span> arrow_l = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.arrow-l&#x27;</span>);<br>    <span class="hljs-keyword">var</span> arrow_r = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.arrow-r&#x27;</span>);<br>    <span class="hljs-keyword">var</span> focus = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.focus&#x27;</span>);<br>    <span class="hljs-keyword">var</span> focusWidth = focus.offsetWidth;<br>    <span class="hljs-comment">// 2. 鼠标经过focus 就显示隐藏左右按钮</span><br>    focus.addEventListener(<span class="hljs-string">&#x27;mouseenter&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        arrow_l.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        arrow_r.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        <span class="hljs-built_in">clearInterval</span>(timer);<br>        timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 清除定时器变量</span><br>    &#125;);<br>    focus.addEventListener(<span class="hljs-string">&#x27;mouseleave&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        arrow_l.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        arrow_r.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//手动调用点击事件</span><br>            arrow_r.click();<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;);<br>    <span class="hljs-comment">// 3. 动态生成小圆圈  有几张图片，我就生成几个小圆圈</span><br>    <span class="hljs-keyword">var</span> ul = focus.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">var</span> ol = focus.querySelector(<span class="hljs-string">&#x27;.circle&#x27;</span>);<br>    <span class="hljs-comment">// console.log(ul.children.length);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ul.children.length; i++) &#123;<br>        <span class="hljs-comment">// 创建一个小li </span><br>        <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>        <span class="hljs-comment">// 记录当前小圆圈的索引号 通过自定义属性来做 </span><br>        li.setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>, i);<br>        <span class="hljs-comment">// 把小li插入到ol 里面</span><br>        ol.appendChild(li);<br>        <span class="hljs-comment">// 4. 小圆圈的排他思想 我们可以直接在生成小圆圈的同时直接绑定点击事件</span><br>        li.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 干掉所有人 把所有的小li 清除 current 类名</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ol.children.length; i++) &#123;<br>                ol.children[i].className = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 留下我自己  当前的小li 设置current 类名</span><br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>            <span class="hljs-comment">// 5. 点击小圆圈，移动图片 当然移动的是 ul </span><br>            <span class="hljs-comment">// ul 的移动距离 小圆圈的索引号 乘以 图片的宽度 注意是负值</span><br>            <span class="hljs-comment">// 当我们点击了某个小li 就拿到当前小li 的索引号</span><br>            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>);<br>            <span class="hljs-comment">// 当我们点击了某个小li 就要把这个li 的索引号给 num  </span><br>            num = index;<br>            <span class="hljs-comment">// 当我们点击了某个小li 就要把这个li 的索引号给 circle  </span><br>            circle = index;<br>            <span class="hljs-comment">// num = circle = index;</span><br>            <span class="hljs-built_in">console</span>.log(focusWidth);<br>            <span class="hljs-built_in">console</span>.log(index);<br><br>            animate(ul, -index * focusWidth);<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 把ol里面的第一个小li设置类名为 current</span><br>    ol.children[<span class="hljs-number">0</span>].className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>    <span class="hljs-comment">// 6. 克隆第一张图片(li)放到ul 最后面</span><br>    <span class="hljs-keyword">var</span> first = ul.children[<span class="hljs-number">0</span>].cloneNode(<span class="hljs-literal">true</span>);<br>    ul.appendChild(first);<br>    <span class="hljs-comment">// 7. 点击右侧按钮， 图片滚动一张</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// circle 控制小圆圈的播放</span><br>    <span class="hljs-keyword">var</span> circle = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// flag 节流阀</span><br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>    arrow_r.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 关闭节流阀</span><br>            <span class="hljs-comment">// 如果走到了最后复制的一张图片，此时 我们的ul 要快速复原 left 改为 0</span><br>            <span class="hljs-keyword">if</span> (num == ul.children.length - <span class="hljs-number">1</span>) &#123;<br>                ul.style.left = <span class="hljs-number">0</span>;<br>                num = <span class="hljs-number">0</span>;<br>            &#125;<br>            num++;<br>            animate(ul, -num * focusWidth, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 打开节流阀</span><br>            &#125;);<br>            <span class="hljs-comment">// 8. 点击右侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br>            circle++;<br>            <span class="hljs-comment">// 如果circle == 4 说明走到最后我们克隆的这张图片了 我们就复原</span><br>            <span class="hljs-keyword">if</span> (circle == ol.children.length) &#123;<br>                circle = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 调用函数</span><br>            circleChange();<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 9. 左侧按钮做法</span><br>    arrow_l.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>                num = ul.children.length - <span class="hljs-number">1</span>;<br>                ul.style.left = -num * focusWidth + <span class="hljs-string">&#x27;px&#x27;</span>;<br><br>            &#125;<br>            num--;<br>            animate(ul, -num * focusWidth, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;);<br>            <span class="hljs-comment">// 点击左侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span><br>            circle--;<br>            <span class="hljs-comment">// 如果circle &lt; 0  说明第一张图片，则小圆圈要改为第4个小圆圈（3）</span><br>            <span class="hljs-comment">// if (circle &lt; 0) &#123;</span><br>            <span class="hljs-comment">//     circle = ol.children.length - 1;</span><br>            <span class="hljs-comment">// &#125;</span><br>            circle = circle &lt; <span class="hljs-number">0</span> ? ol.children.length - <span class="hljs-number">1</span> : circle;<br>            <span class="hljs-comment">// 调用函数</span><br>            circleChange();<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">circleChange</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 先清除其余小圆圈的current类名</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ol.children.length; i++) &#123;<br>            ol.children[i].className = <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 留下当前的小圆圈的current类名</span><br>        ol.children[circle].className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 10. 自动播放轮播图</span><br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//手动调用点击事件</span><br>        arrow_r.click();<br>    &#125;, <span class="hljs-number">2000</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-2-2-节流阀"><a href="#1-2-2-节流阀" class="headerlink" title="1.2.2. 节流阀"></a>1.2.2. 节流阀</h3><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</p><p> 开始设置一个变量var flag= true;</p><p>If(flag){flag = false; do something}       关闭水龙头</p><p>利用回调函数动画执行完毕， flag = true     打开水龙头</p><h3 id="1-2-3-案例：返回顶部"><a href="#1-2-3-案例：返回顶部" class="headerlink" title="1.2.3. 案例：返回顶部"></a>1.2.3. 案例：返回顶部</h3><ol><li>带有动画的返回顶部</li><li>此时可以继续使用我们封装的动画函数</li><li>只需要把所有的left 相关的值改为 跟 页面垂直滚动距离相关就可以了</li><li>页面滚动了多少，可以通过 window.pageYOffset 得到</li><li>最后是页面滚动，使用 window.scroll(x,y) </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 获取元素</span><br>      <span class="hljs-keyword">var</span> sliderbar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.slider-bar&#x27;</span>);<br>      <span class="hljs-keyword">var</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.banner&#x27;</span>);<br>      <span class="hljs-comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span><br>      <span class="hljs-keyword">var</span> bannerTop = banner.offsetTop<br>          <span class="hljs-comment">// 当我们侧边栏固定定位之后应该变化的数值</span><br>      <span class="hljs-keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;<br>      <span class="hljs-comment">// 获取main 主体元素</span><br>      <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.main&#x27;</span>);<br>      <span class="hljs-keyword">var</span> goBack = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.goBack&#x27;</span>);<br>      <span class="hljs-keyword">var</span> mainTop = main.offsetTop;<br>      <span class="hljs-comment">// 2. 页面滚动事件 scroll</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// console.log(11);</span><br>              <span class="hljs-comment">// window.pageYOffset 页面被卷去的头部</span><br>              <span class="hljs-comment">// console.log(window.pageYOffset);</span><br>              <span class="hljs-comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;<br>                  sliderbar.style.position = <span class="hljs-string">&#x27;fixed&#x27;</span>;<br>                  sliderbar.style.top = sliderbarTop + <span class="hljs-string">&#x27;px&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  sliderbar.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br>                  sliderbar.style.top = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>              &#125;<br>              <span class="hljs-comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.pageYOffset &gt;= mainTop) &#123;<br>                  goBack.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  goBack.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>              &#125;<br><br>          &#125;)<br>          <span class="hljs-comment">// 3. 当我们点击了返回顶部模块，就让窗口滚动的页面的最上方</span><br>      goBack.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 里面的x和y 不跟单位的 直接写数字即可</span><br>          <span class="hljs-comment">// window.scroll(0, 0);</span><br>          <span class="hljs-comment">// 因为是窗口滚动 所以对象是window</span><br>          animate(<span class="hljs-built_in">window</span>, <span class="hljs-number">0</span>);<br>      &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="1-2-4-案例：筋头云案例"><a href="#1-2-4-案例：筋头云案例" class="headerlink" title="1.2.4. 案例：筋头云案例"></a>1.2.4. 案例：筋头云案例</h3><ol><li>利用动画函数做动画效果</li><li>原先筋斗云的起始位置是0</li><li>鼠标经过某个小li，把当前小li的offsetLeft 位置做为目标值即可</li><li>鼠标离开某个小li，就把目标值设为 0</li><li>如果点击了某个小li， 就把li当前的位置存储起来，做为筋斗云的起始位置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-comment">// 1. 获取元素</span><br>           <span class="hljs-keyword">var</span> cloud = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.cloud&#x27;</span>);<br>           <span class="hljs-keyword">var</span> c_nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.c-nav&#x27;</span>);<br>           <span class="hljs-keyword">var</span> lis = c_nav.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>           <span class="hljs-comment">// 2. 给所有的小li绑定事件 </span><br>           <span class="hljs-comment">// 这个current 做为筋斗云的起始位置</span><br>           <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>               <span class="hljs-comment">// (1) 鼠标经过把当前小li 的位置做为目标值</span><br>               lis[i].addEventListener(<span class="hljs-string">&#x27;mouseenter&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   animate(cloud, <span class="hljs-built_in">this</span>.offsetLeft);<br>               &#125;);<br>               <span class="hljs-comment">// (2) 鼠标离开就回到起始的位置 </span><br>               lis[i].addEventListener(<span class="hljs-string">&#x27;mouseleave&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   animate(cloud, current);<br>               &#125;);<br>               <span class="hljs-comment">// (3) 当我们鼠标点击，就把当前位置做为目标值</span><br>               lis[i].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   current = <span class="hljs-built_in">this</span>.offsetLeft;<br>               &#125;);<br>           &#125;<br>       &#125;)<br><br></code></pre></td></tr></table></figure><h2 id="1-3-触屏事件"><a href="#1-3-触屏事件" class="headerlink" title="1.3. 触屏事件"></a>1.3. 触屏事件</h2><h3 id="1-3-1-触屏事件概述"><a href="#1-3-1-触屏事件概述" class="headerlink" title="1.3.1. 触屏事件概述"></a>1.3.1. 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android和 IOS 都有。</p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h3 id="1-3-2-触摸事件对象（TouchEvent）"><a href="#1-3-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.3.2. 触摸事件对象（TouchEvent）"></a>1.3.2. 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="images%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p><blockquote><p><code>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</code></p></blockquote><h3 id="1-3-3-案例：移动端拖动元素"><a href="#1-3-3-案例：移动端拖动元素" class="headerlink" title="1.3.3.案例：移动端拖动元素"></a>1.3.3.案例：移动端拖动元素</h3><ol><li><p>touchstart、touchmove、touchend可以实现拖动元素</p></li><li><p>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </p></li><li><p>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</p></li><li><p>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</p><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><p><code>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</code></p><p>​</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第三天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day03-Web-APIs"><a href="#day03-Web-APIs" class="headerlink" title="day03 - Web APIs"></a>day03 - Web APIs</h1><h2 id="1-1-节点操作"><a href="#1-1-节点操作" class="headerlink" title="1.1. 节点操作"></a>1.1. 节点操作</h2><h3 id="1-1-1-删除节点"><a href="#1-1-1-删除节点" class="headerlink" title="1.1.1 删除节点"></a>1.1.1 删除节点</h3><p><img src="images/1551163384254.png" alt="1551163384254"></p><p>node.removeChild() 方法从 node节点中删除一个子节点，返回删除的节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;删除&lt;/button&gt;<br>&lt;ul&gt;<br>    &lt;li&gt;熊大&lt;/li&gt;<br>    &lt;li&gt;熊二&lt;/li&gt;<br>    &lt;li&gt;光头强&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1.获取元素</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// 2. 删除元素  node.removeChild(child)</span><br>    <span class="hljs-comment">// ul.removeChild(ul.children[0]);</span><br>    <span class="hljs-comment">// 3. 点击按钮依次删除里面的孩子</span><br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (ul.children.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ul.removeChild(ul.children[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-2-案例：删除留言"><a href="#1-1-2-案例：删除留言" class="headerlink" title="1.1.2 案例：删除留言"></a>1.1.2 案例：删除留言</h3><p><img src="images/1551163586475.png" alt="1551163586475"></p><p><img src="images/1551163635501.png" alt="1551163635501"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;textarea name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/textarea&gt;<br>&lt;button&gt;发布&lt;/button&gt;<br>&lt;ul&gt;<br><br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取元素</span><br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-comment">// 2. 注册事件</span><br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (text.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            alert(<span class="hljs-string">&#x27;您没有输入内容&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// console.log(text.value);</span><br>            <span class="hljs-comment">// (1) 创建元素</span><br>            <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>            <span class="hljs-comment">// 先有li 才能赋值</span><br>            li.innerHTML = text.value + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>            <span class="hljs-comment">// (2) 添加元素</span><br>            <span class="hljs-comment">// ul.appendChild(li);</span><br>            ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>            <span class="hljs-comment">// (3) 删除元素 删除的是当前链接的li  它的父亲</span><br>            <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>                <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-comment">// 删除的是 li 当前a所在的li  this.parentNode;</span><br>                    ul.removeChild(<span class="hljs-built_in">this</span>.parentNode);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-3-复制（克隆）节点"><a href="#1-1-3-复制（克隆）节点" class="headerlink" title="1.1.3 复制（克隆）节点"></a>1.1.3 复制（克隆）节点</h3><p><img src="images/1551163763825.png" alt="1551163763825"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;<span class="hljs-number">1111</span>&lt;/li&gt;<br>    &lt;li&gt;<span class="hljs-number">2</span>&lt;/li&gt;<br>    &lt;li&gt;<span class="hljs-number">3</span>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span><br>    <span class="hljs-comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span><br>    <span class="hljs-keyword">var</span> lili = ul.children[<span class="hljs-number">0</span>].cloneNode(<span class="hljs-literal">true</span>);<br>    ul.appendChild(lili);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：动态生成表格"><a href="#1-1-4-案例：动态生成表格" class="headerlink" title="1.1.4 案例：动态生成表格"></a>1.1.4 案例：动态生成表格</h3><p><img src="images/1551163900675.png" alt="1551163900675"></p><p><img src="images/1551163924396.png" alt="1551163924396"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;script&gt;<br>      <span class="hljs-comment">// 1.先去准备好学生的数据</span><br>      <span class="hljs-keyword">var</span> datas = [&#123;<br>          name: <span class="hljs-string">&#x27;魏璎珞&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">100</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;弘历&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">98</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;傅恒&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">99</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;明玉&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">88</span><br>      &#125;, &#123;<br>          name: <span class="hljs-string">&#x27;大猪蹄子&#x27;</span>,<br>          subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>          score: <span class="hljs-number">0</span><br>      &#125;];<br>      <span class="hljs-comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span><br>      <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>);<br><span class="hljs-comment">// 遍历数组</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; datas.length; i++) &#123; <br>          <span class="hljs-comment">// 1. 创建 tr行</span><br>          <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>          tbody.appendChild(tr);<br>          <span class="hljs-comment">// 2. 行里面创建单元格td 单元格的数量取决于每个对象里面的属性个数  </span><br>          <span class="hljs-comment">// 使用for in遍历学生对象</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> datas[i]) &#123; <br>              <span class="hljs-comment">// 创建单元格 </span><br>              <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>);<br>              <span class="hljs-comment">// 把对象里面的属性值 datas[i][k] 给 td  </span><br>              td.innerHTML = datas[i][k];<br>              tr.appendChild(td);<br>          &#125;<br>          <span class="hljs-comment">// 3. 创建有删除2个字的单元格 </span><br>          <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>);<br>          td.innerHTML = <span class="hljs-string">&#x27;&lt;a href=&quot;javascript:;&quot;&gt;删除 &lt;/a&gt;&#x27;</span>;<br>          tr.appendChild(td);<br><br>      &#125;<br>      <span class="hljs-comment">// 4. 删除操作 开始 </span><br>      <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>          <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// 点击a 删除 当前a 所在的行(链接的爸爸的爸爸)  node.removeChild(child)  </span><br>              tbody.removeChild(<span class="hljs-built_in">this</span>.parentNode.parentNode)<br>          &#125;<br>      &#125;<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-5-创建元素的三种方式"><a href="#1-1-5-创建元素的三种方式" class="headerlink" title="1.1.5 创建元素的三种方式"></a>1.1.5 创建元素的三种方式</h3><p><img src="images/1551164214925.png" alt="1551164214925"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 三种创建元素方式区别 </span><br>    <span class="hljs-comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span><br>     <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>     btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>);<br>     &#125;<br><br>    <span class="hljs-comment">// 2. innerHTML 创建元素</span><br>    <span class="hljs-keyword">var</span> inner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.inner&#x27;</span>);<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>         inner.innerHTML += <span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span><br>     &#125;<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        arr.push(<span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);<br>    &#125;<br>    inner.innerHTML = arr.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-comment">// 3. document.createElement() 创建元素</span><br>    <span class="hljs-keyword">var</span> create = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.create&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        create.appendChild(a);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-6-innerTHML和createElement效率对比"><a href="#1-1-6-innerTHML和createElement效率对比" class="headerlink" title="1.1.6 innerTHML和createElement效率对比"></a>1.1.6 innerTHML和createElement效率对比</h3><p><strong>innerHTML字符串拼接方式（效率低）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-built_in">document</span>.body.innerHTML += <span class="hljs-string">&#x27;&lt;div style=&quot;width:100px; height:2px; border:1px solid blue;&quot;&gt;&lt;/div&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-built_in">console</span>.log(d2 - d1);<br>    &#125;<br>    fn();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>createElement方式（效率一般）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>            div.style.width = <span class="hljs-string">&#x27;100px&#x27;</span>;<br>            div.style.height = <span class="hljs-string">&#x27;2px&#x27;</span>;<br>            div.style.border = <span class="hljs-string">&#x27;1px solid red&#x27;</span>;<br>            <span class="hljs-built_in">document</span>.body.appendChild(div);<br>        &#125;<br>        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-built_in">console</span>.log(d2 - d1);<br>    &#125;<br>    fn();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>innerHTML数组方式（效率高）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> d1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-keyword">var</span> array = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            array.push(<span class="hljs-string">&#x27;&lt;div style=&quot;width:100px; height:2px; border:1px solid blue;&quot;&gt;&lt;/div&gt;&#x27;</span>);<br>        &#125;<br>        <span class="hljs-built_in">document</span>.body.innerHTML = array.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">var</span> d2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        <span class="hljs-built_in">console</span>.log(d2 - d1);<br>    &#125;<br>    fn();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-DOM的核心总结"><a href="#1-2-DOM的核心总结" class="headerlink" title="1.2. DOM的核心总结"></a>1.2. DOM的核心总结</h2><p><img src="images/1551164669434.png" alt="1551164669434"></p><p><img src="images/1551164715018.png" alt="1551164715018"></p><p>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p><h3 id="1-2-1-创建"><a href="#1-2-1-创建" class="headerlink" title="1.2.1. 创建"></a>1.2.1. 创建</h3><p><img src="images/1551164797164.png" alt="1551164797164"></p><h3 id="1-2-2-增加"><a href="#1-2-2-增加" class="headerlink" title="1.2.2. 增加"></a>1.2.2. 增加</h3><p><img src="images/1551164829832.png" alt="1551164829832"></p><h3 id="1-2-3-删"><a href="#1-2-3-删" class="headerlink" title="1.2.3. 删"></a>1.2.3. 删</h3><p><img src="images/1551164872533.png" alt="1551164872533"></p><h3 id="1-2-4-改"><a href="#1-2-4-改" class="headerlink" title="1.2.4. 改"></a>1.2.4. 改</h3><p><img src="images/1551164907830.png" alt="1551164907830"></p><h3 id="1-2-5-查"><a href="#1-2-5-查" class="headerlink" title="1.2.5. 查"></a>1.2.5. 查</h3><p><img src="images/1551164936214.png" alt="1551164936214"></p><h3 id="1-2-6-属性操作"><a href="#1-2-6-属性操作" class="headerlink" title="1.2.6. 属性操作"></a>1.2.6. 属性操作</h3><p><img src="images/1551164985383.png" alt="1551164985383"></p><h3 id="1-2-7-事件操作（重点）"><a href="#1-2-7-事件操作（重点）" class="headerlink" title="1.2.7. 事件操作（重点）"></a>1.2.7. 事件操作（重点）</h3><h2 id="1-3-事件高级"><a href="#1-3-事件高级" class="headerlink" title="1.3. 事件高级"></a>1.3. 事件高级</h2><h3 id="1-3-1-注册事件（2种方式）"><a href="#1-3-1-注册事件（2种方式）" class="headerlink" title="1.3.1. 注册事件（2种方式）"></a>1.3.1. 注册事件（2种方式）</h3><p><img src="images/1551165252019.png" alt="1551165252019"></p><h3 id="1-3-2-事件监听"><a href="#1-3-2-事件监听" class="headerlink" title="1.3.2 事件监听"></a>1.3.2 事件监听</h3><h4 id="addEventListener-事件监听（IE9以后支持）"><a href="#addEventListener-事件监听（IE9以后支持）" class="headerlink" title="addEventListener()事件监听（IE9以后支持）"></a>addEventListener()事件监听（IE9以后支持）</h4><p><img src="images/1551165364122.png" alt="1551165364122"></p><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p><img src="images/1551165604792.png" alt="1551165604792"></p><h4 id="attacheEvent-事件监听（IE678支持）"><a href="#attacheEvent-事件监听（IE678支持）" class="headerlink" title="attacheEvent()事件监听（IE678支持）"></a>attacheEvent()事件监听（IE678支持）</h4><p><img src="images/1551165781836.png" alt="1551165781836"></p><p>​    eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p><img src="images/1551165843912.png" alt="1551165843912"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;传统注册事件&lt;/button&gt;<br>&lt;button&gt;方法监听注册事件&lt;/button&gt;<br>&lt;button&gt;ie9 attachEvent&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// 1. 传统方式注册事件</span><br>    btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">&#x27;hao a u&#x27;</span>);<br>        &#125;<br>   <span class="hljs-comment">// 2. 事件侦听注册事件 addEventListener </span><br>   <span class="hljs-comment">// (1) 里面的事件类型是字符串 必定加引号 而且不带on</span><br>   <span class="hljs-comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span><br>    btns[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">22</span>);<br>    &#125;)<br>    btns[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-number">33</span>);<br>    &#125;)<br>    <span class="hljs-comment">// 3. attachEvent ie9以前的版本支持</span><br>    btns[<span class="hljs-number">2</span>].attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">11</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="事件监听兼容性解决方案"><a href="#事件监听兼容性解决方案" class="headerlink" title="事件监听兼容性解决方案"></a>事件监听兼容性解决方案</h4><p>封装一个函数，函数中判断浏览器的类型：</p><p><img src="images/1551166023885.png" alt="1551166023885"></p><h3 id="1-3-3-删除事件（解绑事件）"><a href="#1-3-3-删除事件（解绑事件）" class="headerlink" title="1.3.3. 删除事件（解绑事件）"></a>1.3.3. 删除事件（解绑事件）</h3><p><img src="images/1551166185410.png" alt="1551166185410"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>&lt;div&gt;<span class="hljs-number">2</span>&lt;/div&gt;<br>&lt;div&gt;<span class="hljs-number">3</span>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    divs[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">11</span>);<br>        <span class="hljs-comment">// 1. 传统方式删除事件</span><br>        divs[<span class="hljs-number">0</span>].onclick = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2. removeEventListener 删除事件</span><br>    divs[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn) <span class="hljs-comment">// 里面的fn 不需要调用加小括号</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">22</span>);<br>        divs[<span class="hljs-number">1</span>].removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn);<br>    &#125;<br>    <span class="hljs-comment">// 3. detachEvent</span><br>    divs[<span class="hljs-number">2</span>].attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, fn1);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">33</span>);<br>        divs[<span class="hljs-number">2</span>].detachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, fn1);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>**删除事件兼容性解决方案 **</p><p><img src="images/1551166332453.png" alt="1551166332453"></p><h3 id="1-3-4-DOM事件流"><a href="#1-3-4-DOM事件流" class="headerlink" title="1.3.4. DOM事件流"></a>1.3.4. DOM事件流</h3><blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">html中的标签都是相互嵌套的，我们可以将元素想象成一个盒子装一个盒子，document是最外面的大盒子。<br>当你单击一个<span class="hljs-keyword">div</span>时，同时你也单击了<span class="hljs-keyword">div</span>的父元素，甚至整个页面。<br><br>那么是先执行父元素的单击事件，还是先执行<span class="hljs-keyword">div</span>的单击事件 ？？？<br></code></pre></td></tr></table></figure><p><img src="images/1551166423144.png" alt="1551166423144"></p></blockquote><blockquote><p>比如：我们给页面中的一个div注册了单击事件，当你单击了div时，也就单击了body，单击了html，单击了document。</p></blockquote><p><img src="images/1551166555833.png" alt="1551166555833"></p><p><img src="images/1551166581552.png" alt="1551166581552"></p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">当时的<span class="hljs-number">2</span>大浏览器霸主谁也不服谁！<br>IE 提出从目标元素开始，然后一层一层向外接收事件并响应，也就是冒泡型事件流。<br>Netscape（网景公司）提出从最外层开始，然后一层一层向内接收事件并响应，也就是捕获型事件流。<br><br>江湖纷争，武林盟主也脑壳疼！！！<br><br>最终，w3c 采用折中的方式，平息了战火，制定了统一的标准 —<span class="hljs-comment">--— 先捕获再冒泡。</span><br>现代浏览器都遵循了此标准，所以当事件发生时，会经历<span class="hljs-number">3</span>个阶段。<br></code></pre></td></tr></table></figure><p>DOM 事件流会经历3个阶段： </p></blockquote><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段 </p></li></ol><p>​    我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。 </p><p><img src="images/1551169007768.png" alt="1551169007768"></p><p><img src="images/1551169042295.png" alt="1551169042295"></p><p><strong>事件冒泡</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;son盒子&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// onclick 和 attachEvent（ie） 在冒泡阶段触发</span><br>      <span class="hljs-comment">// 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 </span><br>      <span class="hljs-comment">// son -&gt; father -&gt;body -&gt; html -&gt; document</span><br>      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>);<br><span class="hljs-comment">// 给son注册单击事件</span><br>      son.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;son&#x27;</span>);<br>      &#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 给father注册单击事件</span><br>      <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.father&#x27;</span>);<br>      father.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;father&#x27;</span>);<br>      &#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 给document注册单击事件，省略第3个参数</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;document&#x27;</span>);<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>事件捕获</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;son盒子&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// 如果addEventListener() 第三个参数是 true 那么在捕获阶段触发</span><br>      <span class="hljs-comment">// document -&gt; html -&gt; body -&gt; father -&gt; son</span><br>       <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>);<br><span class="hljs-comment">// 给son注册单击事件，第3个参数为true</span><br>       son.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           alert(<span class="hljs-string">&#x27;son&#x27;</span>);<br>       &#125;, <span class="hljs-literal">true</span>);<br>       <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.father&#x27;</span>);<br><span class="hljs-comment">// 给father注册单击事件，第3个参数为true</span><br>       father.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           alert(<span class="hljs-string">&#x27;father&#x27;</span>);<br>       &#125;, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 给document注册单击事件，第3个参数为true</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;document&#x27;</span>);<br>      &#125;, <span class="hljs-literal">true</span>)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-5-事件对象"><a href="#1-3-5-事件对象" class="headerlink" title="1.3.5. 事件对象"></a>1.3.5. 事件对象</h3><h4 id="什么是事件对象"><a href="#什么是事件对象" class="headerlink" title="什么是事件对象"></a>什么是事件对象</h4><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p><p>比如：  </p><ol><li><p>谁绑定了这个事件。</p></li><li><p>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</p></li><li><p>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</p></li></ol><h4 id="事件对象的使用"><a href="#事件对象的使用" class="headerlink" title="事件对象的使用"></a>事件对象的使用</h4><p>事件触发发生时就会产生事件对象，并且系统会以实参的形式传给事件处理函数。</p><p>所以，在事件处理函数中声明1个形参用来接收事件对象。</p><p><img src="images/1551169537789.png" alt="1551169537789"></p><h4 id="事件对象的兼容性处理"><a href="#事件对象的兼容性处理" class="headerlink" title="事件对象的兼容性处理"></a>事件对象的兼容性处理</h4><p>事件对象本身的获取存在兼容问题：</p><ol><li><p>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</p></li><li><p>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p></li></ol><p><img src="images/1551169680823.png" alt="1551169680823"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">只要“||”前面为<span class="hljs-literal">false</span>, 不管“||”后面是<span class="hljs-literal">true</span> 还是 <span class="hljs-literal">false</span>，都返回 “||” 后面的值。<br>只要“||”前面为<span class="hljs-literal">true</span>, 不管“||”后面是<span class="hljs-literal">true</span> 还是 <span class="hljs-literal">false</span>，都返回 “||” 前面的值。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// 事件对象</span><br>            e = e || <span class="hljs-built_in">window</span>.event;<br>            <span class="hljs-built_in">console</span>.log(e);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h4><p><img src="images/1551169931778.png" alt="1551169931778"></p><h4 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h4><ul><li><p> this 是事件绑定的元素（绑定这个事件处理函数的元素） 。</p></li><li><p> e.target 是事件触发的元素。</p></li></ul><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">常情况下terget 和 <span class="hljs-keyword">this</span>是一致的，<br>但有一种情况不同，那就是在事件冒泡时（父子元素有相同事件，单击子元素，父元素的事件处理函数也会被触发执行），<br>这时候<span class="hljs-keyword">this</span>指向的是父元素，因为它是绑定事件的元素对象，<br>而target指向的是子元素，因为他是触发事件的那个具体元素对象。<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// e.target 和 this指向的都是div</span><br>        <span class="hljs-built_in">console</span>.log(e.target);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>事件冒泡下的e.target和this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;abc&lt;/li&gt;<br>    &lt;li&gt;abc&lt;/li&gt;<br>    &lt;li&gt;abc&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>          <span class="hljs-comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// ul</span><br><br>          <span class="hljs-comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span><br>          <span class="hljs-built_in">console</span>.log(e.target); <span class="hljs-comment">// li</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-6-阻止默认行为"><a href="#1-3-6-阻止默认行为" class="headerlink" title="1.3.6 阻止默认行为"></a>1.3.6 阻止默认行为</h3><blockquote><p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;百度&lt;/a&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 2. 阻止默认行为 让链接不跳转 </span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>         e.preventDefault(); <span class="hljs-comment">//  dom 标准写法</span><br>    &#125;);<br>    <span class="hljs-comment">// 3. 传统的注册方式</span><br>    a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// 普通浏览器 e.preventDefault();  方法</span><br>        e.preventDefault();<br>        <span class="hljs-comment">// 低版本浏览器 ie678  returnValue  属性</span><br>        e.returnValue = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-7-阻止事件冒泡"><a href="#1-3-7-阻止事件冒泡" class="headerlink" title="1.3.7 阻止事件冒泡"></a>1.3.7 阻止事件冒泡</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p><p><img src="images/1551171467194.png" alt="1551171467194"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;father&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;son&quot;</span>&gt;son儿子&lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>);<br><span class="hljs-comment">// 给son注册单击事件</span><br>      son.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;son&#x27;</span>);<br>          e.stopPropagation(); <span class="hljs-comment">// stop 停止  Propagation 传播</span><br>          <span class="hljs-built_in">window</span>.event.cancelBubble = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 非标准 cancel 取消 bubble 泡泡</span><br>      &#125;, <span class="hljs-literal">false</span>);<br><br>      <span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.father&#x27;</span>);<br><span class="hljs-comment">// 给father注册单击事件</span><br>      father.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;father&#x27;</span>);<br>      &#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 给document注册单击事件</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          alert(<span class="hljs-string">&#x27;document&#x27;</span>);<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>阻止事件冒泡的兼容性处理</strong></p><p><img src="images/1551171657513.png" alt="1551171657513"></p><h3 id="1-3-8-事件委托"><a href="#1-3-8-事件委托" class="headerlink" title="1.3.8 事件委托"></a>1.3.8 事件委托</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p><h4 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">把事情委托给别人，代为处理。<br></code></pre></td></tr></table></figure><p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p><blockquote><p>说白了就是，不给子元素注册事件，给父元素注册事件，把处理代码在父元素的事件中执行。</p></blockquote><p><strong>生活中的代理：</strong></p><p><img src="images/1551172082624.png" alt="1551172082624"></p><p><strong>js事件中的代理：</strong></p><p><img src="images/1551172159273.png" alt="1551172159273"></p><h4 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h4><p>​    给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p><h4 id="事件委托的作用"><a href="#事件委托的作用" class="headerlink" title="事件委托的作用"></a>事件委托的作用</h4><ul><li><p>我们只操作了一次 DOM ，提高了程序的性能。</p></li><li><p>动态新创建的子元素，也拥有事件。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>    &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span><br>        e.target.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-4-常用鼠标事件"><a href="#1-4-常用鼠标事件" class="headerlink" title="1.4. 常用鼠标事件"></a>1.4. 常用鼠标事件</h2><p><img src="images/1551172699854.png" alt="1551172699854"></p><h3 id="1-4-1-案例：禁止选中文字和禁止右键菜单"><a href="#1-4-1-案例：禁止选中文字和禁止右键菜单" class="headerlink" title="1.4.1 案例：禁止选中文字和禁止右键菜单"></a>1.4.1 案例：禁止选中文字和禁止右键菜单</h3><p><img src="images/1551172755484.png" alt="1551172755484"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    我是一段不愿意分享的文字<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                e.preventDefault();<br>        &#125;)<br>        <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            e.preventDefault();<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-2-鼠标事件对象"><a href="#1-4-2-鼠标事件对象" class="headerlink" title="1.4.2 鼠标事件对象"></a>1.4.2 鼠标事件对象</h3><p><img src="images/1551173103741.png" alt="1551173103741"></p><h3 id="1-4-3-获取鼠标在页面的坐标"><a href="#1-4-3-获取鼠标在页面的坐标" class="headerlink" title="1.4.3 获取鼠标在页面的坐标"></a>1.4.3 获取鼠标在页面的坐标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 鼠标事件对象 MouseEvent</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// 1. client 鼠标在可视区的x和y坐标</span><br>        <span class="hljs-built_in">console</span>.log(e.clientX);<br>        <span class="hljs-built_in">console</span>.log(e.clientY);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>        <span class="hljs-comment">// 2. page 鼠标在页面文档的x和y坐标</span><br>        <span class="hljs-built_in">console</span>.log(e.pageX);<br>        <span class="hljs-built_in">console</span>.log(e.pageY);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>        <span class="hljs-comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span><br>        <span class="hljs-built_in">console</span>.log(e.screenX);<br>        <span class="hljs-built_in">console</span>.log(e.screenY);<br><br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-4-案例：跟随鼠标的天使"><a href="#1-4-4-案例：跟随鼠标的天使" class="headerlink" title="1.4.4 案例：跟随鼠标的天使"></a>1.4.4 案例：跟随鼠标的天使</h3><p><img src="images/1551173172613.png" alt="1551173172613"></p><p><img src="images/1551173186812.png" alt="1551173186812"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;images/angel.gif&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> pic = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span><br>    <span class="hljs-comment">// 2.核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， </span><br>        <span class="hljs-comment">// 把这个x和y坐标做为图片的top和left 值就可以移动图片</span><br>    <span class="hljs-keyword">var</span> x = e.pageX;<br>    <span class="hljs-keyword">var</span> y = e.pageY;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;x坐标是&#x27;</span> + x, <span class="hljs-string">&#x27;y坐标是&#x27;</span> + y);<br>    <span class="hljs-comment">//3 . 千万不要忘记给left 和top 添加px 单位</span><br>    pic.style.left = x - <span class="hljs-number">50</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    pic.style.top = y - <span class="hljs-number">40</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第二天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day02-Web-APIs"><a href="#day02-Web-APIs" class="headerlink" title="day02 - Web APIs"></a>day02 - Web APIs</h1><h2 id="1-1-排他操作"><a href="#1-1-排他操作" class="headerlink" title="1.1. 排他操作"></a>1.1. 排他操作</h2><h3 id="1-1-1-排他思想"><a href="#1-1-1-排他思想" class="headerlink" title="1.1.1 排他思想"></a>1.1.1 排他思想</h3><p><img src="images/1550914482628.png" alt="1550914482628"></p><p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p><ol><li><p>所有元素全部清除样式（干掉其他人）</p></li><li><p>给当前元素设置样式 （留下我自己）</p></li><li><p>注意顺序不能颠倒，首先干掉其他人，再设置自己</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;按钮<span class="hljs-number">1</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">2</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">3</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">4</span>&lt;/button&gt;<br>&lt;button&gt;按钮<span class="hljs-number">5</span>&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取所有按钮元素</span><br>    <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>        btns[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>                btns[i].style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span><br>            <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br><br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-案例：百度换肤"><a href="#1-2-案例：百度换肤" class="headerlink" title="1.2 案例：百度换肤"></a>1.2 案例：百度换肤</h2><p><img src="images/1550914640677.png" alt="1550914640677"></p><p><img src="images/1550914663042.png" alt="1550914663042"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;baidu&quot;</span>&gt;<br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/1.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/2.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/3.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/4.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 获取元素 </span><br>        <span class="hljs-keyword">var</span> imgs = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.baidu&#x27;</span>).querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>);<br>        <span class="hljs-comment">// console.log(imgs);</span><br>        <span class="hljs-comment">// 2. 循环注册事件 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imgs.length; i++) &#123;<br>            imgs[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// this.src 就是我们点击图片的路径   images/2.jpg</span><br>                <span class="hljs-comment">// console.log(this.src);</span><br>                <span class="hljs-comment">// 把这个路径 this.src 给body 就可以了</span><br>                <span class="hljs-built_in">document</span>.body.style.backgroundImage = <span class="hljs-string">&#x27;url(&#x27;</span> + <span class="hljs-built_in">this</span>.src + <span class="hljs-string">&#x27;)&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="1-3-案例：表格隔行变色"><a href="#1-3-案例：表格隔行变色" class="headerlink" title="1.3 案例：表格隔行变色"></a>1.3 案例：表格隔行变色</h2><p><img src="images/1550914791881.png" alt="1550914791881"></p><p><img src="images/1550914812202.png" alt="1550914812202"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1.获取元素 获取的是 tbody 里面所有的行</span><br>    <span class="hljs-keyword">var</span> trs = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>).querySelectorAll(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>    <span class="hljs-comment">// 2. 利用循环绑定注册事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; trs.length; i++) &#123;<br>        <span class="hljs-comment">// 3. 鼠标经过事件 onmouseover</span><br>        trs[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">// console.log(11);</span><br>                <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;bg&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 4. 鼠标离开事件 onmouseout</span><br>        trs[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-4-案例：全选"><a href="#1-4-案例：全选" class="headerlink" title="1.4 案例：全选"></a>1.4 案例：全选</h2><p><img src="images/1550914980274.png" alt="1550914980274"></p><p><img src="images/1550915005393.png" alt="1550915005393"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1. 全选和取消全选做法：  让下面所有复选框的checked属性（选中状态） 跟随 全选按钮即可</span><br>    <span class="hljs-comment">// 获取元素</span><br>    <br>    <span class="hljs-keyword">var</span> j_cbAll = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;j_cbAll&#x27;</span>); <br>    <span class="hljs-keyword">var</span> j_tbs = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;j_tb&#x27;</span>).getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>); <br>    <span class="hljs-comment">// 全选按钮注册事件</span><br>    j_cbAll.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// this.checked 当前复选框的选中状态</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.checked);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;<br>                j_tbs[i].checked = <span class="hljs-built_in">this</span>.checked;<br>            &#125;<br>     &#125;<br>     <span class="hljs-comment">// 给所有的子复选框注册单击事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;<br>        j_tbs[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// flag 控制全选按钮是否选中</span><br>            <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; j_tbs.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (!j_tbs[i].checked) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>; <br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 设置全选按钮的状态</span><br>            j_cbAll.checked = flag;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-5-自定义属性操作"><a href="#1-5-自定义属性操作" class="headerlink" title="1.5. 自定义属性操作"></a>1.5. 自定义属性操作</h2><h3 id="1-5-1-获取属性值"><a href="#1-5-1-获取属性值" class="headerlink" title="1.5.1 获取属性值"></a>1.5.1 获取属性值</h3><p><img src="images/1550915376339.png" alt="1550915376339"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">   &lt;div id=<span class="hljs-string">&quot;demo&quot;</span> index=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;&lt;/div&gt;<br>   &lt;script&gt;<br>       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>       <span class="hljs-comment">// 1. 获取元素的属性值</span><br>       <span class="hljs-comment">// (1) element.属性</span><br>       <span class="hljs-built_in">console</span>.log(div.id);<br>       <span class="hljs-comment">//(2) element.getAttribute(&#x27;属性&#x27;)  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</span><br>       <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;id&#x27;</span>));<br>       <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-2-设置属性值"><a href="#1-5-2-设置属性值" class="headerlink" title="1.5.2. 设置属性值"></a>1.5.2. 设置属性值</h3><p><img src="images/1550915445026.png" alt="1550915445026"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2. 设置元素属性值</span><br><span class="hljs-comment">// (1) element.属性= &#x27;值&#x27;</span><br>div.id = <span class="hljs-string">&#x27;test&#x27;</span>;<br>div.className = <span class="hljs-string">&#x27;navs&#x27;</span>;<br><span class="hljs-comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span><br>div.setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-number">2</span>);<br>div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>); <span class="hljs-comment">// class 特殊  这里面写的就是</span><br></code></pre></td></tr></table></figure><h3 id="1-5-3-移出属性"><a href="#1-5-3-移出属性" class="headerlink" title="1.5.3. 移出属性"></a>1.5.3. 移出属性</h3><p><img src="images/1550915513137.png" alt="1550915513137"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// class 不是className</span><br>      <span class="hljs-comment">// 3 移除属性 removeAttribute(属性)    </span><br>      div.removeAttribute(<span class="hljs-string">&#x27;index&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-5-4-案例：tab栏"><a href="#1-5-4-案例：tab栏" class="headerlink" title="1.5.4. 案例：tab栏"></a>1.5.4. 案例：tab栏</h3><p><img src="images/1550915567627.png" alt="1550915567627"></p><p><img src="images/1550915590707.png" alt="1550915590707"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 获取元素</span><br>    <span class="hljs-keyword">var</span> tab_list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.tab_list&#x27;</span>);<br>    <span class="hljs-keyword">var</span> lis = tab_list.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-keyword">var</span> items = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;.item&#x27;</span>);<br>    <span class="hljs-comment">// for循环，给选项卡绑定点击事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>        <span class="hljs-comment">// 开始给5个小li 设置索引号 </span><br>        lis[i].setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>, i);<br>        lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. 上的模块选项卡，当前这一个底色会是红色，其余不变（排他思想）</span><br>            <span class="hljs-comment">// 干掉所有人 其余的li清除 class 这个类</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>                lis[i].className = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 留下我自己 </span><br>            <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;current&#x27;</span>;<br>            <span class="hljs-comment">// 2. 下面的显示内容模块</span><br>            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(index);<br>            <span class="hljs-comment">// 干掉所有人 让其余的item 这些div 隐藏</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>                items[i].style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125;<br>            <span class="hljs-comment">// 留下我自己 让对应的item 显示出来</span><br>            items[index].style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5-5-H5自定义属性"><a href="#1-5-5-H5自定义属性" class="headerlink" title="1.5.5. H5自定义属性"></a>1.5.5. H5自定义属性</h3><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p><p>自定义属性获取是通过getAttribute(‘属性’) 获取。</p><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p><p>H5给我们新增了自定义属性：</p><p><img src="images/1550915798516.png" alt="1550915798516"></p><p><img src="images/1550915815571.png" alt="1550915815571"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div getTime=<span class="hljs-string">&quot;20&quot;</span> data-index=<span class="hljs-string">&quot;2&quot;</span> data-list-name=<span class="hljs-string">&quot;andy&quot;</span>&gt;&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// console.log(div.getTime);</span><br>    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;getTime&#x27;</span>));<br>    div.setAttribute(<span class="hljs-string">&#x27;data-time&#x27;</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;data-index&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(div.getAttribute(<span class="hljs-string">&#x27;data-list-name&#x27;</span>));<br>    <span class="hljs-comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span><br>    <span class="hljs-comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span><br>    <span class="hljs-built_in">console</span>.log(div.dataset);<br>    <span class="hljs-built_in">console</span>.log(div.dataset.index);<br>    <span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">&#x27;index&#x27;</span>]);<br>    <span class="hljs-comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span><br>    <span class="hljs-built_in">console</span>.log(div.dataset.listName);<br>    <span class="hljs-built_in">console</span>.log(div.dataset[<span class="hljs-string">&#x27;listName&#x27;</span>]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-6-节点操作"><a href="#1-6-节点操作" class="headerlink" title="1.6. 节点操作"></a>1.6. 节点操作</h2><h3 id="1-6-1-节点概述"><a href="#1-6-1-节点概述" class="headerlink" title="1.6.1. 节点概述"></a>1.6.1. 节点概述</h3><p>​    网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>​    HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><p><img src="images/1550970944363.png" alt="1550970944363"></p><p>​    一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><p><img src="images/1550970986988.png" alt="1550970986988"></p><h3 id="1-6-2-节点层级"><a href="#1-6-2-节点层级" class="headerlink" title="1.6.2. 节点层级"></a>1.6.2. 节点层级</h3><p>​    利用 DOM 树可以把节点划分为不同的层级关系，常见的是<strong>父子兄层级关系</strong>。</p><p>​    <img src="images/1550971058781.png" alt="1550971058781"></p><h3 id="1-6-3-父级节点"><a href="#1-6-3-父级节点" class="headerlink" title="1.6.3. 父级节点"></a>1.6.3. 父级节点</h3><p><img src="images/1550971196686.png" alt="1550971196686"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;×&lt;/span&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 父节点 parentNode</span><br>    <span class="hljs-keyword">var</span> erweima = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.erweima&#x27;</span>);<br>    <span class="hljs-comment">// var box = document.querySelector(&#x27;.box&#x27;);</span><br>    <span class="hljs-comment">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span><br>    <span class="hljs-built_in">console</span>.log(erweima.parentNode);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-4-子节点"><a href="#1-6-4-子节点" class="headerlink" title="1.6.4. 子节点"></a>1.6.4. 子节点</h3><p><strong>所有子节点</strong></p><p><img src="images/1550971263925.png" alt="1550971263925"></p><p><strong>子元素节点</strong></p><p><img src="images/1550971325828.png" alt="1550971325828"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>    &lt;li&gt;我是li&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// DOM 提供的方法（API）获取</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">var</span> lis = ul.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span><br>    <span class="hljs-built_in">console</span>.log(ul.childNodes);<br>    <span class="hljs-built_in">console</span>.log(ul.childNodes[<span class="hljs-number">0</span>].nodeType);<br>    <span class="hljs-built_in">console</span>.log(ul.childNodes[<span class="hljs-number">1</span>].nodeType);<br>    <span class="hljs-comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span><br>    <span class="hljs-built_in">console</span>.log(ul.children);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>第1个子节点</strong></p><p><img src="images/1550971774758.png" alt="1550971774758"></p><p><strong>最后1个子节点</strong></p><p><img src="images/1550971825493.png" alt="1550971825493"></p><p><strong>第1个子元素节点</strong></p><p><img src="images/1550972014509.png" alt="1550972014509"></p><p><strong>最后1个子元素节点</strong></p><p><img src="images/1550972106485.png" alt="1550972106485"></p><p>​    实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p><p><img src="images/1550972648014.png" alt="1550972648014"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ol&gt;<br>    &lt;li&gt;我是li1&lt;/li&gt;<br>    &lt;li&gt;我是li2&lt;/li&gt;<br>    &lt;li&gt;我是li3&lt;/li&gt;<br>    &lt;li&gt;我是li4&lt;/li&gt;<br>    &lt;li&gt;我是li5&lt;/li&gt;<br>&lt;/ol&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> ol = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ol&#x27;</span>);<br>    <span class="hljs-comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span><br>    <span class="hljs-built_in">console</span>.log(ol.firstChild);<br>    <span class="hljs-built_in">console</span>.log(ol.lastChild);<br>    <span class="hljs-comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span><br>    <span class="hljs-built_in">console</span>.log(ol.firstElementChild);<br>    <span class="hljs-built_in">console</span>.log(ol.lastElementChild);<br>    <span class="hljs-comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span><br>    <span class="hljs-built_in">console</span>.log(ol.children[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">console</span>.log(ol.children[ol.children.length - <span class="hljs-number">1</span>]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-5-案例：新浪下拉菜单"><a href="#1-6-5-案例：新浪下拉菜单" class="headerlink" title="1.6.5. 案例：新浪下拉菜单"></a>1.6.5. 案例：新浪下拉菜单</h3><p><img src="images/1550974934894.png" alt="1550974934894"></p><p><img src="images/1550975025608.png" alt="1550975025608"></p><p><img src="images/1550975049176.png" alt="1550975049176"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取元素</span><br>    <span class="hljs-keyword">var</span> nav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.nav&#x27;</span>);<br>    <span class="hljs-keyword">var</span> lis = nav.children; <span class="hljs-comment">// 得到4个小li</span><br>    <span class="hljs-comment">// 2.循环注册事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.length; i++) &#123;<br>        lis[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.children[<span class="hljs-number">1</span>].style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>        &#125;<br>        lis[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.children[<span class="hljs-number">1</span>].style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-6-兄弟节点"><a href="#1-6-6-兄弟节点" class="headerlink" title="1.6.6. 兄弟节点"></a>1.6.6. 兄弟节点</h3><p><strong>下一个兄弟节点</strong></p><p><img src="../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973538696.png" alt="1550973538696"></p><p><strong>上一个兄弟节点</strong></p><p><img src="../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973558511.png" alt="1550973558511"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;我是div&lt;/div&gt;<br>&lt;span&gt;我是span&lt;/span&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span><br>    <span class="hljs-built_in">console</span>.log(div.nextSibling);<br>    <span class="hljs-built_in">console</span>.log(div.previousSibling);<br>    <span class="hljs-comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span><br>    <span class="hljs-built_in">console</span>.log(div.nextElementSibling);<br>    <span class="hljs-built_in">console</span>.log(div.previousElementSibling);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>下一个兄弟元素节点（有兼容性问题）</strong></p><p><img src="../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973610223.png" alt="1550973610223"></p><p><strong>上一个兄弟元素节点（有兼容性问题）</strong></p><p><img src="../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973630150.png" alt="1550973630150"></p><p><img src="../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973722805.png" alt="1550973722805"></p><p><img src="../../../../../%E5%A4%87%E8%AF%BE%E8%B5%84%E6%96%99/20190220-%E8%AF%BE%E4%BB%B6%E5%88%B6%E4%BD%9C/Web%20APIs/Web%20APIs-day02/4-%E7%AC%94%E8%AE%B0/images/1550973799759.png" alt="1550973799759"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNextElementSibling</span>(<span class="hljs-params">element</span>) </span>&#123;<br>   <span class="hljs-keyword">var</span> el = element;<br>   <span class="hljs-keyword">while</span> (el = el.nextSibling) &#123;<br>     <span class="hljs-keyword">if</span> (el.nodeType === <span class="hljs-number">1</span>) &#123;<br>         <span class="hljs-keyword">return</span> el;<br>     &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br> &#125;  <br></code></pre></td></tr></table></figure><h3 id="1-6-7-创建节点"><a href="#1-6-7-创建节点" class="headerlink" title="1.6.7. 创建节点"></a>1.6.7. 创建节点</h3><p><img src="images/1550975514321.png" alt="1550975514321"></p><h3 id="1-6-8-添加节点"><a href="#1-6-8-添加节点" class="headerlink" title="1.6.8. 添加节点"></a>1.6.8. 添加节点</h3><p><img src="images/1550975640170.png" alt="1550975640170"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    &lt;li&gt;<span class="hljs-number">123</span>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 创建节点元素节点</span><br>    <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素</span><br>    <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    ul.appendChild(li);<br>    <span class="hljs-comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span><br>    <span class="hljs-keyword">var</span> lili = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    ul.insertBefore(lili, ul.children[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-6-9-案例：简单版发布留言"><a href="#1-6-9-案例：简单版发布留言" class="headerlink" title="1.6.9. 案例：简单版发布留言"></a>1.6.9. 案例：简单版发布留言</h3><p><img src="images/1550975849302.png" alt="1550975849302"></p><p><img src="images/1550975887017.png" alt="1550975887017"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;textarea name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/textarea&gt;<br>    &lt;button&gt;发布&lt;/button&gt;<br>    &lt;ul&gt;<br><br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 获取元素</span><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>        <span class="hljs-comment">// 2. 注册事件</span><br>        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (text.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                alert(<span class="hljs-string">&#x27;您没有输入内容&#x27;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// console.log(text.value);</span><br>                <span class="hljs-comment">// (1) 创建元素</span><br>                <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>                <span class="hljs-comment">// 先有li 才能赋值</span><br>                li.innerHTML = text.value;<br>                <span class="hljs-comment">// (2) 添加元素</span><br>                <span class="hljs-comment">// ul.appendChild(li);</span><br>                ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API第四天</title>
    <link href="/2021/02/09/Web%20API%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <url>/2021/02/09/Web%20API%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="day04-Web-APIs"><a href="#day04-Web-APIs" class="headerlink" title="day04 - Web APIs"></a>day04 - Web APIs</h1><h2 id="1-1-常用的键盘事件"><a href="#1-1-常用的键盘事件" class="headerlink" title="1.1. 常用的键盘事件"></a>1.1. 常用的键盘事件</h2><h3 id="1-1-1-键盘事件"><a href="#1-1-1-键盘事件" class="headerlink" title="1.1.1 键盘事件"></a>1.1.1 键盘事件</h3><p><img src="images/1551318122855.png" alt="1551318122855"></p><p><img src="images/1551318160371.png" alt="1551318160371"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 常用的键盘事件</span><br>    <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我弹起了&#x27;</span>);<br>    &#125;)<br><br>    <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了press&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了down&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-2-键盘事件对象"><a href="#1-1-2-键盘事件对象" class="headerlink" title="1.1.2 键盘事件对象"></a>1.1.2 键盘事件对象</h3><p><img src="images/1551318355505.png" alt="1551318355505"></p><p><img src="images/1551318404238.png" alt="1551318404238"></p><p><strong>使用keyCode属性判断用户按下哪个键</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span><br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;up:&#x27;</span> + e.keyCode);<br>        <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span><br>        <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;<br>            alert(<span class="hljs-string">&#x27;您按下的a键&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            alert(<span class="hljs-string">&#x27;您没有按下a键&#x27;</span>)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(e);</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;press:&#x27;</span> + e.keyCode);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-3-案例：模拟京东按键输入内容"><a href="#1-1-3-案例：模拟京东按键输入内容" class="headerlink" title="1.1.3 案例：模拟京东按键输入内容"></a>1.1.3 案例：模拟京东按键输入内容</h3><p>当我们按下 s 键， 光标就定位到搜索框（文本框获得焦点）。</p><p><img src="images/1551318669520.png" alt="1551318669520"></p><blockquote><p>注意：触发获得焦点事件，可以使用 元素对象.focus()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// 获取输入框</span><br>      <span class="hljs-keyword">var</span> search = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-comment">// 给document注册keyup事件</span><br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>          <span class="hljs-comment">// 判断keyCode的值</span><br>          <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">83</span>) &#123;<br>              <span class="hljs-comment">// 触发输入框的获得焦点事件</span><br>              search.focus();<br>          &#125;<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-1-4-案例：模拟京东快递单号查询"><a href="#1-1-4-案例：模拟京东快递单号查询" class="headerlink" title="1.1.4 案例：模拟京东快递单号查询"></a>1.1.4 案例：模拟京东快递单号查询</h3><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p><p><img src="images/1551318882189.png" alt="1551318882189"></p><p><img src="images/1551318909264.png" alt="1551318909264"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;con&quot;</span>&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br>      &lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入您的快递单号&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jd&quot;</span>&gt;<br>  &lt;/div&gt;<br>  &lt;script&gt;<br>      <span class="hljs-comment">// 获取要操作的元素</span><br>      <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.con&#x27;</span>);<br>      <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.jd&#x27;</span>);<br><span class="hljs-comment">// 给输入框注册keyup事件</span><br>      jd_input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">// 判断输入框内容是否为空</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                  <span class="hljs-comment">// 为空，隐藏放大提示盒子</span><br>                  con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  <span class="hljs-comment">// 不为空，显示放大提示盒子，设置盒子的内容</span><br>                  con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>                  con.innerText = <span class="hljs-built_in">this</span>.value;<br>              &#125;<br>          &#125;)<br>      <span class="hljs-comment">// 给输入框注册失去焦点事件，隐藏放大提示盒子</span><br>      jd_input.addEventListener(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>          &#125;)<br>      <span class="hljs-comment">// 给输入框注册获得焦点事件</span><br>      jd_input.addEventListener(<span class="hljs-string">&#x27;focus&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 判断输入框内容是否为空</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>              <span class="hljs-comment">// 不为空则显示提示盒子</span><br>              con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>          &#125;<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-BOM"><a href="#1-2-BOM" class="headerlink" title="1.2. BOM"></a>1.2. BOM</h2><h3 id="1-2-1-什么是BOM"><a href="#1-2-1-什么是BOM" class="headerlink" title="1.2.1. 什么是BOM"></a>1.2.1. 什么是BOM</h3><p>​    BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。</p><p>​    BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><p>​    BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p><p><img src="images/1551319264407.png" alt="1551319264407"></p><h3 id="1-2-2-BOM的构成"><a href="#1-2-2-BOM的构成" class="headerlink" title="1.2.2. BOM的构成"></a>1.2.2. BOM的构成</h3><p>BOM 比 DOM 更大，它包含 DOM。</p><p><img src="images/1551319344183.png" alt="1551319344183"></p><h3 id="1-2-3-顶级对象window"><a href="#1-2-3-顶级对象window" class="headerlink" title="1.2.3. 顶级对象window"></a>1.2.3. 顶级对象window</h3><p><img src="images/1551319372909.png" alt="1551319372909"></p><h3 id="1-2-4-window对象的常见事件"><a href="#1-2-4-window对象的常见事件" class="headerlink" title="1.2.4. window对象的常见事件"></a>1.2.4. window对象的常见事件</h3><h4 id="页面（窗口）加载事件（2种）"><a href="#页面（窗口）加载事件（2种）" class="headerlink" title="页面（窗口）加载事件（2种）"></a>页面（窗口）加载事件（2种）</h4><p><strong>第1种</strong></p><p><img src="images/1551319525109.png" alt="1551319525109"></p><p>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p><p><img src="images/1551319600263.png" alt="1551319600263"></p><p><strong>第2种</strong></p><p><img src="images/1551319620299.png" alt="1551319620299"></p><p>​    DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p><p>​    IE9以上才支持！！！</p><p>​    如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">&#x27;点击我&#x27;</span>);<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">22</span>);<br>    &#125;)<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-number">33</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><p><img src="images/1551319803117.png" alt="1551319803117"></p><p>​    window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p><p>注意：</p><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件。</p></li><li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 注册页面加载事件</span><br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 注册调整窗口大小事件</span><br>        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// window.innerWidth 获取窗口大小</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;变化了&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.innerWidth &lt;= <span class="hljs-number">800</span>) &#123;<br>                div.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                div.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br>&lt;div&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-5-定时器（两种）"><a href="#1-2-5-定时器（两种）" class="headerlink" title="1.2.5. 定时器（两种）"></a>1.2.5. 定时器（两种）</h3><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p><ul><li><p>setTimeout() </p></li><li><p>setInterval()  </p></li></ul><h4 id="setTimeout-炸弹定时器"><a href="#setTimeout-炸弹定时器" class="headerlink" title="setTimeout() 炸弹定时器"></a>setTimeout() 炸弹定时器</h4><h5 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="images/1551320279307.png" alt="1551320279307"></p><p><img src="images/1551320408854.png" alt="1551320408854"></p><p><img src="images/1551320298981.png" alt="1551320298981"></p><blockquote><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs zephir">普通函数是按照代码顺序直接调用。<br><br>简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。<br>例如：定时器中的调用函数，事件处理函数，也是回调函数。<br><br>以前我们讲的   element.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;   或者  element.addEventListener(“click”, <span class="hljs-function"><span class="hljs-keyword">fn</span>)</span>;   里面的 函数也是回调函数。<br><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;script&gt;<br>      <span class="hljs-comment">// 回调函数是一个匿名函数</span><br>       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;时间到了&#x27;</span>);<br><br>       &#125;, <span class="hljs-number">2000</span>);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);<br>      &#125;<br><span class="hljs-comment">// 回调函数是一个有名函数</span><br>      <span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">3000</span>);<br>      <span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">5000</span>);<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="案例：5秒后关闭广告"><a href="#案例：5秒后关闭广告" class="headerlink" title="案例：5秒后关闭广告"></a>案例：5秒后关闭广告</h5><p><img src="images/1551320924828.png" alt="1551320924828"></p><p><img src="images/1551320959756.png" alt="1551320959756"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;img src=<span class="hljs-string">&quot;images/ad.jpg&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ad&quot;</span>&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 获取要操作的元素</span><br>        <span class="hljs-keyword">var</span> ad = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.ad&#x27;</span>);<br><span class="hljs-comment">// 开启定时器</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            ad.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>        &#125;, <span class="hljs-number">5000</span>);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="images/1551321051001.png" alt="1551321051001"></p><p><img src="images/1551321064154.png" alt="1551321064154"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;button&gt;点击停止定时器&lt;/button&gt;<br>  &lt;script&gt;<br>      <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-comment">// 开启定时器</span><br>      <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);<br>      &#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-comment">// 给按钮注册单击事件</span><br>      btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 停止定时器</span><br>          <span class="hljs-built_in">clearTimeout</span>(timer);<br>      &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="setInterval-闹钟定时器"><a href="#setInterval-闹钟定时器" class="headerlink" title="setInterval() 闹钟定时器"></a>setInterval() 闹钟定时器</h4><h5 id="开启定时器-1"><a href="#开启定时器-1" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="images/1551321162158.png" alt="1551321162158"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 1. setInterval </span><br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;继续输出&#x27;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h5><p><img src="images/1551321298787.png" alt="1551321298787"></p><p><img src="images/1551321322188.png" alt="1551321322188"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<br>    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hour&quot;</span>&gt;<span class="hljs-number">1</span>&lt;/span&gt;<br>    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;minute&quot;</span>&gt;<span class="hljs-number">2</span>&lt;/span&gt;<br>    &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;second&quot;</span>&gt;<span class="hljs-number">3</span>&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取元素（时分秒盒子） </span><br>    <span class="hljs-keyword">var</span> hour = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.hour&#x27;</span>); <span class="hljs-comment">// 小时的黑色盒子</span><br>    <span class="hljs-keyword">var</span> minute = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.minute&#x27;</span>); <span class="hljs-comment">// 分钟的黑色盒子</span><br>    <span class="hljs-keyword">var</span> second = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.second&#x27;</span>); <span class="hljs-comment">// 秒数的黑色盒子</span><br>    <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2019-5-1 18:00:00&#x27;</span>); <span class="hljs-comment">// 返回的是用户输入时间总的毫秒数</span><br><br>    countDown(); <span class="hljs-comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span><br><br>    <span class="hljs-comment">// 2. 开启定时器</span><br>    <span class="hljs-built_in">setInterval</span>(countDown, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 返回的是当前时间总的毫秒数</span><br>        <span class="hljs-keyword">var</span> times = (inputTime - nowTime) / <span class="hljs-number">1000</span>; <span class="hljs-comment">// times是剩余时间总的秒数 </span><br>        <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>); <span class="hljs-comment">//时</span><br>        h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + h : h;<br>        hour.innerHTML = h; <span class="hljs-comment">// 把剩余的小时给 小时黑色盒子</span><br>        <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>); <span class="hljs-comment">// 分</span><br>        m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m;<br>        minute.innerHTML = m;<br>        <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>); <span class="hljs-comment">// 当前的秒</span><br>        s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + s : s;<br>        second.innerHTML = s;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="停止定时器-1"><a href="#停止定时器-1" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="images/1551321444559.png" alt="1551321444559"></p><h4 id="案例：发送短信倒计时"><a href="#案例：发送短信倒计时" class="headerlink" title="案例：发送短信倒计时"></a>案例：发送短信倒计时</h4><p>​    点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信。</p><p><img src="images/1551321540676.png" alt="1551321540676"></p><p><img src="images/1551321564247.png" alt="1551321564247"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">  手机号码： &lt;input type=<span class="hljs-string">&quot;number&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;script&gt;<br>      <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-comment">// 全局变量，定义剩下的秒数</span><br>      <span class="hljs-keyword">var</span> time = <span class="hljs-number">3</span>; <br><span class="hljs-comment">// 注册单击事件</span><br>      btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 禁用按钮</span><br>          btn.disabled = <span class="hljs-literal">true</span>;<br>          <span class="hljs-comment">// 开启定时器</span><br>          <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// 判断剩余秒数</span><br>              <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>) &#123;<br>                  <span class="hljs-comment">// 清除定时器和复原按钮</span><br>                  <span class="hljs-built_in">clearInterval</span>(timer);<br>                  btn.disabled = <span class="hljs-literal">false</span>;<br>                  btn.innerHTML = <span class="hljs-string">&#x27;发送&#x27;</span>;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  btn.innerHTML = <span class="hljs-string">&#x27;还剩下&#x27;</span> + time + <span class="hljs-string">&#x27;秒&#x27;</span>;<br>                  time--;<br>              &#125;<br>          &#125;, <span class="hljs-number">1000</span>);<br>      &#125;);<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-6-this指向问题"><a href="#1-2-6-this指向问题" class="headerlink" title="1.2.6. this指向问题"></a>1.2.6. this指向问题</h3><p>​    this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象。</p><p>现阶段，我们先了解一下几个this指向</p><ol><li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p></li><li><p>方法调用中谁调用this指向谁</p></li><li><p>构造函数中this指向构造函数的实例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;点击&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span><br>    <span class="hljs-comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-built_in">window</span>.fn();<br>    <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 2. 方法调用中谁调用this指向谁</span><br>    <span class="hljs-keyword">var</span> o = &#123;<br>        sayHi: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this指向的是 o 这个对象</span><br>        &#125;<br>    &#125;<br>    o.sayHi();<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 事件处理函数中的this指向的是btn这个按钮对象</span><br>        &#125;)<br>    <span class="hljs-comment">// 3. 构造函数中this指向构造函数的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this 指向的是fun 实例对象</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> Fun();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-7-location对象"><a href="#1-2-7-location对象" class="headerlink" title="1.2.7. location对象"></a>1.2.7. location对象</h3><h4 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h4><p><img src="images/1551322091638.png" alt="1551322091638"></p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><img src="images/1551322373704.png" alt="1551322373704"></p><p><img src="images/1551322387201.png" alt="1551322387201"></p><h4 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h4><p><img src="images/1551322416716.png" alt="1551322416716"></p><p><img src="images/1551322438200.png" alt="1551322438200"></p><h4 id="案例：5分钟自动跳转页面"><a href="#案例：5分钟自动跳转页面" class="headerlink" title="案例：5分钟自动跳转页面"></a>案例：5分钟自动跳转页面</h4><p><img src="images/1551322496871.png" alt="1551322496871"></p><p><img src="images/1551322517605.png" alt="1551322517605"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;点击&lt;/button&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(location.href);</span><br>        location.href = <span class="hljs-string">&#x27;http://www.itcast.cn&#x27;</span>;<br>    &#125;)<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer == <span class="hljs-number">0</span>) &#123;<br>            location.href = <span class="hljs-string">&#x27;http://www.itcast.cn&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            div.innerHTML = <span class="hljs-string">&#x27;您将在&#x27;</span> + timer + <span class="hljs-string">&#x27;秒钟之后跳转到首页&#x27;</span>;<br>            timer--;<br>        &#125;<br>    &#125;, <span class="hljs-number">1000</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="案例：获取URL参数"><a href="#案例：获取URL参数" class="headerlink" title="案例：获取URL参数"></a>案例：获取URL参数</h4><p><img src="images/1551322622640.png" alt="1551322622640"></p><p><img src="images/1551322639241.png" alt="1551322639241"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">   &lt;div&gt;&lt;/div&gt;<br>&lt;script&gt;<br>       <span class="hljs-built_in">console</span>.log(location.search); <span class="hljs-comment">// ?uname=andy</span><br>       <span class="hljs-comment">// 1.先去掉？  substr(&#x27;起始的位置&#x27;，截取几个字符);</span><br>       <span class="hljs-keyword">var</span> params = location.search.substr(<span class="hljs-number">1</span>); <span class="hljs-comment">// uname=andy</span><br>       <span class="hljs-built_in">console</span>.log(params);<br>       <span class="hljs-comment">// 2. 利用=把字符串分割为数组 split(&#x27;=&#x27;);</span><br>       <span class="hljs-keyword">var</span> arr = params.split(<span class="hljs-string">&#x27;=&#x27;</span>);<br>       <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;uname&quot;, &quot;ANDY&quot;]</span><br>       <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>       <span class="hljs-comment">// 3.把数据写入div中</span><br>       div.innerHTML = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;欢迎您&#x27;</span>;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="location对象的常见方法"><a href="#location对象的常见方法" class="headerlink" title="location对象的常见方法"></a>location对象的常见方法</h4><p><img src="images/1551322750241.png" alt="1551322750241"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;点击&lt;/button&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 记录浏览历史，所以可以实现后退功能</span><br>        <span class="hljs-comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span><br>        <span class="hljs-comment">// 不记录浏览历史，所以不可以实现后退功能</span><br>        <span class="hljs-comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span><br>        location.reload(<span class="hljs-literal">true</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2-8-navigator对象"><a href="#1-2-8-navigator对象" class="headerlink" title="1.2.8. navigator对象"></a>1.2.8. navigator对象</h3><p>​    navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p><p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>((navigator.userAgent.match(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;&quot;</span>;     <span class="hljs-comment">//手机</span><br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;&quot;</span>;     <span class="hljs-comment">//电脑</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-9-history对象"><a href="#1-2-9-history对象" class="headerlink" title="1.2.9 history对象"></a>1.2.9 history对象</h3><p>​    window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><p><img src="images/1551322885216.png" alt="1551322885216"></p><p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p><p><img src="images/1551322959148.png" alt="1551322959148"></p><h2 id="1-3-JS执行机制"><a href="#1-3-JS执行机制" class="headerlink" title="1.3. JS执行机制"></a>1.3. JS执行机制</h2><p>以下代码执行的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>以下代码执行的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="1-3-1-JS-是单线程"><a href="#1-3-1-JS-是单线程" class="headerlink" title="1.3.1 JS 是单线程"></a>1.3.1 JS 是单线程</h3><p><img src="images/1551415019322.png" alt="1551415019322"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。<br></code></pre></td></tr></table></figure><h3 id="1-3-2-同步任务和异步任务"><a href="#1-3-2-同步任务和异步任务" class="headerlink" title="1.3.2 同步任务和异步任务"></a>1.3.2 同步任务和异步任务</h3><p>​    单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p><p>​    为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​    你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p><img src="images/1551434295074.png" alt="1551434295074"></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">JS中所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。<br><br>同步任务指的是：<br>在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br>异步任务指的是：<br>不进入主线程、而进入”任务队列”的任务，当主线程中的任务运行完了，才会从”任务队列”取出异步任务放入主线程执行。<br></code></pre></td></tr></table></figure><p><img src="images/1551434972778.png" alt="1551434972778"></p></blockquote><h3 id="1-3-3-JS执行机制（事件循环）"><a href="#1-3-3-JS执行机制（事件循环）" class="headerlink" title="1.3.3 JS执行机制（事件循环）"></a>1.3.3 JS执行机制（事件循环）</h3><p><img src="images/1551435335464.png" alt="1551435335464"></p><p><img src="images/1551435398306.png" alt="1551435398306"></p><p><img src="images/1551435449634.png" alt="1551435449634"></p><h3 id="1-3-4-代码思考题"><a href="#1-3-4-代码思考题" class="headerlink" title="1.3.4 代码思考题"></a>1.3.4 代码思考题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);<br>&#125;<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-number">3000</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JS数组的相关方法</title>
    <link href="/2021/01/28/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/01/28/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="JS数组的相关方法"><a href="#JS数组的相关方法" class="headerlink" title="JS数组的相关方法"></a>JS数组的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td><strong><code>★push(n1, n2)</code></strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>unshift(n1, n2)</code></strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>Array.isArray()</code></strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td><strong><code>pop()</code></strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>shift()</code></strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>sort(fn)</code></strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td><strong><code>reverse()</code></strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td><strong><code>★indexOf(元素)</code></strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>lastIndexOf(元素)</code></strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>★join(连接符)</code></strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>toString()</code></strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★splice(m, n)</code></strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td><strong><code>concat(arr1, arr2)</code></strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr><tr><td><strong><code>★forEach(fn)</code></strong></td><td>快速遍历数组</td><td><code>fn(item, index)</code></td><td>undefined</td><td>不会修改</td></tr><tr><td><strong><code>★filter(fn)</code></strong></td><td>从数组中筛选出所有符合条件的元素</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>some(fn)</code></strong></td><td>判断数组中是否有符合条件的某个元素</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>every(fn)</code></strong></td><td>判断数组中是否所有元素都符合条件</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>Array.from(obj[,fn])</code></strong></td><td>把其他类型的数据转成数组</td><td>其他类型数据</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★find(fn)</code></strong></td><td>查找数组中符合条件的第一个元素</td><td><code>fn(item, index)</code></td><td>元素值或undefined</td><td>不会修改</td></tr><tr><td><strong><code>findIndex(fn )</code></strong></td><td>查找数组中符合条件的第一个元素的索引</td><td><code>fn(item, index)</code></td><td>索引号或-1</td><td>不会修改</td></tr><tr><td><strong><code>includes(固定值)</code></strong></td><td>判断数组是否包含给定的值</td><td>固定值</td><td>布尔值</td><td>不会</td></tr><tr><td><strong><code>★map(fn)</code></strong></td><td>基于原数组去创建一个新数组</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会</td></tr><tr><td><strong><code>★JSON.stringify()</code></strong></td><td>把数组、对象转成字符串（序列化）</td><td>需要转化的数组、对象</td><td>字符串</td><td></td></tr></tbody></table><h2 id="JS-字符串的相关方法"><a href="#JS-字符串的相关方法" class="headerlink" title="JS 字符串的相关方法"></a>JS 字符串的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong><code>length</code></strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong><code>★str[i]</code></strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong><code>charAt(i)</code></strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong><code>★indexOf(字符[, n])</code></strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>lastIndexOf(字符)</code></strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★substr(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>substring(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★★★split(分隔符)</code></strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong><code>toUpperCase()</code></strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>toLowerCase()</code></strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>★trim()</code></strong></td><td>去除字符串两端的空格</td><td>无</td><td>去除空格后的字符</td></tr><tr><td><strong><code>startsWidth()</code></strong></td><td>判断字符串是否以某些字符开头</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>endsWidth()</code></strong></td><td>判断字符串是否以某些字符结尾</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>repeat(n)</code></strong></td><td>将某个字符串重复 n 次</td><td>重复的次数</td><td>新字符串</td></tr><tr><td><strong><code>★JSON.parse()</code></strong></td><td>把字符串再解析回原来的数组（反序列化）</td><td>需要转化的字符串</td><td>数组</td></tr></tbody></table><p><strong>备注:</strong><br>字符串中所有的方法都不会修改原本的字符串, 要想修改只能重新赋值;</p><p>重点记忆★的相关方法</p>]]></content>
    
    
    <categories>
      
      <category>相关方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
